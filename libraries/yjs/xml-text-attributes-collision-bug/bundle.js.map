{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://xml-text-attributes-collision-bug/webpack/bootstrap","webpack://xml-text-attributes-collision-bug/webpack/runtime/define property getters","webpack://xml-text-attributes-collision-bug/webpack/runtime/hasOwnProperty shorthand","webpack://xml-text-attributes-collision-bug/webpack/runtime/make namespace object","webpack://xml-text-attributes-collision-bug/./node_modules/lib0/map.js","webpack://xml-text-attributes-collision-bug/./node_modules/lib0/set.js","webpack://xml-text-attributes-collision-bug/./node_modules/lib0/array.js","webpack://xml-text-attributes-collision-bug/./node_modules/lib0/observable.js","webpack://xml-text-attributes-collision-bug/./node_modules/lib0/math.js","webpack://xml-text-attributes-collision-bug/./node_modules/lib0/string.js","webpack://xml-text-attributes-collision-bug/./node_modules/lib0/storage.js","webpack://xml-text-attributes-collision-bug/./node_modules/lib0/environment.js","webpack://xml-text-attributes-collision-bug/./node_modules/lib0/conditions.js","webpack://xml-text-attributes-collision-bug/./node_modules/lib0/buffer.js","webpack://xml-text-attributes-collision-bug/./node_modules/lib0/binary.js","webpack://xml-text-attributes-collision-bug/./node_modules/lib0/number.js","webpack://xml-text-attributes-collision-bug/./node_modules/lib0/encoding.js","webpack://xml-text-attributes-collision-bug/./node_modules/lib0/decoding.js","webpack://xml-text-attributes-collision-bug/./node_modules/isomorphic.js/browser.mjs","webpack://xml-text-attributes-collision-bug/./node_modules/lib0/random.js","webpack://xml-text-attributes-collision-bug/./node_modules/lib0/error.js","webpack://xml-text-attributes-collision-bug/./node_modules/lib0/function.js","webpack://xml-text-attributes-collision-bug/./node_modules/lib0/symbol.js","webpack://xml-text-attributes-collision-bug/./node_modules/lib0/pair.js","webpack://xml-text-attributes-collision-bug/./node_modules/lib0/dom.js","webpack://xml-text-attributes-collision-bug/./node_modules/lib0/time.js","webpack://xml-text-attributes-collision-bug/./node_modules/lib0/logging.js","webpack://xml-text-attributes-collision-bug/./node_modules/lib0/iterator.js","webpack://xml-text-attributes-collision-bug/./node_modules/lib0/object.js","webpack://xml-text-attributes-collision-bug/./node_modules/yjs/dist/yjs.mjs","webpack://xml-text-attributes-collision-bug/../data-visualization/src/data-viewer/json.js","webpack://xml-text-attributes-collision-bug/./index.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\n * Utility module to work with key-value stores.\n *\n * @module map\n */\n\n/**\n * Creates a new Map instance.\n *\n * @function\n * @return {Map<any, any>}\n *\n * @function\n */\nexport const create = () => new Map()\n\n/**\n * Copy a Map object into a fresh Map object.\n *\n * @function\n * @template X,Y\n * @param {Map<X,Y>} m\n * @return {Map<X,Y>}\n */\nexport const copy = m => {\n  const r = create()\n  m.forEach((v, k) => { r.set(k, v) })\n  return r\n}\n\n/**\n * Get map property. Create T if property is undefined and set T on map.\n *\n * ```js\n * const listeners = map.setIfUndefined(events, 'eventName', set.create)\n * listeners.add(listener)\n * ```\n *\n * @function\n * @template T,K\n * @param {Map<K, T>} map\n * @param {K} key\n * @param {function():T} createT\n * @return {T}\n */\nexport const setIfUndefined = (map, key, createT) => {\n  let set = map.get(key)\n  if (set === undefined) {\n    map.set(key, set = createT())\n  }\n  return set\n}\n\n/**\n * Creates an Array and populates it with the content of all key-value pairs using the `f(value, key)` function.\n *\n * @function\n * @template K\n * @template V\n * @template R\n * @param {Map<K,V>} m\n * @param {function(V,K):R} f\n * @return {Array<R>}\n */\nexport const map = (m, f) => {\n  const res = []\n  for (const [key, value] of m) {\n    res.push(f(value, key))\n  }\n  return res\n}\n\n/**\n * Tests whether any key-value pairs pass the test implemented by `f(value, key)`.\n *\n * @todo should rename to some - similarly to Array.some\n *\n * @function\n * @template K\n * @template V\n * @param {Map<K,V>} m\n * @param {function(V,K):boolean} f\n * @return {boolean}\n */\nexport const any = (m, f) => {\n  for (const [key, value] of m) {\n    if (f(value, key)) {\n      return true\n    }\n  }\n  return false\n}\n\n/**\n * Tests whether all key-value pairs pass the test implemented by `f(value, key)`.\n *\n * @function\n * @template K\n * @template V\n * @param {Map<K,V>} m\n * @param {function(V,K):boolean} f\n * @return {boolean}\n */\nexport const all = (m, f) => {\n  for (const [key, value] of m) {\n    if (!f(value, key)) {\n      return false\n    }\n  }\n  return true\n}\n","/**\n * Utility module to work with sets.\n *\n * @module set\n */\n\nexport const create = () => new Set()\n\n/**\n * @template T\n * @param {Set<T>} set\n * @return {Array<T>}\n */\nexport const toArray = set => Array.from(set)\n","/**\n * Utility module to work with Arrays.\n *\n * @module array\n */\n\n/**\n * Return the last element of an array. The element must exist\n *\n * @template L\n * @param {Array<L>} arr\n * @return {L}\n */\nexport const last = arr => arr[arr.length - 1]\n\n/**\n * @template C\n * @return {Array<C>}\n */\nexport const create = () => /** @type {Array<C>} */ ([])\n\n/**\n * @template D\n * @param {Array<D>} a\n * @return {Array<D>}\n */\nexport const copy = a => /** @type {Array<D>} */ (a.slice())\n\n/**\n * Append elements from src to dest\n *\n * @template M\n * @param {Array<M>} dest\n * @param {Array<M>} src\n */\nexport const appendTo = (dest, src) => {\n  for (let i = 0; i < src.length; i++) {\n    dest.push(src[i])\n  }\n}\n\n/**\n * Transforms something array-like to an actual Array.\n *\n * @function\n * @template T\n * @param {ArrayLike<T>|Iterable<T>} arraylike\n * @return {T}\n */\nexport const from = Array.from\n\n/**\n * True iff condition holds on every element in the Array.\n *\n * @function\n * @template ITEM\n *\n * @param {Array<ITEM>} arr\n * @param {function(ITEM, number, Array<ITEM>):boolean} f\n * @return {boolean}\n */\nexport const every = (arr, f) => arr.every(f)\n\n/**\n * True iff condition holds on some element in the Array.\n *\n * @function\n * @template S\n * @param {Array<S>} arr\n * @param {function(S, number, Array<S>):boolean} f\n * @return {boolean}\n */\nexport const some = (arr, f) => arr.some(f)\n\n/**\n * @template ELEM\n *\n * @param {Array<ELEM>} a\n * @param {Array<ELEM>} b\n * @return {boolean}\n */\nexport const equalFlat = (a, b) => a.length === b.length && every(a, (item, index) => item === b[index])\n\n/**\n * @template ELEM\n * @param {Array<Array<ELEM>>} arr\n * @return {Array<ELEM>}\n */\nexport const flatten = arr => arr.reduce((acc, val) => acc.concat(val), [])\n","/**\n * Observable class prototype.\n *\n * @module observable\n */\n\nimport * as map from './map.js'\nimport * as set from './set.js'\nimport * as array from './array.js'\n\n/**\n * Handles named events.\n *\n * @template N\n */\nexport class Observable {\n  constructor () {\n    /**\n     * Some desc.\n     * @type {Map<N, any>}\n     */\n    this._observers = map.create()\n  }\n\n  /**\n   * @param {N} name\n   * @param {function} f\n   */\n  on (name, f) {\n    map.setIfUndefined(this._observers, name, set.create).add(f)\n  }\n\n  /**\n   * @param {N} name\n   * @param {function} f\n   */\n  once (name, f) {\n    /**\n     * @param  {...any} args\n     */\n    const _f = (...args) => {\n      this.off(name, _f)\n      f(...args)\n    }\n    this.on(name, _f)\n  }\n\n  /**\n   * @param {N} name\n   * @param {function} f\n   */\n  off (name, f) {\n    const observers = this._observers.get(name)\n    if (observers !== undefined) {\n      observers.delete(f)\n      if (observers.size === 0) {\n        this._observers.delete(name)\n      }\n    }\n  }\n\n  /**\n   * Emit a named event. All registered event listeners that listen to the\n   * specified name will receive the event.\n   *\n   * @todo This should catch exceptions\n   *\n   * @param {N} name The event name.\n   * @param {Array<any>} args The arguments that are applied to the event listener.\n   */\n  emit (name, args) {\n    // copy all listeners to an array first to make sure that no event is emitted to listeners that are subscribed while the event handler is called.\n    return array.from((this._observers.get(name) || map.create()).values()).forEach(f => f(...args))\n  }\n\n  destroy () {\n    this._observers = map.create()\n  }\n}\n","/**\n * Common Math expressions.\n *\n * @module math\n */\n\nexport const floor = Math.floor\nexport const ceil = Math.ceil\nexport const abs = Math.abs\nexport const imul = Math.imul\nexport const round = Math.round\nexport const log10 = Math.log10\nexport const log2 = Math.log2\nexport const log = Math.log\nexport const sqrt = Math.sqrt\n\n/**\n * @function\n * @param {number} a\n * @param {number} b\n * @return {number} The sum of a and b\n */\nexport const add = (a, b) => a + b\n\n/**\n * @function\n * @param {number} a\n * @param {number} b\n * @return {number} The smaller element of a and b\n */\nexport const min = (a, b) => a < b ? a : b\n\n/**\n * @function\n * @param {number} a\n * @param {number} b\n * @return {number} The bigger element of a and b\n */\nexport const max = (a, b) => a > b ? a : b\n\nexport const isNaN = Number.isNaN\n\nexport const pow = Math.pow\n/**\n * Base 10 exponential function. Returns the value of 10 raised to the power of pow.\n *\n * @param {number} exp\n * @return {number}\n */\nexport const exp10 = exp => Math.pow(10, exp)\n\nexport const sign = Math.sign\n\n/**\n * @param {number} n\n * @return {boolean} Wether n is negative. This function also differentiates between -0 and +0\n */\nexport const isNegativeZero = n => n !== 0 ? n < 0 : 1 / n < 0\n","/**\n * Utility module to work with strings.\n *\n * @module string\n */\n\nexport const fromCharCode = String.fromCharCode\nexport const fromCodePoint = String.fromCodePoint\n\n/**\n * @param {string} s\n * @return {string}\n */\nconst toLowerCase = s => s.toLowerCase()\n\nconst trimLeftRegex = /^\\s*/g\n\n/**\n * @param {string} s\n * @return {string}\n */\nexport const trimLeft = s => s.replace(trimLeftRegex, '')\n\nconst fromCamelCaseRegex = /([A-Z])/g\n\n/**\n * @param {string} s\n * @param {string} separator\n * @return {string}\n */\nexport const fromCamelCase = (s, separator) => trimLeft(s.replace(fromCamelCaseRegex, match => `${separator}${toLowerCase(match)}`))\n\n/**\n * Compute the utf8ByteLength\n * @param {string} str\n * @return {number}\n */\nexport const utf8ByteLength = str => unescape(encodeURIComponent(str)).length\n\n/**\n * @param {string} str\n * @return {Uint8Array}\n */\nexport const _encodeUtf8Polyfill = str => {\n  const encodedString = unescape(encodeURIComponent(str))\n  const len = encodedString.length\n  const buf = new Uint8Array(len)\n  for (let i = 0; i < len; i++) {\n    buf[i] = /** @type {number} */ (encodedString.codePointAt(i))\n  }\n  return buf\n}\n\n/* istanbul ignore next */\nexport const utf8TextEncoder = /** @type {TextEncoder} */ (typeof TextEncoder !== 'undefined' ? new TextEncoder() : null)\n\n/**\n * @param {string} str\n * @return {Uint8Array}\n */\nexport const _encodeUtf8Native = str => utf8TextEncoder.encode(str)\n\n/**\n * @param {string} str\n * @return {Uint8Array}\n */\n/* istanbul ignore next */\nexport const encodeUtf8 = utf8TextEncoder ? _encodeUtf8Native : _encodeUtf8Polyfill\n\n/**\n * @param {Uint8Array} buf\n * @return {string}\n */\nexport const _decodeUtf8Polyfill = buf => {\n  let remainingLen = buf.length\n  let encodedString = ''\n  let bufPos = 0\n  while (remainingLen > 0) {\n    const nextLen = remainingLen < 10000 ? remainingLen : 10000\n    const bytes = buf.subarray(bufPos, bufPos + nextLen)\n    bufPos += nextLen\n    // Starting with ES5.1 we can supply a generic array-like object as arguments\n    encodedString += String.fromCodePoint.apply(null, /** @type {any} */ (bytes))\n    remainingLen -= nextLen\n  }\n  return decodeURIComponent(escape(encodedString))\n}\n\n/* istanbul ignore next */\nexport let utf8TextDecoder = typeof TextDecoder === 'undefined' ? null : new TextDecoder('utf-8', { fatal: true, ignoreBOM: true })\n\n/* istanbul ignore next */\nif (utf8TextDecoder && utf8TextDecoder.decode(new Uint8Array()).length === 1) {\n  // Safari doesn't handle BOM correctly.\n  // This fixes a bug in Safari 13.0.5 where it produces a BOM the first time it is called.\n  // utf8TextDecoder.decode(new Uint8Array()).length === 1 on the first call and\n  // utf8TextDecoder.decode(new Uint8Array()).length === 1 on the second call\n  // Another issue is that from then on no BOM chars are recognized anymore\n  /* istanbul ignore next */\n  utf8TextDecoder = null\n}\n\n/**\n * @param {Uint8Array} buf\n * @return {string}\n */\nexport const _decodeUtf8Native = buf => /** @type {TextDecoder} */ (utf8TextDecoder).decode(buf)\n\n/**\n * @param {Uint8Array} buf\n * @return {string}\n */\n/* istanbul ignore next */\nexport const decodeUtf8 = utf8TextDecoder ? _decodeUtf8Native : _decodeUtf8Polyfill\n","/* global localStorage, addEventListener */\n\n/**\n * Isomorphic variable storage.\n *\n * Uses LocalStorage in the browser and falls back to in-memory storage.\n *\n * @module storage\n */\n\n/* istanbul ignore next */\nclass VarStoragePolyfill {\n  constructor () {\n    this.map = new Map()\n  }\n\n  /**\n   * @param {string} key\n   * @param {any} newValue\n   */\n  setItem (key, newValue) {\n    this.map.set(key, newValue)\n  }\n\n  /**\n   * @param {string} key\n   */\n  getItem (key) {\n    return this.map.get(key)\n  }\n}\n\n/* istanbul ignore next */\n/**\n * @type {any}\n */\nlet _localStorage = new VarStoragePolyfill()\nlet usePolyfill = true\n\ntry {\n  // if the same-origin rule is violated, accessing localStorage might thrown an error\n  /* istanbul ignore next */\n  if (typeof localStorage !== 'undefined') {\n    _localStorage = localStorage\n    usePolyfill = false\n  }\n} catch (e) { }\n\n/* istanbul ignore next */\n/**\n * This is basically localStorage in browser, or a polyfill in nodejs\n */\nexport const varStorage = _localStorage\n\n/* istanbul ignore next */\n/**\n * A polyfill for `addEventListener('storage', event => {..})` that does nothing if the polyfill is being used.\n *\n * @param {function({ key: string, newValue: string, oldValue: string }): void} eventHandler\n * @function\n */\nexport const onChange = eventHandler => usePolyfill || addEventListener('storage', /** @type {any} */ (eventHandler))\n","/**\n * Isomorphic module to work access the environment (query params, env variables).\n *\n * @module map\n */\n\nimport * as map from './map.js'\nimport * as string from './string.js'\nimport * as conditions from './conditions.js'\nimport * as storage from './storage.js'\n\n/* istanbul ignore next */\n// @ts-ignore\nexport const isNode = typeof process !== 'undefined' && process.release && /node|io\\.js/.test(process.release.name)\n/* istanbul ignore next */\nexport const isBrowser = typeof window !== 'undefined' && !isNode\n/* istanbul ignore next */\nexport const isMac = typeof navigator !== 'undefined' ? /Mac/.test(navigator.platform) : false\n\n/**\n * @type {Map<string,string>}\n */\nlet params\nconst args = []\n\n/* istanbul ignore next */\nconst computeParams = () => {\n  if (params === undefined) {\n    if (isNode) {\n      params = map.create()\n      const pargs = process.argv\n      let currParamName = null\n      /* istanbul ignore next */\n      for (let i = 0; i < pargs.length; i++) {\n        const parg = pargs[i]\n        if (parg[0] === '-') {\n          if (currParamName !== null) {\n            params.set(currParamName, '')\n          }\n          currParamName = parg\n        } else {\n          if (currParamName !== null) {\n            params.set(currParamName, parg)\n            currParamName = null\n          } else {\n            args.push(parg)\n          }\n        }\n      }\n      if (currParamName !== null) {\n        params.set(currParamName, '')\n      }\n    // in ReactNative for example this would not be true (unless connected to the Remote Debugger)\n    } else if (typeof location === 'object') {\n      params = map.create()\n      // eslint-disable-next-line no-undef\n      ;(location.search || '?').slice(1).split('&').forEach(kv => {\n        if (kv.length !== 0) {\n          const [key, value] = kv.split('=')\n          params.set(`--${string.fromCamelCase(key, '-')}`, value)\n          params.set(`-${string.fromCamelCase(key, '-')}`, value)\n        }\n      })\n    } else {\n      params = map.create()\n    }\n  }\n  return params\n}\n\n/**\n * @param {string} name\n * @return {boolean}\n */\n/* istanbul ignore next */\nexport const hasParam = name => computeParams().has(name)\n\n/**\n * @param {string} name\n * @param {string} defaultVal\n * @return {string}\n */\n/* istanbul ignore next */\nexport const getParam = (name, defaultVal) => computeParams().get(name) || defaultVal\n// export const getArgs = name => computeParams() && args\n\n/**\n * @param {string} name\n * @return {string|null}\n */\n/* istanbul ignore next */\nexport const getVariable = name => isNode ? conditions.undefinedToNull(process.env[name.toUpperCase()]) : conditions.undefinedToNull(storage.varStorage.getItem(name))\n\n/**\n * @param {string} name\n * @return {string|null}\n */\nexport const getConf = name => computeParams().get('--' + name) || getVariable(name)\n\n/**\n * @param {string} name\n * @return {boolean}\n */\n/* istanbul ignore next */\nexport const hasConf = name => hasParam('--' + name) || getVariable(name) !== null\n\n/* istanbul ignore next */\nexport const production = hasConf('production')\n","/**\n * Often used conditions.\n *\n * @module conditions\n */\n\n/**\n * @template T\n * @param {T|null|undefined} v\n * @return {T|null}\n */\n/* istanbul ignore next */\nexport const undefinedToNull = v => v === undefined ? null : v\n","/**\n * Utility functions to work with buffers (Uint8Array).\n *\n * @module buffer\n */\n\nimport * as string from './string.js'\nimport * as env from './environment.js'\nimport * as encoding from './encoding.js'\nimport * as decoding from './decoding.js'\n\n/**\n * @param {number} len\n */\nexport const createUint8ArrayFromLen = len => new Uint8Array(len)\n\n/**\n * Create Uint8Array with initial content from buffer\n *\n * @param {ArrayBuffer} buffer\n * @param {number} byteOffset\n * @param {number} length\n */\nexport const createUint8ArrayViewFromArrayBuffer = (buffer, byteOffset, length) => new Uint8Array(buffer, byteOffset, length)\n\n/**\n * Create Uint8Array with initial content from buffer\n *\n * @param {ArrayBuffer} buffer\n */\nexport const createUint8ArrayFromArrayBuffer = buffer => new Uint8Array(buffer)\n\n/* istanbul ignore next */\n/**\n * @param {Uint8Array} bytes\n * @return {string}\n */\nconst toBase64Browser = bytes => {\n  let s = ''\n  for (let i = 0; i < bytes.byteLength; i++) {\n    s += string.fromCharCode(bytes[i])\n  }\n  // eslint-disable-next-line no-undef\n  return btoa(s)\n}\n\n/**\n * @param {Uint8Array} bytes\n * @return {string}\n */\nconst toBase64Node = bytes => Buffer.from(bytes.buffer, bytes.byteOffset, bytes.byteLength).toString('base64')\n\n/* istanbul ignore next */\n/**\n * @param {string} s\n * @return {Uint8Array}\n */\nconst fromBase64Browser = s => {\n  // eslint-disable-next-line no-undef\n  const a = atob(s)\n  const bytes = createUint8ArrayFromLen(a.length)\n  for (let i = 0; i < a.length; i++) {\n    bytes[i] = a.charCodeAt(i)\n  }\n  return bytes\n}\n\n/**\n * @param {string} s\n */\nconst fromBase64Node = s => {\n  const buf = Buffer.from(s, 'base64')\n  return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength)\n}\n\n/* istanbul ignore next */\nexport const toBase64 = env.isBrowser ? toBase64Browser : toBase64Node\n\n/* istanbul ignore next */\nexport const fromBase64 = env.isBrowser ? fromBase64Browser : fromBase64Node\n\n/**\n * Copy the content of an Uint8Array view to a new ArrayBuffer.\n *\n * @param {Uint8Array} uint8Array\n * @return {Uint8Array}\n */\nexport const copyUint8Array = uint8Array => {\n  const newBuf = createUint8ArrayFromLen(uint8Array.byteLength)\n  newBuf.set(uint8Array)\n  return newBuf\n}\n\n/**\n * Encode anything as a UInt8Array. It's a pun on typescripts's `any` type.\n * See encoding.writeAny for more information.\n *\n * @param {any} data\n * @return {Uint8Array}\n */\nexport const encodeAny = data => {\n  const encoder = encoding.createEncoder()\n  encoding.writeAny(encoder, data)\n  return encoding.toUint8Array(encoder)\n}\n\n/**\n * Decode an any-encoded value.\n *\n * @param {Uint8Array} buf\n * @return {any}\n */\nexport const decodeAny = buf => decoding.readAny(decoding.createDecoder(buf))\n","/* eslint-env browser */\n\n/**\n * Binary data constants.\n *\n * @module binary\n */\n\n/**\n * n-th bit activated.\n *\n * @type {number}\n */\nexport const BIT1 = 1\nexport const BIT2 = 2\nexport const BIT3 = 4\nexport const BIT4 = 8\nexport const BIT5 = 16\nexport const BIT6 = 32\nexport const BIT7 = 64\nexport const BIT8 = 128\nexport const BIT9 = 256\nexport const BIT10 = 512\nexport const BIT11 = 1024\nexport const BIT12 = 2048\nexport const BIT13 = 4096\nexport const BIT14 = 8192\nexport const BIT15 = 16384\nexport const BIT16 = 32768\nexport const BIT17 = 65536\nexport const BIT18 = 1 << 17\nexport const BIT19 = 1 << 18\nexport const BIT20 = 1 << 19\nexport const BIT21 = 1 << 20\nexport const BIT22 = 1 << 21\nexport const BIT23 = 1 << 22\nexport const BIT24 = 1 << 23\nexport const BIT25 = 1 << 24\nexport const BIT26 = 1 << 25\nexport const BIT27 = 1 << 26\nexport const BIT28 = 1 << 27\nexport const BIT29 = 1 << 28\nexport const BIT30 = 1 << 29\nexport const BIT31 = 1 << 30\nexport const BIT32 = 1 << 31\n\n/**\n * First n bits activated.\n *\n * @type {number}\n */\nexport const BITS0 = 0\nexport const BITS1 = 1\nexport const BITS2 = 3\nexport const BITS3 = 7\nexport const BITS4 = 15\nexport const BITS5 = 31\nexport const BITS6 = 63\nexport const BITS7 = 127\nexport const BITS8 = 255\nexport const BITS9 = 511\nexport const BITS10 = 1023\nexport const BITS11 = 2047\nexport const BITS12 = 4095\nexport const BITS13 = 8191\nexport const BITS14 = 16383\nexport const BITS15 = 32767\nexport const BITS16 = 65535\nexport const BITS17 = BIT18 - 1\nexport const BITS18 = BIT19 - 1\nexport const BITS19 = BIT20 - 1\nexport const BITS20 = BIT21 - 1\nexport const BITS21 = BIT22 - 1\nexport const BITS22 = BIT23 - 1\nexport const BITS23 = BIT24 - 1\nexport const BITS24 = BIT25 - 1\nexport const BITS25 = BIT26 - 1\nexport const BITS26 = BIT27 - 1\nexport const BITS27 = BIT28 - 1\nexport const BITS28 = BIT29 - 1\nexport const BITS29 = BIT30 - 1\nexport const BITS30 = BIT31 - 1\n/**\n * @type {number}\n */\nexport const BITS31 = 0x7FFFFFFF\n/**\n * @type {number}\n */\nexport const BITS32 = 0xFFFFFFFF\n","/**\n * Utility helpers for working with numbers.\n *\n * @module number\n */\n\nimport * as math from './math.js'\nimport * as binary from './binary.js'\n\nexport const MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER\nexport const MIN_SAFE_INTEGER = Number.MIN_SAFE_INTEGER\n\nexport const LOWEST_INT32 = 1 << 31\n/**\n * @type {number}\n */\nexport const HIGHEST_INT32 = binary.BITS31\n\n/**\n * @module number\n */\n\n/* istanbul ignore next */\nexport const isInteger = Number.isInteger || (num => typeof num === 'number' && isFinite(num) && math.floor(num) === num)\nexport const isNaN = Number.isNaN\n","/**\n * Efficient schema-less binary encoding with support for variable length encoding.\n *\n * Use [lib0/encoding] with [lib0/decoding]. Every encoding function has a corresponding decoding function.\n *\n * Encodes numbers in little-endian order (least to most significant byte order)\n * and is compatible with Golang's binary encoding (https://golang.org/pkg/encoding/binary/)\n * which is also used in Protocol Buffers.\n *\n * ```js\n * // encoding step\n * const encoder = new encoding.createEncoder()\n * encoding.writeVarUint(encoder, 256)\n * encoding.writeVarString(encoder, 'Hello world!')\n * const buf = encoding.toUint8Array(encoder)\n * ```\n *\n * ```js\n * // decoding step\n * const decoder = new decoding.createDecoder(buf)\n * decoding.readVarUint(decoder) // => 256\n * decoding.readVarString(decoder) // => 'Hello world!'\n * decoding.hasContent(decoder) // => false - all data is read\n * ```\n *\n * @module encoding\n */\n\nimport * as buffer from './buffer.js'\nimport * as math from './math.js'\nimport * as number from './number.js'\nimport * as binary from './binary.js'\n\n/**\n * A BinaryEncoder handles the encoding to an Uint8Array.\n */\nexport class Encoder {\n  constructor () {\n    this.cpos = 0\n    this.cbuf = new Uint8Array(100)\n    /**\n     * @type {Array<Uint8Array>}\n     */\n    this.bufs = []\n  }\n}\n\n/**\n * @function\n * @return {Encoder}\n */\nexport const createEncoder = () => new Encoder()\n\n/**\n * The current length of the encoded data.\n *\n * @function\n * @param {Encoder} encoder\n * @return {number}\n */\nexport const length = encoder => {\n  let len = encoder.cpos\n  for (let i = 0; i < encoder.bufs.length; i++) {\n    len += encoder.bufs[i].length\n  }\n  return len\n}\n\n/**\n * Transform to Uint8Array.\n *\n * @function\n * @param {Encoder} encoder\n * @return {Uint8Array} The created ArrayBuffer.\n */\nexport const toUint8Array = encoder => {\n  const uint8arr = new Uint8Array(length(encoder))\n  let curPos = 0\n  for (let i = 0; i < encoder.bufs.length; i++) {\n    const d = encoder.bufs[i]\n    uint8arr.set(d, curPos)\n    curPos += d.length\n  }\n  uint8arr.set(buffer.createUint8ArrayViewFromArrayBuffer(encoder.cbuf.buffer, 0, encoder.cpos), curPos)\n  return uint8arr\n}\n\n/**\n * Verify that it is possible to write `len` bytes wtihout checking. If\n * necessary, a new Buffer with the required length is attached.\n *\n * @param {Encoder} encoder\n * @param {number} len\n */\nconst verifyLen = (encoder, len) => {\n  const bufferLen = encoder.cbuf.length\n  if (bufferLen - encoder.cpos < len) {\n    encoder.bufs.push(buffer.createUint8ArrayViewFromArrayBuffer(encoder.cbuf.buffer, 0, encoder.cpos))\n    encoder.cbuf = new Uint8Array(math.max(bufferLen, len) * 2)\n    encoder.cpos = 0\n  }\n}\n\n/**\n * Write one byte to the encoder.\n *\n * @function\n * @param {Encoder} encoder\n * @param {number} num The byte that is to be encoded.\n */\nexport const write = (encoder, num) => {\n  const bufferLen = encoder.cbuf.length\n  if (encoder.cpos === bufferLen) {\n    encoder.bufs.push(encoder.cbuf)\n    encoder.cbuf = new Uint8Array(bufferLen * 2)\n    encoder.cpos = 0\n  }\n  encoder.cbuf[encoder.cpos++] = num\n}\n\n/**\n * Write one byte at a specific position.\n * Position must already be written (i.e. encoder.length > pos)\n *\n * @function\n * @param {Encoder} encoder\n * @param {number} pos Position to which to write data\n * @param {number} num Unsigned 8-bit integer\n */\nexport const set = (encoder, pos, num) => {\n  let buffer = null\n  // iterate all buffers and adjust position\n  for (let i = 0; i < encoder.bufs.length && buffer === null; i++) {\n    const b = encoder.bufs[i]\n    if (pos < b.length) {\n      buffer = b // found buffer\n    } else {\n      pos -= b.length\n    }\n  }\n  if (buffer === null) {\n    // use current buffer\n    buffer = encoder.cbuf\n  }\n  buffer[pos] = num\n}\n\n/**\n * Write one byte as an unsigned integer.\n *\n * @function\n * @param {Encoder} encoder\n * @param {number} num The number that is to be encoded.\n */\nexport const writeUint8 = write\n\n/**\n * Write one byte as an unsigned Integer at a specific location.\n *\n * @function\n * @param {Encoder} encoder\n * @param {number} pos The location where the data will be written.\n * @param {number} num The number that is to be encoded.\n */\nexport const setUint8 = set\n\n/**\n * Write two bytes as an unsigned integer.\n *\n * @function\n * @param {Encoder} encoder\n * @param {number} num The number that is to be encoded.\n */\nexport const writeUint16 = (encoder, num) => {\n  write(encoder, num & binary.BITS8)\n  write(encoder, (num >>> 8) & binary.BITS8)\n}\n/**\n * Write two bytes as an unsigned integer at a specific location.\n *\n * @function\n * @param {Encoder} encoder\n * @param {number} pos The location where the data will be written.\n * @param {number} num The number that is to be encoded.\n */\nexport const setUint16 = (encoder, pos, num) => {\n  set(encoder, pos, num & binary.BITS8)\n  set(encoder, pos + 1, (num >>> 8) & binary.BITS8)\n}\n\n/**\n * Write two bytes as an unsigned integer\n *\n * @function\n * @param {Encoder} encoder\n * @param {number} num The number that is to be encoded.\n */\nexport const writeUint32 = (encoder, num) => {\n  for (let i = 0; i < 4; i++) {\n    write(encoder, num & binary.BITS8)\n    num >>>= 8\n  }\n}\n\n/**\n * Write two bytes as an unsigned integer in big endian order.\n * (most significant byte first)\n *\n * @function\n * @param {Encoder} encoder\n * @param {number} num The number that is to be encoded.\n */\nexport const writeUint32BigEndian = (encoder, num) => {\n  for (let i = 3; i >= 0; i--) {\n    write(encoder, (num >>> (8 * i)) & binary.BITS8)\n  }\n}\n\n/**\n * Write two bytes as an unsigned integer at a specific location.\n *\n * @function\n * @param {Encoder} encoder\n * @param {number} pos The location where the data will be written.\n * @param {number} num The number that is to be encoded.\n */\nexport const setUint32 = (encoder, pos, num) => {\n  for (let i = 0; i < 4; i++) {\n    set(encoder, pos + i, num & binary.BITS8)\n    num >>>= 8\n  }\n}\n\n/**\n * Write a variable length unsigned integer.\n *\n * Encodes integers in the range from [0, 4294967295] / [0, 0xffffffff]. (max 32 bit unsigned integer)\n *\n * @function\n * @param {Encoder} encoder\n * @param {number} num The number that is to be encoded.\n */\nexport const writeVarUint = (encoder, num) => {\n  while (num > binary.BITS7) {\n    write(encoder, binary.BIT8 | (binary.BITS7 & num))\n    num >>>= 7\n  }\n  write(encoder, binary.BITS7 & num)\n}\n\n/**\n * Write a variable length integer.\n *\n * Encodes integers in the range from [-2147483648, -2147483647].\n *\n * We don't use zig-zag encoding because we want to keep the option open\n * to use the same function for BigInt and 53bit integers (doubles).\n *\n * We use the 7th bit instead for signaling that this is a negative number.\n *\n * @function\n * @param {Encoder} encoder\n * @param {number} num The number that is to be encoded.\n */\nexport const writeVarInt = (encoder, num) => {\n  const isNegative = math.isNegativeZero(num)\n  if (isNegative) {\n    num = -num\n  }\n  //             |- whether to continue reading         |- whether is negative     |- number\n  write(encoder, (num > binary.BITS6 ? binary.BIT8 : 0) | (isNegative ? binary.BIT7 : 0) | (binary.BITS6 & num))\n  num >>>= 6\n  // We don't need to consider the case of num === 0 so we can use a different\n  // pattern here than above.\n  while (num > 0) {\n    write(encoder, (num > binary.BITS7 ? binary.BIT8 : 0) | (binary.BITS7 & num))\n    num >>>= 7\n  }\n}\n\n/**\n * Write a variable length string.\n *\n * @function\n * @param {Encoder} encoder\n * @param {String} str The string that is to be encoded.\n */\nexport const writeVarString = (encoder, str) => {\n  const encodedString = unescape(encodeURIComponent(str))\n  const len = encodedString.length\n  writeVarUint(encoder, len)\n  for (let i = 0; i < len; i++) {\n    write(encoder, /** @type {number} */ (encodedString.codePointAt(i)))\n  }\n}\n\n/**\n * Write the content of another Encoder.\n *\n * @TODO: can be improved!\n *        - Note: Should consider that when appending a lot of small Encoders, we should rather clone than referencing the old structure.\n *                Encoders start with a rather big initial buffer.\n *\n * @function\n * @param {Encoder} encoder The enUint8Arr\n * @param {Encoder} append The BinaryEncoder to be written.\n */\nexport const writeBinaryEncoder = (encoder, append) => writeUint8Array(encoder, toUint8Array(append))\n\n/**\n * Append fixed-length Uint8Array to the encoder.\n *\n * @function\n * @param {Encoder} encoder\n * @param {Uint8Array} uint8Array\n */\nexport const writeUint8Array = (encoder, uint8Array) => {\n  const bufferLen = encoder.cbuf.length\n  const cpos = encoder.cpos\n  const leftCopyLen = math.min(bufferLen - cpos, uint8Array.length)\n  const rightCopyLen = uint8Array.length - leftCopyLen\n  encoder.cbuf.set(uint8Array.subarray(0, leftCopyLen), cpos)\n  encoder.cpos += leftCopyLen\n  if (rightCopyLen > 0) {\n    // Still something to write, write right half..\n    // Append new buffer\n    encoder.bufs.push(encoder.cbuf)\n    // must have at least size of remaining buffer\n    encoder.cbuf = new Uint8Array(math.max(bufferLen * 2, rightCopyLen))\n    // copy array\n    encoder.cbuf.set(uint8Array.subarray(leftCopyLen))\n    encoder.cpos = rightCopyLen\n  }\n}\n\n/**\n * Append an Uint8Array to Encoder.\n *\n * @function\n * @param {Encoder} encoder\n * @param {Uint8Array} uint8Array\n */\nexport const writeVarUint8Array = (encoder, uint8Array) => {\n  writeVarUint(encoder, uint8Array.byteLength)\n  writeUint8Array(encoder, uint8Array)\n}\n\n/**\n * Create an DataView of the next `len` bytes. Use it to write data after\n * calling this function.\n *\n * ```js\n * // write float32 using DataView\n * const dv = writeOnDataView(encoder, 4)\n * dv.setFloat32(0, 1.1)\n * // read float32 using DataView\n * const dv = readFromDataView(encoder, 4)\n * dv.getFloat32(0) // => 1.100000023841858 (leaving it to the reader to find out why this is the correct result)\n * ```\n *\n * @param {Encoder} encoder\n * @param {number} len\n * @return {DataView}\n */\nexport const writeOnDataView = (encoder, len) => {\n  verifyLen(encoder, len)\n  const dview = new DataView(encoder.cbuf.buffer, encoder.cpos, len)\n  encoder.cpos += len\n  return dview\n}\n\n/**\n * @param {Encoder} encoder\n * @param {number} num\n */\nexport const writeFloat32 = (encoder, num) => writeOnDataView(encoder, 4).setFloat32(0, num, false)\n\n/**\n * @param {Encoder} encoder\n * @param {number} num\n */\nexport const writeFloat64 = (encoder, num) => writeOnDataView(encoder, 8).setFloat64(0, num, false)\n\n/**\n * @param {Encoder} encoder\n * @param {bigint} num\n */\nexport const writeBigInt64 = (encoder, num) => /** @type {any} */ (writeOnDataView(encoder, 8)).setBigInt64(0, num, false)\n\n/**\n * @param {Encoder} encoder\n * @param {bigint} num\n */\nexport const writeBigUint64 = (encoder, num) => /** @type {any} */ (writeOnDataView(encoder, 8)).setBigUint64(0, num, false)\n\nconst floatTestBed = new DataView(new ArrayBuffer(4))\n/**\n * Check if a number can be encoded as a 32 bit float.\n *\n * @param {number} num\n * @return {boolean}\n */\nconst isFloat32 = num => {\n  floatTestBed.setFloat32(0, num)\n  return floatTestBed.getFloat32(0) === num\n}\n\n/**\n * Encode data with efficient binary format.\n *\n * Differences to JSON:\n * • Transforms data to a binary format (not to a string)\n * • Encodes undefined, NaN, and ArrayBuffer (these can't be represented in JSON)\n * • Numbers are efficiently encoded either as a variable length integer, as a\n *   32 bit float, as a 64 bit float, or as a 64 bit bigint.\n *\n * Encoding table:\n *\n * | Data Type           | Prefix   | Encoding Method    | Comment |\n * | ------------------- | -------- | ------------------ | ------- |\n * | undefined           | 127      |                    | Functions, symbol, and everything that cannot be identified is encoded as undefined |\n * | null                | 126      |                    | |\n * | integer             | 125      | writeVarInt        | Only encodes 32 bit signed integers |\n * | float32             | 124      | writeFloat32       | |\n * | float64             | 123      | writeFloat64       | |\n * | bigint              | 122      | writeBigInt64      | |\n * | boolean (false)     | 121      |                    | True and false are different data types so we save the following byte |\n * | boolean (true)      | 120      |                    | - 0b01111000 so the last bit determines whether true or false |\n * | string              | 119      | writeVarString     | |\n * | object<string,any>  | 118      | custom             | Writes {length} then {length} key-value pairs |\n * | array<any>          | 117      | custom             | Writes {length} then {length} json values |\n * | Uint8Array          | 116      | writeVarUint8Array | We use Uint8Array for any kind of binary data |\n *\n * Reasons for the decreasing prefix:\n * We need the first bit for extendability (later we may want to encode the\n * prefix with writeVarUint). The remaining 7 bits are divided as follows:\n * [0-30]   the beginning of the data range is used for custom purposes\n *          (defined by the function that uses this library)\n * [31-127] the end of the data range is used for data encoding by\n *          lib0/encoding.js\n *\n * @param {Encoder} encoder\n * @param {undefined|null|number|bigint|boolean|string|Object<string,any>|Array<any>|Uint8Array} data\n */\nexport const writeAny = (encoder, data) => {\n  switch (typeof data) {\n    case 'string':\n      // TYPE 119: STRING\n      write(encoder, 119)\n      writeVarString(encoder, data)\n      break\n    case 'number':\n      if (number.isInteger(data) && data <= binary.BITS31) {\n        // TYPE 125: INTEGER\n        write(encoder, 125)\n        writeVarInt(encoder, data)\n      } else if (isFloat32(data)) {\n        // TYPE 124: FLOAT32\n        write(encoder, 124)\n        writeFloat32(encoder, data)\n      } else {\n        // TYPE 123: FLOAT64\n        write(encoder, 123)\n        writeFloat64(encoder, data)\n      }\n      break\n    case 'bigint':\n      // TYPE 122: BigInt\n      write(encoder, 122)\n      writeBigInt64(encoder, data)\n      break\n    case 'object':\n      if (data === null) {\n        // TYPE 126: null\n        write(encoder, 126)\n      } else if (data instanceof Array) {\n        // TYPE 117: Array\n        write(encoder, 117)\n        writeVarUint(encoder, data.length)\n        for (let i = 0; i < data.length; i++) {\n          writeAny(encoder, data[i])\n        }\n      } else if (data instanceof Uint8Array) {\n        // TYPE 116: ArrayBuffer\n        write(encoder, 116)\n        writeVarUint8Array(encoder, data)\n      } else {\n        // TYPE 118: Object\n        write(encoder, 118)\n        const keys = Object.keys(data)\n        writeVarUint(encoder, keys.length)\n        for (let i = 0; i < keys.length; i++) {\n          const key = keys[i]\n          writeVarString(encoder, key)\n          writeAny(encoder, data[key])\n        }\n      }\n      break\n    case 'boolean':\n      // TYPE 120/121: boolean (true/false)\n      write(encoder, data ? 120 : 121)\n      break\n    default:\n      // TYPE 127: undefined\n      write(encoder, 127)\n  }\n}\n\n/**\n * Now come a few stateful encoder that have their own classes.\n */\n\n/**\n * Basic Run Length Encoder - a basic compression implementation.\n *\n * Encodes [1,1,1,7] to [1,3,7,1] (3 times 1, 1 time 7). This encoder might do more harm than good if there are a lot of values that are not repeated.\n *\n * It was originally used for image compression. Cool .. article http://csbruce.com/cbm/transactor/pdfs/trans_v7_i06.pdf\n *\n * @note T must not be null!\n *\n * @template T\n */\nexport class RleEncoder extends Encoder {\n  /**\n   * @param {function(Encoder, T):void} writer\n   */\n  constructor (writer) {\n    super()\n    /**\n     * The writer\n     */\n    this.w = writer\n    /**\n     * Current state\n     * @type {T|null}\n     */\n    this.s = null\n    this.count = 0\n  }\n\n  /**\n   * @param {T} v\n   */\n  write (v) {\n    if (this.s === v) {\n      this.count++\n    } else {\n      if (this.count > 0) {\n        // flush counter, unless this is the first value (count = 0)\n        writeVarUint(this, this.count - 1) // since count is always > 0, we can decrement by one. non-standard encoding ftw\n      }\n      this.count = 1\n      // write first value\n      this.w(this, v)\n      this.s = v\n    }\n  }\n}\n\n/**\n * Basic diff decoder using variable length encoding.\n *\n * Encodes the values [3, 1100, 1101, 1050, 0] to [3, 1097, 1, -51, -1050] using writeVarInt.\n */\nexport class IntDiffEncoder extends Encoder {\n  /**\n   * @param {number} start\n   */\n  constructor (start) {\n    super()\n    /**\n     * Current state\n     * @type {number}\n     */\n    this.s = start\n  }\n\n  /**\n   * @param {number} v\n   */\n  write (v) {\n    writeVarInt(this, v - this.s)\n    this.s = v\n  }\n}\n\n/**\n * A combination of IntDiffEncoder and RleEncoder.\n *\n * Basically first writes the IntDiffEncoder and then counts duplicate diffs using RleEncoding.\n *\n * Encodes the values [1,1,1,2,3,4,5,6] as [1,1,0,2,1,5] (RLE([1,0,0,1,1,1,1,1]) ⇒ RleIntDiff[1,1,0,2,1,5])\n */\nexport class RleIntDiffEncoder extends Encoder {\n  /**\n   * @param {number} start\n   */\n  constructor (start) {\n    super()\n    /**\n     * Current state\n     * @type {number}\n     */\n    this.s = start\n    this.count = 0\n  }\n\n  /**\n   * @param {number} v\n   */\n  write (v) {\n    if (this.s === v && this.count > 0) {\n      this.count++\n    } else {\n      if (this.count > 0) {\n        // flush counter, unless this is the first value (count = 0)\n        writeVarUint(this, this.count - 1) // since count is always > 0, we can decrement by one. non-standard encoding ftw\n      }\n      this.count = 1\n      // write first value\n      writeVarInt(this, v - this.s)\n      this.s = v\n    }\n  }\n}\n\n/**\n * @param {UintOptRleEncoder} encoder\n */\nconst flushUintOptRleEncoder = encoder => {\n  /* istanbul ignore else */\n  if (encoder.count > 0) {\n    // flush counter, unless this is the first value (count = 0)\n    // case 1: just a single value. set sign to positive\n    // case 2: write several values. set sign to negative to indicate that there is a length coming\n    writeVarInt(encoder.encoder, encoder.count === 1 ? encoder.s : -encoder.s)\n    if (encoder.count > 1) {\n      writeVarUint(encoder.encoder, encoder.count - 2) // since count is always > 1, we can decrement by one. non-standard encoding ftw\n    }\n  }\n}\n\n/**\n * Optimized Rle encoder that does not suffer from the mentioned problem of the basic Rle encoder.\n *\n * Internally uses VarInt encoder to write unsigned integers. If the input occurs multiple times, we write\n * write it as a negative number. The UintOptRleDecoder then understands that it needs to read a count.\n *\n * Encodes [1,2,3,3,3] as [1,2,-3,3] (once 1, once 2, three times 3)\n */\nexport class UintOptRleEncoder {\n  constructor () {\n    this.encoder = new Encoder()\n    /**\n     * @type {number}\n     */\n    this.s = 0\n    this.count = 0\n  }\n\n  /**\n   * @param {number} v\n   */\n  write (v) {\n    if (this.s === v) {\n      this.count++\n    } else {\n      flushUintOptRleEncoder(this)\n      this.count = 1\n      this.s = v\n    }\n  }\n\n  toUint8Array () {\n    flushUintOptRleEncoder(this)\n    return toUint8Array(this.encoder)\n  }\n}\n\n/**\n * Increasing Uint Optimized RLE Encoder\n *\n * The RLE encoder counts the number of same occurences of the same value.\n * The IncUintOptRle encoder counts if the value increases.\n * I.e. 7, 8, 9, 10 will be encoded as [-7, 4]. 1, 3, 5 will be encoded\n * as [1, 3, 5].\n */\nexport class IncUintOptRleEncoder {\n  constructor () {\n    this.encoder = new Encoder()\n    /**\n     * @type {number}\n     */\n    this.s = 0\n    this.count = 0\n  }\n\n  /**\n   * @param {number} v\n   */\n  write (v) {\n    if (this.s + this.count === v) {\n      this.count++\n    } else {\n      flushUintOptRleEncoder(this)\n      this.count = 1\n      this.s = v\n    }\n  }\n\n  toUint8Array () {\n    flushUintOptRleEncoder(this)\n    return toUint8Array(this.encoder)\n  }\n}\n\n/**\n * @param {IntDiffOptRleEncoder} encoder\n */\nconst flushIntDiffOptRleEncoder = encoder => {\n  if (encoder.count > 0) {\n    //          31 bit making up the diff | wether to write the counter\n    const encodedDiff = encoder.diff << 1 | (encoder.count === 1 ? 0 : 1)\n    // flush counter, unless this is the first value (count = 0)\n    // case 1: just a single value. set first bit to positive\n    // case 2: write several values. set first bit to negative to indicate that there is a length coming\n    writeVarInt(encoder.encoder, encodedDiff)\n    if (encoder.count > 1) {\n      writeVarUint(encoder.encoder, encoder.count - 2) // since count is always > 1, we can decrement by one. non-standard encoding ftw\n    }\n  }\n}\n\n/**\n * A combination of the IntDiffEncoder and the UintOptRleEncoder.\n *\n * The count approach is similar to the UintDiffOptRleEncoder, but instead of using the negative bitflag, it encodes\n * in the LSB whether a count is to be read. Therefore this Encoder only supports 31 bit integers!\n *\n * Encodes [1, 2, 3, 2] as [3, 1, 6, -1] (more specifically [(1 << 1) | 1, (3 << 0) | 0, -1])\n *\n * Internally uses variable length encoding. Contrary to normal UintVar encoding, the first byte contains:\n * * 1 bit that denotes whether the next value is a count (LSB)\n * * 1 bit that denotes whether this value is negative (MSB - 1)\n * * 1 bit that denotes whether to continue reading the variable length integer (MSB)\n *\n * Therefore, only five bits remain to encode diff ranges.\n *\n * Use this Encoder only when appropriate. In most cases, this is probably a bad idea.\n */\nexport class IntDiffOptRleEncoder {\n  constructor () {\n    this.encoder = new Encoder()\n    /**\n     * @type {number}\n     */\n    this.s = 0\n    this.count = 0\n    this.diff = 0\n  }\n\n  /**\n   * @param {number} v\n   */\n  write (v) {\n    if (this.diff === v - this.s) {\n      this.s = v\n      this.count++\n    } else {\n      flushIntDiffOptRleEncoder(this)\n      this.count = 1\n      this.diff = v - this.s\n      this.s = v\n    }\n  }\n\n  toUint8Array () {\n    flushIntDiffOptRleEncoder(this)\n    return toUint8Array(this.encoder)\n  }\n}\n\n/**\n * Optimized String Encoder.\n *\n * Encoding many small strings in a simple Encoder is not very efficient. The function call to decode a string takes some time and creates references that must be eventually deleted.\n * In practice, when decoding several million small strings, the GC will kick in more and more often to collect orphaned string objects (or maybe there is another reason?).\n *\n * This string encoder solves the above problem. All strings are concatenated and written as a single string using a single encoding call.\n *\n * The lengths are encoded using a UintOptRleEncoder.\n */\nexport class StringEncoder {\n  constructor () {\n    /**\n     * @type {Array<string>}\n     */\n    this.sarr = []\n    this.s = ''\n    this.lensE = new UintOptRleEncoder()\n  }\n\n  /**\n   * @param {string} string\n   */\n  write (string) {\n    this.s += string\n    if (this.s.length > 19) {\n      this.sarr.push(this.s)\n      this.s = ''\n    }\n    this.lensE.write(string.length)\n  }\n\n  toUint8Array () {\n    const encoder = new Encoder()\n    this.sarr.push(this.s)\n    this.s = ''\n    writeVarString(encoder, this.sarr.join(''))\n    writeUint8Array(encoder, this.lensE.toUint8Array())\n    return toUint8Array(encoder)\n  }\n}\n","/**\n * Efficient schema-less binary decoding with support for variable length encoding.\n *\n * Use [lib0/decoding] with [lib0/encoding]. Every encoding function has a corresponding decoding function.\n *\n * Encodes numbers in little-endian order (least to most significant byte order)\n * and is compatible with Golang's binary encoding (https://golang.org/pkg/encoding/binary/)\n * which is also used in Protocol Buffers.\n *\n * ```js\n * // encoding step\n * const encoder = new encoding.createEncoder()\n * encoding.writeVarUint(encoder, 256)\n * encoding.writeVarString(encoder, 'Hello world!')\n * const buf = encoding.toUint8Array(encoder)\n * ```\n *\n * ```js\n * // decoding step\n * const decoder = new decoding.createDecoder(buf)\n * decoding.readVarUint(decoder) // => 256\n * decoding.readVarString(decoder) // => 'Hello world!'\n * decoding.hasContent(decoder) // => false - all data is read\n * ```\n *\n * @module decoding\n */\n\nimport * as buffer from './buffer.js'\nimport * as binary from './binary.js'\nimport * as math from './math.js'\n\n/**\n * A Decoder handles the decoding of an Uint8Array.\n */\nexport class Decoder {\n  /**\n   * @param {Uint8Array} uint8Array Binary data to decode\n   */\n  constructor (uint8Array) {\n    /**\n     * Decoding target.\n     *\n     * @type {Uint8Array}\n     */\n    this.arr = uint8Array\n    /**\n     * Current decoding position.\n     *\n     * @type {number}\n     */\n    this.pos = 0\n  }\n}\n\n/**\n * @function\n * @param {Uint8Array} uint8Array\n * @return {Decoder}\n */\nexport const createDecoder = uint8Array => new Decoder(uint8Array)\n\n/**\n * @function\n * @param {Decoder} decoder\n * @return {boolean}\n */\nexport const hasContent = decoder => decoder.pos !== decoder.arr.length\n\n/**\n * Clone a decoder instance.\n * Optionally set a new position parameter.\n *\n * @function\n * @param {Decoder} decoder The decoder instance\n * @param {number} [newPos] Defaults to current position\n * @return {Decoder} A clone of `decoder`\n */\nexport const clone = (decoder, newPos = decoder.pos) => {\n  const _decoder = createDecoder(decoder.arr)\n  _decoder.pos = newPos\n  return _decoder\n}\n\n/**\n * Create an Uint8Array view of the next `len` bytes and advance the position by `len`.\n *\n * Important: The Uint8Array still points to the underlying ArrayBuffer. Make sure to discard the result as soon as possible to prevent any memory leaks.\n *            Use `buffer.copyUint8Array` to copy the result into a new Uint8Array.\n *\n * @function\n * @param {Decoder} decoder The decoder instance\n * @param {number} len The length of bytes to read\n * @return {Uint8Array}\n */\nexport const readUint8Array = (decoder, len) => {\n  const view = buffer.createUint8ArrayViewFromArrayBuffer(decoder.arr.buffer, decoder.pos + decoder.arr.byteOffset, len)\n  decoder.pos += len\n  return view\n}\n\n/**\n * Read variable length Uint8Array.\n *\n * Important: The Uint8Array still points to the underlying ArrayBuffer. Make sure to discard the result as soon as possible to prevent any memory leaks.\n *            Use `buffer.copyUint8Array` to copy the result into a new Uint8Array.\n *\n * @function\n * @param {Decoder} decoder\n * @return {Uint8Array}\n */\nexport const readVarUint8Array = decoder => readUint8Array(decoder, readVarUint(decoder))\n\n/**\n * Read the rest of the content as an ArrayBuffer\n * @function\n * @param {Decoder} decoder\n * @return {Uint8Array}\n */\nexport const readTailAsUint8Array = decoder => readUint8Array(decoder, decoder.arr.length - decoder.pos)\n\n/**\n * Skip one byte, jump to the next position.\n * @function\n * @param {Decoder} decoder The decoder instance\n * @return {number} The next position\n */\nexport const skip8 = decoder => decoder.pos++\n\n/**\n * Read one byte as unsigned integer.\n * @function\n * @param {Decoder} decoder The decoder instance\n * @return {number} Unsigned 8-bit integer\n */\nexport const readUint8 = decoder => decoder.arr[decoder.pos++]\n\n/**\n * Read 2 bytes as unsigned integer.\n *\n * @function\n * @param {Decoder} decoder\n * @return {number} An unsigned integer.\n */\nexport const readUint16 = decoder => {\n  const uint =\n    decoder.arr[decoder.pos] +\n    (decoder.arr[decoder.pos + 1] << 8)\n  decoder.pos += 2\n  return uint\n}\n\n/**\n * Read 4 bytes as unsigned integer.\n *\n * @function\n * @param {Decoder} decoder\n * @return {number} An unsigned integer.\n */\nexport const readUint32 = decoder => {\n  const uint =\n    (decoder.arr[decoder.pos] +\n    (decoder.arr[decoder.pos + 1] << 8) +\n    (decoder.arr[decoder.pos + 2] << 16) +\n    (decoder.arr[decoder.pos + 3] << 24)) >>> 0\n  decoder.pos += 4\n  return uint\n}\n\n/**\n * Read 4 bytes as unsigned integer in big endian order.\n * (most significant byte first)\n *\n * @function\n * @param {Decoder} decoder\n * @return {number} An unsigned integer.\n */\nexport const readUint32BigEndian = decoder => {\n  const uint =\n    (decoder.arr[decoder.pos + 3] +\n    (decoder.arr[decoder.pos + 2] << 8) +\n    (decoder.arr[decoder.pos + 1] << 16) +\n    (decoder.arr[decoder.pos] << 24)) >>> 0\n  decoder.pos += 4\n  return uint\n}\n\n/**\n * Look ahead without incrementing the position\n * to the next byte and read it as unsigned integer.\n *\n * @function\n * @param {Decoder} decoder\n * @return {number} An unsigned integer.\n */\nexport const peekUint8 = decoder => decoder.arr[decoder.pos]\n\n/**\n * Look ahead without incrementing the position\n * to the next byte and read it as unsigned integer.\n *\n * @function\n * @param {Decoder} decoder\n * @return {number} An unsigned integer.\n */\nexport const peekUint16 = decoder =>\n  decoder.arr[decoder.pos] +\n  (decoder.arr[decoder.pos + 1] << 8)\n\n/**\n * Look ahead without incrementing the position\n * to the next byte and read it as unsigned integer.\n *\n * @function\n * @param {Decoder} decoder\n * @return {number} An unsigned integer.\n */\nexport const peekUint32 = decoder => (\n  decoder.arr[decoder.pos] +\n  (decoder.arr[decoder.pos + 1] << 8) +\n  (decoder.arr[decoder.pos + 2] << 16) +\n  (decoder.arr[decoder.pos + 3] << 24)\n) >>> 0\n\n/**\n * Read unsigned integer (32bit) with variable length.\n * 1/8th of the storage is used as encoding overhead.\n *  * numbers < 2^7 is stored in one bytlength\n *  * numbers < 2^14 is stored in two bylength\n *\n * @function\n * @param {Decoder} decoder\n * @return {number} An unsigned integer.length\n */\nexport const readVarUint = decoder => {\n  let num = 0\n  let len = 0\n  while (true) {\n    const r = decoder.arr[decoder.pos++]\n    num = num | ((r & binary.BITS7) << len)\n    len += 7\n    if (r < binary.BIT8) {\n      return num >>> 0 // return unsigned number!\n    }\n    /* istanbul ignore if */\n    if (len > 35) {\n      throw new Error('Integer out of range!')\n    }\n  }\n}\n\n/**\n * Read signed integer (32bit) with variable length.\n * 1/8th of the storage is used as encoding overhead.\n *  * numbers < 2^7 is stored in one bytlength\n *  * numbers < 2^14 is stored in two bylength\n * @todo This should probably create the inverse ~num if number is negative - but this would be a breaking change.\n *\n * @function\n * @param {Decoder} decoder\n * @return {number} An unsigned integer.length\n */\nexport const readVarInt = decoder => {\n  let r = decoder.arr[decoder.pos++]\n  let num = r & binary.BITS6\n  let len = 6\n  const sign = (r & binary.BIT7) > 0 ? -1 : 1\n  if ((r & binary.BIT8) === 0) {\n    // don't continue reading\n    return sign * num\n  }\n  while (true) {\n    r = decoder.arr[decoder.pos++]\n    num = num | ((r & binary.BITS7) << len)\n    len += 7\n    if (r < binary.BIT8) {\n      return sign * (num >>> 0)\n    }\n    /* istanbul ignore if */\n    if (len > 41) {\n      throw new Error('Integer out of range!')\n    }\n  }\n}\n\n/**\n * Look ahead and read varUint without incrementing position\n *\n * @function\n * @param {Decoder} decoder\n * @return {number}\n */\nexport const peekVarUint = decoder => {\n  const pos = decoder.pos\n  const s = readVarUint(decoder)\n  decoder.pos = pos\n  return s\n}\n\n/**\n * Look ahead and read varUint without incrementing position\n *\n * @function\n * @param {Decoder} decoder\n * @return {number}\n */\nexport const peekVarInt = decoder => {\n  const pos = decoder.pos\n  const s = readVarInt(decoder)\n  decoder.pos = pos\n  return s\n}\n\n/**\n * Read string of variable length\n * * varUint is used to store the length of the string\n *\n * Transforming utf8 to a string is pretty expensive. The code performs 10x better\n * when String.fromCodePoint is fed with all characters as arguments.\n * But most environments have a maximum number of arguments per functions.\n * For effiency reasons we apply a maximum of 10000 characters at once.\n *\n * @function\n * @param {Decoder} decoder\n * @return {String} The read String.\n */\nexport const readVarString = decoder => {\n  let remainingLen = readVarUint(decoder)\n  if (remainingLen === 0) {\n    return ''\n  } else {\n    let encodedString = String.fromCodePoint(readUint8(decoder)) // remember to decrease remainingLen\n    if (--remainingLen < 100) { // do not create a Uint8Array for small strings\n      while (remainingLen--) {\n        encodedString += String.fromCodePoint(readUint8(decoder))\n      }\n    } else {\n      while (remainingLen > 0) {\n        const nextLen = remainingLen < 10000 ? remainingLen : 10000\n        // this is dangerous, we create a fresh array view from the existing buffer\n        const bytes = decoder.arr.subarray(decoder.pos, decoder.pos + nextLen)\n        decoder.pos += nextLen\n        // Starting with ES5.1 we can supply a generic array-like object as arguments\n        encodedString += String.fromCodePoint.apply(null, /** @type {any} */ (bytes))\n        remainingLen -= nextLen\n      }\n    }\n    return decodeURIComponent(escape(encodedString))\n  }\n}\n\n/**\n * Look ahead and read varString without incrementing position\n *\n * @function\n * @param {Decoder} decoder\n * @return {string}\n */\nexport const peekVarString = decoder => {\n  const pos = decoder.pos\n  const s = readVarString(decoder)\n  decoder.pos = pos\n  return s\n}\n\n/**\n * @param {Decoder} decoder\n * @param {number} len\n * @return {DataView}\n */\nexport const readFromDataView = (decoder, len) => {\n  const dv = new DataView(decoder.arr.buffer, decoder.arr.byteOffset + decoder.pos, len)\n  decoder.pos += len\n  return dv\n}\n\n/**\n * @param {Decoder} decoder\n */\nexport const readFloat32 = decoder => readFromDataView(decoder, 4).getFloat32(0, false)\n\n/**\n * @param {Decoder} decoder\n */\nexport const readFloat64 = decoder => readFromDataView(decoder, 8).getFloat64(0, false)\n\n/**\n * @param {Decoder} decoder\n */\nexport const readBigInt64 = decoder => /** @type {any} */ (readFromDataView(decoder, 8)).getBigInt64(0, false)\n\n/**\n * @param {Decoder} decoder\n */\nexport const readBigUint64 = decoder => /** @type {any} */ (readFromDataView(decoder, 8)).getBigUint64(0, false)\n\n/**\n * @type {Array<function(Decoder):any>}\n */\nconst readAnyLookupTable = [\n  decoder => undefined, // CASE 127: undefined\n  decoder => null, // CASE 126: null\n  readVarInt, // CASE 125: integer\n  readFloat32, // CASE 124: float32\n  readFloat64, // CASE 123: float64\n  readBigInt64, // CASE 122: bigint\n  decoder => false, // CASE 121: boolean (false)\n  decoder => true, // CASE 120: boolean (true)\n  readVarString, // CASE 119: string\n  decoder => { // CASE 118: object<string,any>\n    const len = readVarUint(decoder)\n    /**\n     * @type {Object<string,any>}\n     */\n    const obj = {}\n    for (let i = 0; i < len; i++) {\n      const key = readVarString(decoder)\n      obj[key] = readAny(decoder)\n    }\n    return obj\n  },\n  decoder => { // CASE 117: array<any>\n    const len = readVarUint(decoder)\n    const arr = []\n    for (let i = 0; i < len; i++) {\n      arr.push(readAny(decoder))\n    }\n    return arr\n  },\n  readVarUint8Array // CASE 116: Uint8Array\n]\n\n/**\n * @param {Decoder} decoder\n */\nexport const readAny = decoder => readAnyLookupTable[127 - readUint8(decoder)](decoder)\n\n/**\n * T must not be null.\n *\n * @template T\n */\nexport class RleDecoder extends Decoder {\n  /**\n   * @param {Uint8Array} uint8Array\n   * @param {function(Decoder):T} reader\n   */\n  constructor (uint8Array, reader) {\n    super(uint8Array)\n    /**\n     * The reader\n     */\n    this.reader = reader\n    /**\n     * Current state\n     * @type {T|null}\n     */\n    this.s = null\n    this.count = 0\n  }\n\n  read () {\n    if (this.count === 0) {\n      this.s = this.reader(this)\n      if (hasContent(this)) {\n        this.count = readVarUint(this) + 1 // see encoder implementation for the reason why this is incremented\n      } else {\n        this.count = -1 // read the current value forever\n      }\n    }\n    this.count--\n    return /** @type {T} */ (this.s)\n  }\n}\n\nexport class IntDiffDecoder extends Decoder {\n  /**\n   * @param {Uint8Array} uint8Array\n   * @param {number} start\n   */\n  constructor (uint8Array, start) {\n    super(uint8Array)\n    /**\n     * Current state\n     * @type {number}\n     */\n    this.s = start\n  }\n\n  /**\n   * @return {number}\n   */\n  read () {\n    this.s += readVarInt(this)\n    return this.s\n  }\n}\n\nexport class RleIntDiffDecoder extends Decoder {\n  /**\n   * @param {Uint8Array} uint8Array\n   * @param {number} start\n   */\n  constructor (uint8Array, start) {\n    super(uint8Array)\n    /**\n     * Current state\n     * @type {number}\n     */\n    this.s = start\n    this.count = 0\n  }\n\n  /**\n   * @return {number}\n   */\n  read () {\n    if (this.count === 0) {\n      this.s += readVarInt(this)\n      if (hasContent(this)) {\n        this.count = readVarUint(this) + 1 // see encoder implementation for the reason why this is incremented\n      } else {\n        this.count = -1 // read the current value forever\n      }\n    }\n    this.count--\n    return /** @type {number} */ (this.s)\n  }\n}\n\nexport class UintOptRleDecoder extends Decoder {\n  /**\n   * @param {Uint8Array} uint8Array\n   */\n  constructor (uint8Array) {\n    super(uint8Array)\n    /**\n     * @type {number}\n     */\n    this.s = 0\n    this.count = 0\n  }\n\n  read () {\n    if (this.count === 0) {\n      this.s = readVarInt(this)\n      // if the sign is negative, we read the count too, otherwise count is 1\n      const isNegative = math.isNegativeZero(this.s)\n      this.count = 1\n      if (isNegative) {\n        this.s = -this.s\n        this.count = readVarUint(this) + 2\n      }\n    }\n    this.count--\n    return /** @type {number} */ (this.s)\n  }\n}\n\nexport class IncUintOptRleDecoder extends Decoder {\n  /**\n   * @param {Uint8Array} uint8Array\n   */\n  constructor (uint8Array) {\n    super(uint8Array)\n    /**\n     * @type {number}\n     */\n    this.s = 0\n    this.count = 0\n  }\n\n  read () {\n    if (this.count === 0) {\n      this.s = readVarInt(this)\n      // if the sign is negative, we read the count too, otherwise count is 1\n      const isNegative = math.isNegativeZero(this.s)\n      this.count = 1\n      if (isNegative) {\n        this.s = -this.s\n        this.count = readVarUint(this) + 2\n      }\n    }\n    this.count--\n    return /** @type {number} */ (this.s++)\n  }\n}\n\nexport class IntDiffOptRleDecoder extends Decoder {\n  /**\n   * @param {Uint8Array} uint8Array\n   */\n  constructor (uint8Array) {\n    super(uint8Array)\n    /**\n     * @type {number}\n     */\n    this.s = 0\n    this.count = 0\n    this.diff = 0\n  }\n\n  /**\n   * @return {number}\n   */\n  read () {\n    if (this.count === 0) {\n      const diff = readVarInt(this)\n      // if the first bit is set, we read more data\n      const hasCount = diff & 1\n      this.diff = diff >> 1\n      this.count = 1\n      if (hasCount) {\n        this.count = readVarUint(this) + 2\n      }\n    }\n    this.s += this.diff\n    this.count--\n    return this.s\n  }\n}\n\nexport class StringDecoder {\n  /**\n   * @param {Uint8Array} uint8Array\n   */\n  constructor (uint8Array) {\n    this.decoder = new UintOptRleDecoder(uint8Array)\n    this.str = readVarString(this.decoder)\n    /**\n     * @type {number}\n     */\n    this.spos = 0\n  }\n\n  /**\n   * @return {string}\n   */\n  read () {\n    const end = this.spos + this.decoder.read()\n    const res = this.str.slice(this.spos, end)\n    this.spos = end\n    return res\n  }\n}\n","/* eslint-env browser */\nexport const performance = typeof window === 'undefined' ? null : (typeof window.performance !== 'undefined' && window.performance) || null\n\nconst isoCrypto = typeof crypto === 'undefined' ? null : crypto\n\n/**\n * @type {function(number):ArrayBuffer}\n */\nexport const cryptoRandomBuffer = isoCrypto !== null\n  ? len => {\n    // browser\n    const buf = new ArrayBuffer(len)\n    const arr = new Uint8Array(buf)\n    isoCrypto.getRandomValues(arr)\n    return buf\n  }\n  : len => {\n    // polyfill\n    const buf = new ArrayBuffer(len)\n    const arr = new Uint8Array(buf)\n    for (let i = 0; i < len; i++) {\n      arr[i] = Math.ceil((Math.random() * 0xFFFFFFFF) >>> 0)\n    }\n    return buf\n  }\n","\n/**\n * Isomorphic module for true random numbers / buffers / uuids.\n *\n * Attention: falls back to Math.random if the browser does not support crypto.\n *\n * @module random\n */\n\nimport * as math from './math.js'\nimport { cryptoRandomBuffer } from './isomorphic.js'\n\nexport const rand = Math.random\n\n/* istanbul ignore next */\nexport const uint32 = () => new Uint32Array(cryptoRandomBuffer(4))[0]\n\n/**\n * @template T\n * @param {Array<T>} arr\n * @return {T}\n */\nexport const oneOf = arr => arr[math.floor(rand() * arr.length)]\n\n// @ts-ignore\nconst uuidv4Template = [1e7] + -1e3 + -4e3 + -8e3 + -1e11\nexport const uuidv4 = () => uuidv4Template.replace(/[018]/g, /** @param {number} c */ c =>\n  (c ^ uint32() & 15 >> c / 4).toString(16)\n)\n","/**\n * Error helpers.\n *\n * @module error\n */\n\n/**\n * @param {string} s\n * @return {Error}\n */\n/* istanbul ignore next */\nexport const create = s => new Error(s)\n\n/**\n * @throws {Error}\n * @return {never}\n */\n/* istanbul ignore next */\nexport const methodUnimplemented = () => {\n  throw create('Method unimplemented')\n}\n\n/**\n * @throws {Error}\n * @return {never}\n */\n/* istanbul ignore next */\nexport const unexpectedCase = () => {\n  throw create('Unexpected case')\n}\n","/**\n * Common functions and function call helpers.\n *\n * @module function\n */\n\nimport * as array from './array.js'\nimport * as object from './object.js'\n\n/**\n * Calls all functions in `fs` with args. Only throws after all functions were called.\n *\n * @param {Array<function>} fs\n * @param {Array<any>} args\n */\nexport const callAll = (fs, args, i = 0) => {\n  try {\n    for (; i < fs.length; i++) {\n      fs[i](...args)\n    }\n  } finally {\n    if (i < fs.length) {\n      callAll(fs, args, i + 1)\n    }\n  }\n}\n\nexport const nop = () => {}\n\n/**\n * @template T\n * @param {function():T} f\n * @return {T}\n */\nexport const apply = f => f()\n\n/**\n * @template A\n *\n * @param {A} a\n * @return {A}\n */\nexport const id = a => a\n\n/**\n * @template T\n *\n * @param {T} a\n * @param {T} b\n * @return {boolean}\n */\nexport const equalityStrict = (a, b) => a === b\n\n/**\n * @template T\n *\n * @param {Array<T>|object} a\n * @param {Array<T>|object} b\n * @return {boolean}\n */\nexport const equalityFlat = (a, b) => a === b || (a != null && b != null && a.constructor === b.constructor && ((a instanceof Array && array.equalFlat(a, /** @type {Array<T>} */ (b))) || (typeof a === 'object' && object.equalFlat(a, b))))\n\n/**\n * @param {any} a\n * @param {any} b\n * @return {boolean}\n */\nexport const equalityDeep = (a, b) => {\n  if (a == null || b == null) {\n    return equalityStrict(a, b)\n  }\n  if (a.constructor !== b.constructor) {\n    return false\n  }\n  if (a === b) {\n    return true\n  }\n  switch (a.constructor) {\n    case ArrayBuffer:\n      a = new Uint8Array(a)\n      b = new Uint8Array(b)\n    // eslint-disable-next-line no-fallthrough\n    case Uint8Array: {\n      if (a.byteLength !== b.byteLength) {\n        return false\n      }\n      for (let i = 0; i < a.length; i++) {\n        if (a[i] !== b[i]) {\n          return false\n        }\n      }\n      break\n    }\n    case Set: {\n      if (a.size !== b.size) {\n        return false\n      }\n      for (const value of a) {\n        if (!b.has(value)) {\n          return false\n        }\n      }\n      break\n    }\n    case Map: {\n      if (a.size !== b.size) {\n        return false\n      }\n      for (const key of a.keys()) {\n        if (!b.has(key) || !equalityDeep(a.get(key), b.get(key))) {\n          return false\n        }\n      }\n      break\n    }\n    case Object:\n      if (object.length(a) !== object.length(b)) {\n        return false\n      }\n      for (const key in a) {\n        if (!object.hasProperty(a, key) || !equalityDeep(a[key], b[key])) {\n          return false\n        }\n      }\n      break\n    case Array:\n      if (a.length !== b.length) {\n        return false\n      }\n      for (let i = 0; i < a.length; i++) {\n        if (!equalityDeep(a[i], b[i])) {\n          return false\n        }\n      }\n      break\n    default:\n      return false\n  }\n  return true\n}\n","/**\n * Utility module to work with EcmaScript Symbols.\n *\n * @module symbol\n */\n\n/**\n * Return fresh symbol.\n *\n * @return {Symbol}\n */\nexport const create = Symbol\n\n/**\n * @param {any} s\n * @return {boolean}\n */\nexport const isSymbol = s => typeof s === 'symbol'\n","/**\n * Working with value pairs.\n *\n * @module pair\n */\n\n/**\n * @template L,R\n */\nexport class Pair {\n  /**\n   * @param {L} left\n   * @param {R} right\n   */\n  constructor (left, right) {\n    this.left = left\n    this.right = right\n  }\n}\n\n/**\n * @template L,R\n * @param {L} left\n * @param {R} right\n * @return {Pair<L,R>}\n */\nexport const create = (left, right) => new Pair(left, right)\n\n/**\n * @template L,R\n * @param {R} right\n * @param {L} left\n * @return {Pair<L,R>}\n */\nexport const createReversed = (right, left) => new Pair(left, right)\n\n/**\n * @template L,R\n * @param {Array<Pair<L,R>>} arr\n * @param {function(L, R):any} f\n */\nexport const forEach = (arr, f) => arr.forEach(p => f(p.left, p.right))\n\n/**\n * @template L,R,X\n * @param {Array<Pair<L,R>>} arr\n * @param {function(L, R):X} f\n * @return {Array<X>}\n */\nexport const map = (arr, f) => arr.map(p => f(p.left, p.right))\n","/* eslint-env browser */\n\n/**\n * Utility module to work with the DOM.\n *\n * @module dom\n */\n\nimport * as pair from './pair.js'\nimport * as map from './map.js'\n\n/* istanbul ignore next */\n/**\n * @type {Document}\n */\nexport const doc = /** @type {Document} */ (typeof document !== 'undefined' ? document : {})\n\n/**\n * @param {string} name\n * @return {HTMLElement}\n */\n/* istanbul ignore next */\nexport const createElement = name => doc.createElement(name)\n\n/**\n * @return {DocumentFragment}\n */\n/* istanbul ignore next */\nexport const createDocumentFragment = () => doc.createDocumentFragment()\n\n/**\n * @param {string} text\n * @return {Text}\n */\n/* istanbul ignore next */\nexport const createTextNode = text => doc.createTextNode(text)\n\n/* istanbul ignore next */\nexport const domParser = /** @type {DOMParser} */ (typeof DOMParser !== 'undefined' ? new DOMParser() : null)\n\n/**\n * @param {HTMLElement} el\n * @param {string} name\n * @param {Object} opts\n */\n/* istanbul ignore next */\nexport const emitCustomEvent = (el, name, opts) => el.dispatchEvent(new CustomEvent(name, opts))\n\n/**\n * @param {Element} el\n * @param {Array<pair.Pair<string,string|boolean>>} attrs Array of key-value pairs\n * @return {Element}\n */\n/* istanbul ignore next */\nexport const setAttributes = (el, attrs) => {\n  pair.forEach(attrs, (key, value) => {\n    if (value === false) {\n      el.removeAttribute(key)\n    } else if (value === true) {\n      el.setAttribute(key, '')\n    } else {\n      // @ts-ignore\n      el.setAttribute(key, value)\n    }\n  })\n  return el\n}\n\n/**\n * @param {Element} el\n * @param {Map<string, string>} attrs Array of key-value pairs\n * @return {Element}\n */\n/* istanbul ignore next */\nexport const setAttributesMap = (el, attrs) => {\n  attrs.forEach((value, key) => { el.setAttribute(key, value) })\n  return el\n}\n\n/**\n * @param {Array<Node>|HTMLCollection} children\n * @return {DocumentFragment}\n */\n/* istanbul ignore next */\nexport const fragment = children => {\n  const fragment = createDocumentFragment()\n  for (let i = 0; i < children.length; i++) {\n    appendChild(fragment, children[i])\n  }\n  return fragment\n}\n\n/**\n * @param {Element} parent\n * @param {Array<Node>} nodes\n * @return {Element}\n */\n/* istanbul ignore next */\nexport const append = (parent, nodes) => {\n  appendChild(parent, fragment(nodes))\n  return parent\n}\n\n/**\n * @param {HTMLElement} el\n */\n/* istanbul ignore next */\nexport const remove = el => el.remove()\n\n/**\n * @param {EventTarget} el\n * @param {string} name\n * @param {EventListener} f\n */\n/* istanbul ignore next */\nexport const addEventListener = (el, name, f) => el.addEventListener(name, f)\n\n/**\n * @param {EventTarget} el\n * @param {string} name\n * @param {EventListener} f\n */\n/* istanbul ignore next */\nexport const removeEventListener = (el, name, f) => el.removeEventListener(name, f)\n\n/**\n * @param {Node} node\n * @param {Array<pair.Pair<string,EventListener>>} listeners\n * @return {Node}\n */\n/* istanbul ignore next */\nexport const addEventListeners = (node, listeners) => {\n  pair.forEach(listeners, (name, f) => addEventListener(node, name, f))\n  return node\n}\n\n/**\n * @param {Node} node\n * @param {Array<pair.Pair<string,EventListener>>} listeners\n * @return {Node}\n */\n/* istanbul ignore next */\nexport const removeEventListeners = (node, listeners) => {\n  pair.forEach(listeners, (name, f) => removeEventListener(node, name, f))\n  return node\n}\n\n/**\n * @param {string} name\n * @param {Array<pair.Pair<string,string>|pair.Pair<string,boolean>>} attrs Array of key-value pairs\n * @param {Array<Node>} children\n * @return {Element}\n */\n/* istanbul ignore next */\nexport const element = (name, attrs = [], children = []) =>\n  append(setAttributes(createElement(name), attrs), children)\n\n/**\n * @param {number} width\n * @param {number} height\n */\n/* istanbul ignore next */\nexport const canvas = (width, height) => {\n  const c = /** @type {HTMLCanvasElement} */ (createElement('canvas'))\n  c.height = height\n  c.width = width\n  return c\n}\n\n/**\n * @param {string} t\n * @return {Text}\n */\n/* istanbul ignore next */\nexport const text = createTextNode\n\n/**\n * @param {pair.Pair<string,string>} pair\n */\n/* istanbul ignore next */\nexport const pairToStyleString = pair => `${pair.left}:${pair.right};`\n\n/**\n * @param {Array<pair.Pair<string,string>>} pairs\n * @return {string}\n */\n/* istanbul ignore next */\nexport const pairsToStyleString = pairs => pairs.map(pairToStyleString).join('')\n\n/**\n * @param {Map<string,string>} m\n * @return {string}\n */\n/* istanbul ignore next */\nexport const mapToStyleString = m => map.map(m, (value, key) => `${key}:${value};`).join('')\n\n/**\n * @todo should always query on a dom element\n *\n * @param {HTMLElement|ShadowRoot} el\n * @param {string} query\n * @return {HTMLElement | null}\n */\n/* istanbul ignore next */\nexport const querySelector = (el, query) => el.querySelector(query)\n\n/**\n * @param {HTMLElement|ShadowRoot} el\n * @param {string} query\n * @return {NodeListOf<HTMLElement>}\n */\n/* istanbul ignore next */\nexport const querySelectorAll = (el, query) => el.querySelectorAll(query)\n\n/**\n * @param {string} id\n * @return {HTMLElement}\n */\n/* istanbul ignore next */\nexport const getElementById = id => /** @type {HTMLElement} */ (doc.getElementById(id))\n\n/**\n * @param {string} html\n * @return {HTMLElement}\n */\n/* istanbul ignore next */\nconst _parse = html => domParser.parseFromString(`<html><body>${html}</body></html>`, 'text/html').body\n\n/**\n * @param {string} html\n * @return {DocumentFragment}\n */\n/* istanbul ignore next */\nexport const parseFragment = html => fragment(/** @type {any} */ (_parse(html).childNodes))\n\n/**\n * @param {string} html\n * @return {HTMLElement}\n */\n/* istanbul ignore next */\nexport const parseElement = html => /** @type HTMLElement */ (_parse(html).firstElementChild)\n\n/**\n * @param {HTMLElement} oldEl\n * @param {HTMLElement|DocumentFragment} newEl\n */\n/* istanbul ignore next */\nexport const replaceWith = (oldEl, newEl) => oldEl.replaceWith(newEl)\n\n/**\n * @param {HTMLElement} parent\n * @param {HTMLElement} el\n * @param {Node|null} ref\n * @return {HTMLElement}\n */\n/* istanbul ignore next */\nexport const insertBefore = (parent, el, ref) => parent.insertBefore(el, ref)\n\n/**\n * @param {Node} parent\n * @param {Node} child\n * @return {Node}\n */\n/* istanbul ignore next */\nexport const appendChild = (parent, child) => parent.appendChild(child)\n\nexport const ELEMENT_NODE = doc.ELEMENT_NODE\nexport const TEXT_NODE = doc.TEXT_NODE\nexport const CDATA_SECTION_NODE = doc.CDATA_SECTION_NODE\nexport const COMMENT_NODE = doc.COMMENT_NODE\nexport const DOCUMENT_NODE = doc.DOCUMENT_NODE\nexport const DOCUMENT_TYPE_NODE = doc.DOCUMENT_TYPE_NODE\nexport const DOCUMENT_FRAGMENT_NODE = doc.DOCUMENT_FRAGMENT_NODE\n\n/**\n * @param {any} node\n * @param {number} type\n */\nexport const checkNodeType = (node, type) => node.nodeType === type\n\n/**\n * @param {Node} parent\n * @param {HTMLElement} child\n */\nexport const isParentOf = (parent, child) => {\n  let p = child.parentNode\n  while (p && p !== parent) {\n    p = p.parentNode\n  }\n  return p === parent\n}\n","/**\n * Utility module to work with time.\n *\n * @module time\n */\n\nimport * as metric from './metric.js'\nimport * as math from './math.js'\n\n/**\n * Return current time.\n *\n * @return {Date}\n */\nexport const getDate = () => new Date()\n\n/**\n * Return current unix time.\n *\n * @return {number}\n */\nexport const getUnixTime = Date.now\n\n/**\n * Transform time (in ms) to a human readable format. E.g. 1100 => 1.1s. 60s => 1min. .001 => 10μs.\n *\n * @param {number} d duration in milliseconds\n * @return {string} humanized approximation of time\n */\nexport const humanizeDuration = d => {\n  if (d < 60000) {\n    const p = metric.prefix(d, -1)\n    return math.round(p.n * 100) / 100 + p.prefix + 's'\n  }\n  d = math.floor(d / 1000)\n  const seconds = d % 60\n  const minutes = math.floor(d / 60) % 60\n  const hours = math.floor(d / 3600) % 24\n  const days = math.floor(d / 86400)\n  if (days > 0) {\n    return days + 'd' + ((hours > 0 || minutes > 30) ? ' ' + (minutes > 30 ? hours + 1 : hours) + 'h' : '')\n  }\n  if (hours > 0) {\n    /* istanbul ignore next */\n    return hours + 'h' + ((minutes > 0 || seconds > 30) ? ' ' + (seconds > 30 ? minutes + 1 : minutes) + 'min' : '')\n  }\n  return minutes + 'min' + (seconds > 0 ? ' ' + seconds + 's' : '')\n}\n","/**\n * Isomorphic logging module with support for colors!\n *\n * @module logging\n */\n\nimport * as env from './environment.js'\nimport * as symbol from './symbol.js'\nimport * as pair from './pair.js'\nimport * as dom from './dom.js'\nimport * as json from './json.js'\nimport * as map from './map.js'\nimport * as eventloop from './eventloop.js'\nimport * as math from './math.js'\nimport * as time from './time.js'\nimport * as func from './function.js'\n\nexport const BOLD = symbol.create()\nexport const UNBOLD = symbol.create()\nexport const BLUE = symbol.create()\nexport const GREY = symbol.create()\nexport const GREEN = symbol.create()\nexport const RED = symbol.create()\nexport const PURPLE = symbol.create()\nexport const ORANGE = symbol.create()\nexport const UNCOLOR = symbol.create()\n\n/**\n * @type {Object<Symbol,pair.Pair<string,string>>}\n */\nconst _browserStyleMap = {\n  [BOLD]: pair.create('font-weight', 'bold'),\n  [UNBOLD]: pair.create('font-weight', 'normal'),\n  [BLUE]: pair.create('color', 'blue'),\n  [GREEN]: pair.create('color', 'green'),\n  [GREY]: pair.create('color', 'grey'),\n  [RED]: pair.create('color', 'red'),\n  [PURPLE]: pair.create('color', 'purple'),\n  [ORANGE]: pair.create('color', 'orange'), // not well supported in chrome when debugging node with inspector - TODO: deprecate\n  [UNCOLOR]: pair.create('color', 'black')\n}\n\nconst _nodeStyleMap = {\n  [BOLD]: '\\u001b[1m',\n  [UNBOLD]: '\\u001b[2m',\n  [BLUE]: '\\x1b[34m',\n  [GREEN]: '\\x1b[32m',\n  [GREY]: '\\u001b[37m',\n  [RED]: '\\x1b[31m',\n  [PURPLE]: '\\x1b[35m',\n  [ORANGE]: '\\x1b[38;5;208m',\n  [UNCOLOR]: '\\x1b[0m'\n}\n\n/* istanbul ignore next */\n/**\n * @param {Array<string|Symbol|Object|number>} args\n * @return {Array<string|object|number>}\n */\nconst computeBrowserLoggingArgs = args => {\n  const strBuilder = []\n  const styles = []\n  const currentStyle = map.create()\n  /**\n   * @type {Array<string|Object|number>}\n   */\n  let logArgs = []\n  // try with formatting until we find something unsupported\n  let i = 0\n\n  for (; i < args.length; i++) {\n    const arg = args[i]\n    // @ts-ignore\n    const style = _browserStyleMap[arg]\n    if (style !== undefined) {\n      currentStyle.set(style.left, style.right)\n    } else {\n      if (arg.constructor === String || arg.constructor === Number) {\n        const style = dom.mapToStyleString(currentStyle)\n        if (i > 0 || style.length > 0) {\n          strBuilder.push('%c' + arg)\n          styles.push(style)\n        } else {\n          strBuilder.push(arg)\n        }\n      } else {\n        break\n      }\n    }\n  }\n\n  if (i > 0) {\n    // create logArgs with what we have so far\n    logArgs = styles\n    logArgs.unshift(strBuilder.join(''))\n  }\n  // append the rest\n  for (; i < args.length; i++) {\n    const arg = args[i]\n    if (!(arg instanceof Symbol)) {\n      logArgs.push(arg)\n    }\n  }\n  return logArgs\n}\n\n/**\n * @param {Array<string|Symbol|Object|number>} args\n * @return {Array<string|object|number>}\n */\nconst computeNodeLoggingArgs = args => {\n  const strBuilder = []\n  const logArgs = []\n\n  // try with formatting until we find something unsupported\n  let i = 0\n\n  for (; i < args.length; i++) {\n    const arg = args[i]\n    // @ts-ignore\n    const style = _nodeStyleMap[arg]\n    if (style !== undefined) {\n      strBuilder.push(style)\n    } else {\n      if (arg.constructor === String || arg.constructor === Number) {\n        strBuilder.push(arg)\n      } else {\n        break\n      }\n    }\n  }\n  if (i > 0) {\n    // create logArgs with what we have so far\n    strBuilder.push('\\x1b[0m')\n    logArgs.push(strBuilder.join(''))\n  }\n  // append the rest\n  for (; i < args.length; i++) {\n    const arg = args[i]\n    /* istanbul ignore else */\n    if (!(arg instanceof Symbol)) {\n      logArgs.push(arg)\n    }\n  }\n  return logArgs\n}\n\n/* istanbul ignore next */\nconst computeLoggingArgs = env.isNode ? computeNodeLoggingArgs : computeBrowserLoggingArgs\n\n/**\n * @param {Array<string|Symbol|Object|number>} args\n */\nexport const print = (...args) => {\n  console.log(...computeLoggingArgs(args))\n  /* istanbul ignore next */\n  vconsoles.forEach(vc => vc.print(args))\n}\n\n/* istanbul ignore next */\n/**\n * @param {Array<string|Symbol|Object|number>} args\n */\nexport const warn = (...args) => {\n  console.warn(...computeLoggingArgs(args))\n  args.unshift(ORANGE)\n  vconsoles.forEach(vc => vc.print(args))\n}\n\n/* istanbul ignore next */\n/**\n * @param {Error} err\n */\nexport const printError = err => {\n  console.error(err)\n  vconsoles.forEach(vc => vc.printError(err))\n}\n\n/* istanbul ignore next */\n/**\n * @param {string} url image location\n * @param {number} height height of the image in pixel\n */\nexport const printImg = (url, height) => {\n  if (env.isBrowser) {\n    console.log('%c                      ', `font-size: ${height}px; background-size: contain; background-repeat: no-repeat; background-image: url(${url})`)\n    // console.log('%c                ', `font-size: ${height}x; background: url(${url}) no-repeat;`)\n  }\n  vconsoles.forEach(vc => vc.printImg(url, height))\n}\n\n/* istanbul ignore next */\n/**\n * @param {string} base64\n * @param {number} height\n */\nexport const printImgBase64 = (base64, height) => printImg(`data:image/gif;base64,${base64}`, height)\n\n/**\n * @param {Array<string|Symbol|Object|number>} args\n */\nexport const group = (...args) => {\n  console.group(...computeLoggingArgs(args))\n  /* istanbul ignore next */\n  vconsoles.forEach(vc => vc.group(args))\n}\n\n/**\n * @param {Array<string|Symbol|Object|number>} args\n */\nexport const groupCollapsed = (...args) => {\n  console.groupCollapsed(...computeLoggingArgs(args))\n  /* istanbul ignore next */\n  vconsoles.forEach(vc => vc.groupCollapsed(args))\n}\n\nexport const groupEnd = () => {\n  console.groupEnd()\n  /* istanbul ignore next */\n  vconsoles.forEach(vc => vc.groupEnd())\n}\n\n/* istanbul ignore next */\n/**\n * @param {function():Node} createNode\n */\nexport const printDom = createNode =>\n  vconsoles.forEach(vc => vc.printDom(createNode()))\n\n/* istanbul ignore next */\n/**\n * @param {HTMLCanvasElement} canvas\n * @param {number} height\n */\nexport const printCanvas = (canvas, height) => printImg(canvas.toDataURL(), height)\n\nexport const vconsoles = new Set()\n\n/* istanbul ignore next */\n/**\n * @param {Array<string|Symbol|Object|number>} args\n * @return {Array<Element>}\n */\nconst _computeLineSpans = args => {\n  const spans = []\n  const currentStyle = new Map()\n  // try with formatting until we find something unsupported\n  let i = 0\n  for (; i < args.length; i++) {\n    const arg = args[i]\n    // @ts-ignore\n    const style = _browserStyleMap[arg]\n    if (style !== undefined) {\n      currentStyle.set(style.left, style.right)\n    } else {\n      if (arg.constructor === String || arg.constructor === Number) {\n        // @ts-ignore\n        const span = dom.element('span', [pair.create('style', dom.mapToStyleString(currentStyle))], [dom.text(arg)])\n        if (span.innerHTML === '') {\n          span.innerHTML = '&nbsp;'\n        }\n        spans.push(span)\n      } else {\n        break\n      }\n    }\n  }\n  // append the rest\n  for (; i < args.length; i++) {\n    let content = args[i]\n    if (!(content instanceof Symbol)) {\n      if (content.constructor !== String && content.constructor !== Number) {\n        content = ' ' + json.stringify(content) + ' '\n      }\n      spans.push(dom.element('span', [], [dom.text(/** @type {string} */ (content))]))\n    }\n  }\n  return spans\n}\n\nconst lineStyle = 'font-family:monospace;border-bottom:1px solid #e2e2e2;padding:2px;'\n\n/* istanbul ignore next */\nexport class VConsole {\n  /**\n   * @param {Element} dom\n   */\n  constructor (dom) {\n    this.dom = dom\n    /**\n     * @type {Element}\n     */\n    this.ccontainer = this.dom\n    this.depth = 0\n    vconsoles.add(this)\n  }\n\n  /**\n   * @param {Array<string|Symbol|Object|number>} args\n   * @param {boolean} collapsed\n   */\n  group (args, collapsed = false) {\n    eventloop.enqueue(() => {\n      const triangleDown = dom.element('span', [pair.create('hidden', collapsed), pair.create('style', 'color:grey;font-size:120%;')], [dom.text('▼')])\n      const triangleRight = dom.element('span', [pair.create('hidden', !collapsed), pair.create('style', 'color:grey;font-size:125%;')], [dom.text('▶')])\n      const content = dom.element('div', [pair.create('style', `${lineStyle};padding-left:${this.depth * 10}px`)], [triangleDown, triangleRight, dom.text(' ')].concat(_computeLineSpans(args)))\n      const nextContainer = dom.element('div', [pair.create('hidden', collapsed)])\n      const nextLine = dom.element('div', [], [content, nextContainer])\n      dom.append(this.ccontainer, [nextLine])\n      this.ccontainer = nextContainer\n      this.depth++\n      // when header is clicked, collapse/uncollapse container\n      dom.addEventListener(content, 'click', event => {\n        nextContainer.toggleAttribute('hidden')\n        triangleDown.toggleAttribute('hidden')\n        triangleRight.toggleAttribute('hidden')\n      })\n    })\n  }\n\n  /**\n   * @param {Array<string|Symbol|Object|number>} args\n   */\n  groupCollapsed (args) {\n    this.group(args, true)\n  }\n\n  groupEnd () {\n    eventloop.enqueue(() => {\n      if (this.depth > 0) {\n        this.depth--\n        // @ts-ignore\n        this.ccontainer = this.ccontainer.parentElement.parentElement\n      }\n    })\n  }\n\n  /**\n   * @param {Array<string|Symbol|Object|number>} args\n   */\n  print (args) {\n    eventloop.enqueue(() => {\n      dom.append(this.ccontainer, [dom.element('div', [pair.create('style', `${lineStyle};padding-left:${this.depth * 10}px`)], _computeLineSpans(args))])\n    })\n  }\n\n  /**\n   * @param {Error} err\n   */\n  printError (err) {\n    this.print([RED, BOLD, err.toString()])\n  }\n\n  /**\n   * @param {string} url\n   * @param {number} height\n   */\n  printImg (url, height) {\n    eventloop.enqueue(() => {\n      dom.append(this.ccontainer, [dom.element('img', [pair.create('src', url), pair.create('height', `${math.round(height * 1.5)}px`)])])\n    })\n  }\n\n  /**\n   * @param {Node} node\n   */\n  printDom (node) {\n    eventloop.enqueue(() => {\n      dom.append(this.ccontainer, [node])\n    })\n  }\n\n  destroy () {\n    eventloop.enqueue(() => {\n      vconsoles.delete(this)\n    })\n  }\n}\n\n/* istanbul ignore next */\n/**\n * @param {Element} dom\n */\nexport const createVConsole = dom => new VConsole(dom)\n\nconst loggingColors = [GREEN, PURPLE, ORANGE, BLUE]\nlet nextColor = 0\nlet lastLoggingTime = time.getUnixTime()\n\n/**\n * @param {string} moduleName\n * @return {function(...any):void}\n */\nexport const createModuleLogger = moduleName => {\n  const color = loggingColors[nextColor]\n  const debugRegexVar = env.getVariable('log')\n  const doLogging = debugRegexVar !== null && (debugRegexVar === '*' || debugRegexVar === 'true' || new RegExp(debugRegexVar, 'gi').test(moduleName))\n  nextColor = (nextColor + 1) % loggingColors.length\n  moduleName += ': '\n\n  return !doLogging ? func.nop : (...args) => {\n    const timeNow = time.getUnixTime()\n    const timeDiff = timeNow - lastLoggingTime\n    lastLoggingTime = timeNow\n    print(color, moduleName, UNCOLOR, ...args.map(arg => (typeof arg === 'string' || typeof arg === 'symbol') ? arg : JSON.stringify(arg)), color, ' +' + timeDiff + 'ms')\n  }\n}\n","/**\n * Utility module to create and manipulate Iterators.\n *\n * @module iterator\n */\n\n/**\n * @template T,R\n * @param {Iterator<T>} iterator\n * @param {function(T):R} f\n * @return {IterableIterator<R>}\n */\nexport const mapIterator = (iterator, f) => ({\n  /**\n   * @param {function(T):R} f\n   */\n  [Symbol.iterator] () {\n    return this\n  },\n  // @ts-ignore\n  next () {\n    const r = iterator.next()\n    return { value: r.done ? undefined : f(r.value), done: r.done }\n  }\n})\n\n/**\n * @template T\n * @param {function():IteratorResult<T>} next\n * @return {IterableIterator<T>}\n */\nexport const createIterator = next => ({\n  /**\n   * @return {IterableIterator<T>}\n   */\n  [Symbol.iterator] () {\n    return this\n  },\n  // @ts-ignore\n  next\n})\n\n/**\n * @template T\n * @param {Iterator<T>} iterator\n * @param {function(T):boolean} filter\n */\nexport const iteratorFilter = (iterator, filter) => createIterator(() => {\n  let res\n  do {\n    res = iterator.next()\n  } while (!res.done && !filter(res.value))\n  return res\n})\n\n/**\n * @template T,M\n * @param {Iterator<T>} iterator\n * @param {function(T):M} fmap\n */\nexport const iteratorMap = (iterator, fmap) => createIterator(() => {\n  const { done, value } = iterator.next()\n  return { done, value: done ? undefined : fmap(value) }\n})\n","/**\n * Utility functions for working with EcmaScript objects.\n *\n * @module object\n */\n\n/**\n * @return {Object<string,any>} obj\n */\nexport const create = () => Object.create(null)\n\n/**\n * Object.assign\n */\nexport const assign = Object.assign\n\n/**\n * @param {Object<string,any>} obj\n */\nexport const keys = Object.keys\n\n/**\n * @param {Object<string,any>} obj\n * @param {function(any,string):any} f\n */\nexport const forEach = (obj, f) => {\n  for (const key in obj) {\n    f(obj[key], key)\n  }\n}\n\n/**\n * @template R\n * @param {Object<string,any>} obj\n * @param {function(any,string):R} f\n * @return {Array<R>}\n */\nexport const map = (obj, f) => {\n  const results = []\n  for (const key in obj) {\n    results.push(f(obj[key], key))\n  }\n  return results\n}\n\n/**\n * @param {Object<string,any>} obj\n * @return {number}\n */\nexport const length = obj => keys(obj).length\n\n/**\n * @param {Object<string,any>} obj\n * @param {function(any,string):boolean} f\n * @return {boolean}\n */\nexport const some = (obj, f) => {\n  for (const key in obj) {\n    if (f(obj[key], key)) {\n      return true\n    }\n  }\n  return false\n}\n\n/**\n * @param {Object<string,any>} obj\n * @param {function(any,string):boolean} f\n * @return {boolean}\n */\nexport const every = (obj, f) => {\n  for (const key in obj) {\n    if (!f(obj[key], key)) {\n      return false\n    }\n  }\n  return true\n}\n\n/**\n * Calls `Object.prototype.hasOwnProperty`.\n *\n * @param {any} obj\n * @param {string|symbol} key\n * @return {boolean}\n */\nexport const hasProperty = (obj, key) => Object.prototype.hasOwnProperty.call(obj, key)\n\n/**\n * @param {Object<string,any>} a\n * @param {Object<string,any>} b\n * @return {boolean}\n */\nexport const equalFlat = (a, b) => a === b || (length(a) === length(b) && every(a, (val, key) => (val !== undefined || hasProperty(b, key)) && b[key] === val))\n","import { Observable } from 'lib0/observable';\nimport * as array from 'lib0/array';\nimport * as math from 'lib0/math';\nimport * as map from 'lib0/map';\nimport * as encoding from 'lib0/encoding';\nimport * as decoding from 'lib0/decoding';\nimport * as random from 'lib0/random';\nimport * as buffer from 'lib0/buffer';\nimport * as error from 'lib0/error';\nimport * as binary from 'lib0/binary';\nimport * as f from 'lib0/function';\nimport { callAll } from 'lib0/function';\nimport * as set from 'lib0/set';\nimport * as logging from 'lib0/logging';\nimport * as time from 'lib0/time';\nimport * as iterator from 'lib0/iterator';\nimport * as object from 'lib0/object';\n\n/**\n * This is an abstract interface that all Connectors should implement to keep them interchangeable.\n *\n * @note This interface is experimental and it is not advised to actually inherit this class.\n *       It just serves as typing information.\n *\n * @extends {Observable<any>}\n */\nclass AbstractConnector extends Observable {\n  /**\n   * @param {Doc} ydoc\n   * @param {any} awareness\n   */\n  constructor (ydoc, awareness) {\n    super();\n    this.doc = ydoc;\n    this.awareness = awareness;\n  }\n}\n\nclass DeleteItem {\n  /**\n   * @param {number} clock\n   * @param {number} len\n   */\n  constructor (clock, len) {\n    /**\n     * @type {number}\n     */\n    this.clock = clock;\n    /**\n     * @type {number}\n     */\n    this.len = len;\n  }\n}\n\n/**\n * We no longer maintain a DeleteStore. DeleteSet is a temporary object that is created when needed.\n * - When created in a transaction, it must only be accessed after sorting, and merging\n *   - This DeleteSet is send to other clients\n * - We do not create a DeleteSet when we send a sync message. The DeleteSet message is created directly from StructStore\n * - We read a DeleteSet as part of a sync/update message. In this case the DeleteSet is already sorted and merged.\n */\nclass DeleteSet {\n  constructor () {\n    /**\n     * @type {Map<number,Array<DeleteItem>>}\n     */\n    this.clients = new Map();\n  }\n}\n\n/**\n * Iterate over all structs that the DeleteSet gc's.\n *\n * @param {Transaction} transaction\n * @param {DeleteSet} ds\n * @param {function(GC|Item):void} f\n *\n * @function\n */\nconst iterateDeletedStructs = (transaction, ds, f) =>\n  ds.clients.forEach((deletes, clientid) => {\n    const structs = /** @type {Array<GC|Item>} */ (transaction.doc.store.clients.get(clientid));\n    for (let i = 0; i < deletes.length; i++) {\n      const del = deletes[i];\n      iterateStructs(transaction, structs, del.clock, del.len, f);\n    }\n  });\n\n/**\n * @param {Array<DeleteItem>} dis\n * @param {number} clock\n * @return {number|null}\n *\n * @private\n * @function\n */\nconst findIndexDS = (dis, clock) => {\n  let left = 0;\n  let right = dis.length - 1;\n  while (left <= right) {\n    const midindex = math.floor((left + right) / 2);\n    const mid = dis[midindex];\n    const midclock = mid.clock;\n    if (midclock <= clock) {\n      if (clock < midclock + mid.len) {\n        return midindex\n      }\n      left = midindex + 1;\n    } else {\n      right = midindex - 1;\n    }\n  }\n  return null\n};\n\n/**\n * @param {DeleteSet} ds\n * @param {ID} id\n * @return {boolean}\n *\n * @private\n * @function\n */\nconst isDeleted = (ds, id) => {\n  const dis = ds.clients.get(id.client);\n  return dis !== undefined && findIndexDS(dis, id.clock) !== null\n};\n\n/**\n * @param {DeleteSet} ds\n *\n * @private\n * @function\n */\nconst sortAndMergeDeleteSet = ds => {\n  ds.clients.forEach(dels => {\n    dels.sort((a, b) => a.clock - b.clock);\n    // merge items without filtering or splicing the array\n    // i is the current pointer\n    // j refers to the current insert position for the pointed item\n    // try to merge dels[i] into dels[j-1] or set dels[j]=dels[i]\n    let i, j;\n    for (i = 1, j = 1; i < dels.length; i++) {\n      const left = dels[j - 1];\n      const right = dels[i];\n      if (left.clock + left.len >= right.clock) {\n        left.len = math.max(left.len, right.clock + right.len - left.clock);\n      } else {\n        if (j < i) {\n          dels[j] = right;\n        }\n        j++;\n      }\n    }\n    dels.length = j;\n  });\n};\n\n/**\n * @param {Array<DeleteSet>} dss\n * @return {DeleteSet} A fresh DeleteSet\n */\nconst mergeDeleteSets = dss => {\n  const merged = new DeleteSet();\n  for (let dssI = 0; dssI < dss.length; dssI++) {\n    dss[dssI].clients.forEach((delsLeft, client) => {\n      if (!merged.clients.has(client)) {\n        // Write all missing keys from current ds and all following.\n        // If merged already contains `client` current ds has already been added.\n        /**\n         * @type {Array<DeleteItem>}\n         */\n        const dels = delsLeft.slice();\n        for (let i = dssI + 1; i < dss.length; i++) {\n          array.appendTo(dels, dss[i].clients.get(client) || []);\n        }\n        merged.clients.set(client, dels);\n      }\n    });\n  }\n  sortAndMergeDeleteSet(merged);\n  return merged\n};\n\n/**\n * @param {DeleteSet} ds\n * @param {number} client\n * @param {number} clock\n * @param {number} length\n *\n * @private\n * @function\n */\nconst addToDeleteSet = (ds, client, clock, length) => {\n  map.setIfUndefined(ds.clients, client, () => []).push(new DeleteItem(clock, length));\n};\n\nconst createDeleteSet = () => new DeleteSet();\n\n/**\n * @param {StructStore} ss\n * @return {DeleteSet} Merged and sorted DeleteSet\n *\n * @private\n * @function\n */\nconst createDeleteSetFromStructStore = ss => {\n  const ds = createDeleteSet();\n  ss.clients.forEach((structs, client) => {\n    /**\n     * @type {Array<DeleteItem>}\n     */\n    const dsitems = [];\n    for (let i = 0; i < structs.length; i++) {\n      const struct = structs[i];\n      if (struct.deleted) {\n        const clock = struct.id.clock;\n        let len = struct.length;\n        if (i + 1 < structs.length) {\n          for (let next = structs[i + 1]; i + 1 < structs.length && next.deleted; next = structs[++i + 1]) {\n            len += next.length;\n          }\n        }\n        dsitems.push(new DeleteItem(clock, len));\n      }\n    }\n    if (dsitems.length > 0) {\n      ds.clients.set(client, dsitems);\n    }\n  });\n  return ds\n};\n\n/**\n * @param {DSEncoderV1 | DSEncoderV2} encoder\n * @param {DeleteSet} ds\n *\n * @private\n * @function\n */\nconst writeDeleteSet = (encoder, ds) => {\n  encoding.writeVarUint(encoder.restEncoder, ds.clients.size);\n  ds.clients.forEach((dsitems, client) => {\n    encoder.resetDsCurVal();\n    encoding.writeVarUint(encoder.restEncoder, client);\n    const len = dsitems.length;\n    encoding.writeVarUint(encoder.restEncoder, len);\n    for (let i = 0; i < len; i++) {\n      const item = dsitems[i];\n      encoder.writeDsClock(item.clock);\n      encoder.writeDsLen(item.len);\n    }\n  });\n};\n\n/**\n * @param {DSDecoderV1 | DSDecoderV2} decoder\n * @return {DeleteSet}\n *\n * @private\n * @function\n */\nconst readDeleteSet = decoder => {\n  const ds = new DeleteSet();\n  const numClients = decoding.readVarUint(decoder.restDecoder);\n  for (let i = 0; i < numClients; i++) {\n    decoder.resetDsCurVal();\n    const client = decoding.readVarUint(decoder.restDecoder);\n    const numberOfDeletes = decoding.readVarUint(decoder.restDecoder);\n    if (numberOfDeletes > 0) {\n      const dsField = map.setIfUndefined(ds.clients, client, () => []);\n      for (let i = 0; i < numberOfDeletes; i++) {\n        dsField.push(new DeleteItem(decoder.readDsClock(), decoder.readDsLen()));\n      }\n    }\n  }\n  return ds\n};\n\n/**\n * @todo YDecoder also contains references to String and other Decoders. Would make sense to exchange YDecoder.toUint8Array for YDecoder.DsToUint8Array()..\n */\n\n/**\n * @param {DSDecoderV1 | DSDecoderV2} decoder\n * @param {Transaction} transaction\n * @param {StructStore} store\n * @return {Uint8Array|null} Returns a v2 update containing all deletes that couldn't be applied yet; or null if all deletes were applied successfully.\n *\n * @private\n * @function\n */\nconst readAndApplyDeleteSet = (decoder, transaction, store) => {\n  const unappliedDS = new DeleteSet();\n  const numClients = decoding.readVarUint(decoder.restDecoder);\n  for (let i = 0; i < numClients; i++) {\n    decoder.resetDsCurVal();\n    const client = decoding.readVarUint(decoder.restDecoder);\n    const numberOfDeletes = decoding.readVarUint(decoder.restDecoder);\n    const structs = store.clients.get(client) || [];\n    const state = getState(store, client);\n    for (let i = 0; i < numberOfDeletes; i++) {\n      const clock = decoder.readDsClock();\n      const clockEnd = clock + decoder.readDsLen();\n      if (clock < state) {\n        if (state < clockEnd) {\n          addToDeleteSet(unappliedDS, client, state, clockEnd - state);\n        }\n        let index = findIndexSS(structs, clock);\n        /**\n         * We can ignore the case of GC and Delete structs, because we are going to skip them\n         * @type {Item}\n         */\n        // @ts-ignore\n        let struct = structs[index];\n        // split the first item if necessary\n        if (!struct.deleted && struct.id.clock < clock) {\n          structs.splice(index + 1, 0, splitItem(transaction, struct, clock - struct.id.clock));\n          index++; // increase we now want to use the next struct\n        }\n        while (index < structs.length) {\n          // @ts-ignore\n          struct = structs[index++];\n          if (struct.id.clock < clockEnd) {\n            if (!struct.deleted) {\n              if (clockEnd < struct.id.clock + struct.length) {\n                structs.splice(index, 0, splitItem(transaction, struct, clockEnd - struct.id.clock));\n              }\n              struct.delete(transaction);\n            }\n          } else {\n            break\n          }\n        }\n      } else {\n        addToDeleteSet(unappliedDS, client, clock, clockEnd - clock);\n      }\n    }\n  }\n  if (unappliedDS.clients.size > 0) {\n    const ds = new UpdateEncoderV2();\n    encoding.writeVarUint(ds.restEncoder, 0); // encode 0 structs\n    writeDeleteSet(ds, unappliedDS);\n    return ds.toUint8Array()\n  }\n  return null\n};\n\n/**\n * @module Y\n */\n\nconst generateNewClientId = random.uint32;\n\n/**\n * @typedef {Object} DocOpts\n * @property {boolean} [DocOpts.gc=true] Disable garbage collection (default: gc=true)\n * @property {function(Item):boolean} [DocOpts.gcFilter] Will be called before an Item is garbage collected. Return false to keep the Item.\n * @property {string} [DocOpts.guid] Define a globally unique identifier for this document\n * @property {any} [DocOpts.meta] Any kind of meta information you want to associate with this document. If this is a subdocument, remote peers will store the meta information as well.\n * @property {boolean} [DocOpts.autoLoad] If a subdocument, automatically load document. If this is a subdocument, remote peers will load the document as well automatically.\n */\n\n/**\n * A Yjs instance handles the state of shared data.\n * @extends Observable<string>\n */\nclass Doc extends Observable {\n  /**\n   * @param {DocOpts} [opts] configuration\n   */\n  constructor ({ guid = random.uuidv4(), gc = true, gcFilter = () => true, meta = null, autoLoad = false } = {}) {\n    super();\n    this.gc = gc;\n    this.gcFilter = gcFilter;\n    this.clientID = generateNewClientId();\n    this.guid = guid;\n    /**\n     * @type {Map<string, AbstractType<YEvent>>}\n     */\n    this.share = new Map();\n    this.store = new StructStore();\n    /**\n     * @type {Transaction | null}\n     */\n    this._transaction = null;\n    /**\n     * @type {Array<Transaction>}\n     */\n    this._transactionCleanups = [];\n    /**\n     * @type {Set<Doc>}\n     */\n    this.subdocs = new Set();\n    /**\n     * If this document is a subdocument - a document integrated into another document - then _item is defined.\n     * @type {Item?}\n     */\n    this._item = null;\n    this.shouldLoad = autoLoad;\n    this.autoLoad = autoLoad;\n    this.meta = meta;\n  }\n\n  /**\n   * Notify the parent document that you request to load data into this subdocument (if it is a subdocument).\n   *\n   * `load()` might be used in the future to request any provider to load the most current data.\n   *\n   * It is safe to call `load()` multiple times.\n   */\n  load () {\n    const item = this._item;\n    if (item !== null && !this.shouldLoad) {\n      transact(/** @type {any} */ (item.parent).doc, transaction => {\n        transaction.subdocsLoaded.add(this);\n      }, null, true);\n    }\n    this.shouldLoad = true;\n  }\n\n  getSubdocs () {\n    return this.subdocs\n  }\n\n  getSubdocGuids () {\n    return new Set(Array.from(this.subdocs).map(doc => doc.guid))\n  }\n\n  /**\n   * Changes that happen inside of a transaction are bundled. This means that\n   * the observer fires _after_ the transaction is finished and that all changes\n   * that happened inside of the transaction are sent as one message to the\n   * other peers.\n   *\n   * @param {function(Transaction):void} f The function that should be executed as a transaction\n   * @param {any} [origin] Origin of who started the transaction. Will be stored on transaction.origin\n   *\n   * @public\n   */\n  transact (f, origin = null) {\n    transact(this, f, origin);\n  }\n\n  /**\n   * Define a shared data type.\n   *\n   * Multiple calls of `y.get(name, TypeConstructor)` yield the same result\n   * and do not overwrite each other. I.e.\n   * `y.define(name, Y.Array) === y.define(name, Y.Array)`\n   *\n   * After this method is called, the type is also available on `y.share.get(name)`.\n   *\n   * *Best Practices:*\n   * Define all types right after the Yjs instance is created and store them in a separate object.\n   * Also use the typed methods `getText(name)`, `getArray(name)`, ..\n   *\n   * @example\n   *   const y = new Y(..)\n   *   const appState = {\n   *     document: y.getText('document')\n   *     comments: y.getArray('comments')\n   *   }\n   *\n   * @param {string} name\n   * @param {Function} TypeConstructor The constructor of the type definition. E.g. Y.Text, Y.Array, Y.Map, ...\n   * @return {AbstractType<any>} The created type. Constructed with TypeConstructor\n   *\n   * @public\n   */\n  get (name, TypeConstructor = AbstractType) {\n    const type = map.setIfUndefined(this.share, name, () => {\n      // @ts-ignore\n      const t = new TypeConstructor();\n      t._integrate(this, null);\n      return t\n    });\n    const Constr = type.constructor;\n    if (TypeConstructor !== AbstractType && Constr !== TypeConstructor) {\n      if (Constr === AbstractType) {\n        // @ts-ignore\n        const t = new TypeConstructor();\n        t._map = type._map;\n        type._map.forEach(/** @param {Item?} n */ n => {\n          for (; n !== null; n = n.left) {\n            // @ts-ignore\n            n.parent = t;\n          }\n        });\n        t._start = type._start;\n        for (let n = t._start; n !== null; n = n.right) {\n          n.parent = t;\n        }\n        t._length = type._length;\n        this.share.set(name, t);\n        t._integrate(this, null);\n        return t\n      } else {\n        throw new Error(`Type with the name ${name} has already been defined with a different constructor`)\n      }\n    }\n    return type\n  }\n\n  /**\n   * @template T\n   * @param {string} [name]\n   * @return {YArray<T>}\n   *\n   * @public\n   */\n  getArray (name = '') {\n    // @ts-ignore\n    return this.get(name, YArray)\n  }\n\n  /**\n   * @param {string} [name]\n   * @return {YText}\n   *\n   * @public\n   */\n  getText (name = '') {\n    // @ts-ignore\n    return this.get(name, YText)\n  }\n\n  /**\n   * @param {string} [name]\n   * @return {YMap<any>}\n   *\n   * @public\n   */\n  getMap (name = '') {\n    // @ts-ignore\n    return this.get(name, YMap)\n  }\n\n  /**\n   * @param {string} [name]\n   * @return {YXmlFragment}\n   *\n   * @public\n   */\n  getXmlFragment (name = '') {\n    // @ts-ignore\n    return this.get(name, YXmlFragment)\n  }\n\n  /**\n   * Converts the entire document into a js object, recursively traversing each yjs type\n   * Doesn't log types that have not been defined (using ydoc.getType(..)).\n   *\n   * @deprecated Do not use this method and rather call toJSON directly on the shared types.\n   *\n   * @return {Object<string, any>}\n   */\n  toJSON () {\n    /**\n     * @type {Object<string, any>}\n     */\n    const doc = {};\n\n    this.share.forEach((value, key) => {\n      doc[key] = value.toJSON();\n    });\n\n    return doc\n  }\n\n  /**\n   * Emit `destroy` event and unregister all event handlers.\n   */\n  destroy () {\n    array.from(this.subdocs).forEach(subdoc => subdoc.destroy());\n    const item = this._item;\n    if (item !== null) {\n      this._item = null;\n      const content = /** @type {ContentDoc} */ (item.content);\n      if (item.deleted) {\n        // @ts-ignore\n        content.doc = null;\n      } else {\n        content.doc = new Doc({ guid: this.guid, ...content.opts });\n        content.doc._item = item;\n      }\n      transact(/** @type {any} */ (item).parent.doc, transaction => {\n        if (!item.deleted) {\n          transaction.subdocsAdded.add(content.doc);\n        }\n        transaction.subdocsRemoved.add(this);\n      }, null, true);\n    }\n    this.emit('destroyed', [true]);\n    this.emit('destroy', [this]);\n    super.destroy();\n  }\n\n  /**\n   * @param {string} eventName\n   * @param {function(...any):any} f\n   */\n  on (eventName, f) {\n    super.on(eventName, f);\n  }\n\n  /**\n   * @param {string} eventName\n   * @param {function} f\n   */\n  off (eventName, f) {\n    super.off(eventName, f);\n  }\n}\n\nclass DSDecoderV1 {\n  /**\n   * @param {decoding.Decoder} decoder\n   */\n  constructor (decoder) {\n    this.restDecoder = decoder;\n  }\n\n  resetDsCurVal () {\n    // nop\n  }\n\n  /**\n   * @return {number}\n   */\n  readDsClock () {\n    return decoding.readVarUint(this.restDecoder)\n  }\n\n  /**\n   * @return {number}\n   */\n  readDsLen () {\n    return decoding.readVarUint(this.restDecoder)\n  }\n}\n\nclass UpdateDecoderV1 extends DSDecoderV1 {\n  /**\n   * @return {ID}\n   */\n  readLeftID () {\n    return createID(decoding.readVarUint(this.restDecoder), decoding.readVarUint(this.restDecoder))\n  }\n\n  /**\n   * @return {ID}\n   */\n  readRightID () {\n    return createID(decoding.readVarUint(this.restDecoder), decoding.readVarUint(this.restDecoder))\n  }\n\n  /**\n   * Read the next client id.\n   * Use this in favor of readID whenever possible to reduce the number of objects created.\n   */\n  readClient () {\n    return decoding.readVarUint(this.restDecoder)\n  }\n\n  /**\n   * @return {number} info An unsigned 8-bit integer\n   */\n  readInfo () {\n    return decoding.readUint8(this.restDecoder)\n  }\n\n  /**\n   * @return {string}\n   */\n  readString () {\n    return decoding.readVarString(this.restDecoder)\n  }\n\n  /**\n   * @return {boolean} isKey\n   */\n  readParentInfo () {\n    return decoding.readVarUint(this.restDecoder) === 1\n  }\n\n  /**\n   * @return {number} info An unsigned 8-bit integer\n   */\n  readTypeRef () {\n    return decoding.readVarUint(this.restDecoder)\n  }\n\n  /**\n   * Write len of a struct - well suited for Opt RLE encoder.\n   *\n   * @return {number} len\n   */\n  readLen () {\n    return decoding.readVarUint(this.restDecoder)\n  }\n\n  /**\n   * @return {any}\n   */\n  readAny () {\n    return decoding.readAny(this.restDecoder)\n  }\n\n  /**\n   * @return {Uint8Array}\n   */\n  readBuf () {\n    return buffer.copyUint8Array(decoding.readVarUint8Array(this.restDecoder))\n  }\n\n  /**\n   * Legacy implementation uses JSON parse. We use any-decoding in v2.\n   *\n   * @return {any}\n   */\n  readJSON () {\n    return JSON.parse(decoding.readVarString(this.restDecoder))\n  }\n\n  /**\n   * @return {string}\n   */\n  readKey () {\n    return decoding.readVarString(this.restDecoder)\n  }\n}\n\nclass DSDecoderV2 {\n  /**\n   * @param {decoding.Decoder} decoder\n   */\n  constructor (decoder) {\n    /**\n     * @private\n     */\n    this.dsCurrVal = 0;\n    this.restDecoder = decoder;\n  }\n\n  resetDsCurVal () {\n    this.dsCurrVal = 0;\n  }\n\n  /**\n   * @return {number}\n   */\n  readDsClock () {\n    this.dsCurrVal += decoding.readVarUint(this.restDecoder);\n    return this.dsCurrVal\n  }\n\n  /**\n   * @return {number}\n   */\n  readDsLen () {\n    const diff = decoding.readVarUint(this.restDecoder) + 1;\n    this.dsCurrVal += diff;\n    return diff\n  }\n}\n\nclass UpdateDecoderV2 extends DSDecoderV2 {\n  /**\n   * @param {decoding.Decoder} decoder\n   */\n  constructor (decoder) {\n    super(decoder);\n    /**\n     * List of cached keys. If the keys[id] does not exist, we read a new key\n     * from stringEncoder and push it to keys.\n     *\n     * @type {Array<string>}\n     */\n    this.keys = [];\n    decoding.readVarUint(decoder); // read feature flag - currently unused\n    this.keyClockDecoder = new decoding.IntDiffOptRleDecoder(decoding.readVarUint8Array(decoder));\n    this.clientDecoder = new decoding.UintOptRleDecoder(decoding.readVarUint8Array(decoder));\n    this.leftClockDecoder = new decoding.IntDiffOptRleDecoder(decoding.readVarUint8Array(decoder));\n    this.rightClockDecoder = new decoding.IntDiffOptRleDecoder(decoding.readVarUint8Array(decoder));\n    this.infoDecoder = new decoding.RleDecoder(decoding.readVarUint8Array(decoder), decoding.readUint8);\n    this.stringDecoder = new decoding.StringDecoder(decoding.readVarUint8Array(decoder));\n    this.parentInfoDecoder = new decoding.RleDecoder(decoding.readVarUint8Array(decoder), decoding.readUint8);\n    this.typeRefDecoder = new decoding.UintOptRleDecoder(decoding.readVarUint8Array(decoder));\n    this.lenDecoder = new decoding.UintOptRleDecoder(decoding.readVarUint8Array(decoder));\n  }\n\n  /**\n   * @return {ID}\n   */\n  readLeftID () {\n    return new ID(this.clientDecoder.read(), this.leftClockDecoder.read())\n  }\n\n  /**\n   * @return {ID}\n   */\n  readRightID () {\n    return new ID(this.clientDecoder.read(), this.rightClockDecoder.read())\n  }\n\n  /**\n   * Read the next client id.\n   * Use this in favor of readID whenever possible to reduce the number of objects created.\n   */\n  readClient () {\n    return this.clientDecoder.read()\n  }\n\n  /**\n   * @return {number} info An unsigned 8-bit integer\n   */\n  readInfo () {\n    return /** @type {number} */ (this.infoDecoder.read())\n  }\n\n  /**\n   * @return {string}\n   */\n  readString () {\n    return this.stringDecoder.read()\n  }\n\n  /**\n   * @return {boolean}\n   */\n  readParentInfo () {\n    return this.parentInfoDecoder.read() === 1\n  }\n\n  /**\n   * @return {number} An unsigned 8-bit integer\n   */\n  readTypeRef () {\n    return this.typeRefDecoder.read()\n  }\n\n  /**\n   * Write len of a struct - well suited for Opt RLE encoder.\n   *\n   * @return {number}\n   */\n  readLen () {\n    return this.lenDecoder.read()\n  }\n\n  /**\n   * @return {any}\n   */\n  readAny () {\n    return decoding.readAny(this.restDecoder)\n  }\n\n  /**\n   * @return {Uint8Array}\n   */\n  readBuf () {\n    return decoding.readVarUint8Array(this.restDecoder)\n  }\n\n  /**\n   * This is mainly here for legacy purposes.\n   *\n   * Initial we incoded objects using JSON. Now we use the much faster lib0/any-encoder. This method mainly exists for legacy purposes for the v1 encoder.\n   *\n   * @return {any}\n   */\n  readJSON () {\n    return decoding.readAny(this.restDecoder)\n  }\n\n  /**\n   * @return {string}\n   */\n  readKey () {\n    const keyClock = this.keyClockDecoder.read();\n    if (keyClock < this.keys.length) {\n      return this.keys[keyClock]\n    } else {\n      const key = this.stringDecoder.read();\n      this.keys.push(key);\n      return key\n    }\n  }\n}\n\nclass DSEncoderV1 {\n  constructor () {\n    this.restEncoder = encoding.createEncoder();\n  }\n\n  toUint8Array () {\n    return encoding.toUint8Array(this.restEncoder)\n  }\n\n  resetDsCurVal () {\n    // nop\n  }\n\n  /**\n   * @param {number} clock\n   */\n  writeDsClock (clock) {\n    encoding.writeVarUint(this.restEncoder, clock);\n  }\n\n  /**\n   * @param {number} len\n   */\n  writeDsLen (len) {\n    encoding.writeVarUint(this.restEncoder, len);\n  }\n}\n\nclass UpdateEncoderV1 extends DSEncoderV1 {\n  /**\n   * @param {ID} id\n   */\n  writeLeftID (id) {\n    encoding.writeVarUint(this.restEncoder, id.client);\n    encoding.writeVarUint(this.restEncoder, id.clock);\n  }\n\n  /**\n   * @param {ID} id\n   */\n  writeRightID (id) {\n    encoding.writeVarUint(this.restEncoder, id.client);\n    encoding.writeVarUint(this.restEncoder, id.clock);\n  }\n\n  /**\n   * Use writeClient and writeClock instead of writeID if possible.\n   * @param {number} client\n   */\n  writeClient (client) {\n    encoding.writeVarUint(this.restEncoder, client);\n  }\n\n  /**\n   * @param {number} info An unsigned 8-bit integer\n   */\n  writeInfo (info) {\n    encoding.writeUint8(this.restEncoder, info);\n  }\n\n  /**\n   * @param {string} s\n   */\n  writeString (s) {\n    encoding.writeVarString(this.restEncoder, s);\n  }\n\n  /**\n   * @param {boolean} isYKey\n   */\n  writeParentInfo (isYKey) {\n    encoding.writeVarUint(this.restEncoder, isYKey ? 1 : 0);\n  }\n\n  /**\n   * @param {number} info An unsigned 8-bit integer\n   */\n  writeTypeRef (info) {\n    encoding.writeVarUint(this.restEncoder, info);\n  }\n\n  /**\n   * Write len of a struct - well suited for Opt RLE encoder.\n   *\n   * @param {number} len\n   */\n  writeLen (len) {\n    encoding.writeVarUint(this.restEncoder, len);\n  }\n\n  /**\n   * @param {any} any\n   */\n  writeAny (any) {\n    encoding.writeAny(this.restEncoder, any);\n  }\n\n  /**\n   * @param {Uint8Array} buf\n   */\n  writeBuf (buf) {\n    encoding.writeVarUint8Array(this.restEncoder, buf);\n  }\n\n  /**\n   * @param {any} embed\n   */\n  writeJSON (embed) {\n    encoding.writeVarString(this.restEncoder, JSON.stringify(embed));\n  }\n\n  /**\n   * @param {string} key\n   */\n  writeKey (key) {\n    encoding.writeVarString(this.restEncoder, key);\n  }\n}\n\nclass DSEncoderV2 {\n  constructor () {\n    this.restEncoder = encoding.createEncoder(); // encodes all the rest / non-optimized\n    this.dsCurrVal = 0;\n  }\n\n  toUint8Array () {\n    return encoding.toUint8Array(this.restEncoder)\n  }\n\n  resetDsCurVal () {\n    this.dsCurrVal = 0;\n  }\n\n  /**\n   * @param {number} clock\n   */\n  writeDsClock (clock) {\n    const diff = clock - this.dsCurrVal;\n    this.dsCurrVal = clock;\n    encoding.writeVarUint(this.restEncoder, diff);\n  }\n\n  /**\n   * @param {number} len\n   */\n  writeDsLen (len) {\n    if (len === 0) {\n      error.unexpectedCase();\n    }\n    encoding.writeVarUint(this.restEncoder, len - 1);\n    this.dsCurrVal += len;\n  }\n}\n\nclass UpdateEncoderV2 extends DSEncoderV2 {\n  constructor () {\n    super();\n    /**\n     * @type {Map<string,number>}\n     */\n    this.keyMap = new Map();\n    /**\n     * Refers to the next uniqe key-identifier to me used.\n     * See writeKey method for more information.\n     *\n     * @type {number}\n     */\n    this.keyClock = 0;\n    this.keyClockEncoder = new encoding.IntDiffOptRleEncoder();\n    this.clientEncoder = new encoding.UintOptRleEncoder();\n    this.leftClockEncoder = new encoding.IntDiffOptRleEncoder();\n    this.rightClockEncoder = new encoding.IntDiffOptRleEncoder();\n    this.infoEncoder = new encoding.RleEncoder(encoding.writeUint8);\n    this.stringEncoder = new encoding.StringEncoder();\n    this.parentInfoEncoder = new encoding.RleEncoder(encoding.writeUint8);\n    this.typeRefEncoder = new encoding.UintOptRleEncoder();\n    this.lenEncoder = new encoding.UintOptRleEncoder();\n  }\n\n  toUint8Array () {\n    const encoder = encoding.createEncoder();\n    encoding.writeVarUint(encoder, 0); // this is a feature flag that we might use in the future\n    encoding.writeVarUint8Array(encoder, this.keyClockEncoder.toUint8Array());\n    encoding.writeVarUint8Array(encoder, this.clientEncoder.toUint8Array());\n    encoding.writeVarUint8Array(encoder, this.leftClockEncoder.toUint8Array());\n    encoding.writeVarUint8Array(encoder, this.rightClockEncoder.toUint8Array());\n    encoding.writeVarUint8Array(encoder, encoding.toUint8Array(this.infoEncoder));\n    encoding.writeVarUint8Array(encoder, this.stringEncoder.toUint8Array());\n    encoding.writeVarUint8Array(encoder, encoding.toUint8Array(this.parentInfoEncoder));\n    encoding.writeVarUint8Array(encoder, this.typeRefEncoder.toUint8Array());\n    encoding.writeVarUint8Array(encoder, this.lenEncoder.toUint8Array());\n    // @note The rest encoder is appended! (note the missing var)\n    encoding.writeUint8Array(encoder, encoding.toUint8Array(this.restEncoder));\n    return encoding.toUint8Array(encoder)\n  }\n\n  /**\n   * @param {ID} id\n   */\n  writeLeftID (id) {\n    this.clientEncoder.write(id.client);\n    this.leftClockEncoder.write(id.clock);\n  }\n\n  /**\n   * @param {ID} id\n   */\n  writeRightID (id) {\n    this.clientEncoder.write(id.client);\n    this.rightClockEncoder.write(id.clock);\n  }\n\n  /**\n   * @param {number} client\n   */\n  writeClient (client) {\n    this.clientEncoder.write(client);\n  }\n\n  /**\n   * @param {number} info An unsigned 8-bit integer\n   */\n  writeInfo (info) {\n    this.infoEncoder.write(info);\n  }\n\n  /**\n   * @param {string} s\n   */\n  writeString (s) {\n    this.stringEncoder.write(s);\n  }\n\n  /**\n   * @param {boolean} isYKey\n   */\n  writeParentInfo (isYKey) {\n    this.parentInfoEncoder.write(isYKey ? 1 : 0);\n  }\n\n  /**\n   * @param {number} info An unsigned 8-bit integer\n   */\n  writeTypeRef (info) {\n    this.typeRefEncoder.write(info);\n  }\n\n  /**\n   * Write len of a struct - well suited for Opt RLE encoder.\n   *\n   * @param {number} len\n   */\n  writeLen (len) {\n    this.lenEncoder.write(len);\n  }\n\n  /**\n   * @param {any} any\n   */\n  writeAny (any) {\n    encoding.writeAny(this.restEncoder, any);\n  }\n\n  /**\n   * @param {Uint8Array} buf\n   */\n  writeBuf (buf) {\n    encoding.writeVarUint8Array(this.restEncoder, buf);\n  }\n\n  /**\n   * This is mainly here for legacy purposes.\n   *\n   * Initial we incoded objects using JSON. Now we use the much faster lib0/any-encoder. This method mainly exists for legacy purposes for the v1 encoder.\n   *\n   * @param {any} embed\n   */\n  writeJSON (embed) {\n    encoding.writeAny(this.restEncoder, embed);\n  }\n\n  /**\n   * Property keys are often reused. For example, in y-prosemirror the key `bold` might\n   * occur very often. For a 3d application, the key `position` might occur very often.\n   *\n   * We cache these keys in a Map and refer to them via a unique number.\n   *\n   * @param {string} key\n   */\n  writeKey (key) {\n    const clock = this.keyMap.get(key);\n    if (clock === undefined) {\n      this.keyClockEncoder.write(this.keyClock++);\n      this.stringEncoder.write(key);\n    } else {\n      this.keyClockEncoder.write(this.keyClock++);\n    }\n  }\n}\n\n/**\n * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n * @param {Array<GC|Item>} structs All structs by `client`\n * @param {number} client\n * @param {number} clock write structs starting with `ID(client,clock)`\n *\n * @function\n */\nconst writeStructs = (encoder, structs, client, clock) => {\n  // write first id\n  clock = math.max(clock, structs[0].id.clock); // make sure the first id exists\n  const startNewStructs = findIndexSS(structs, clock);\n  // write # encoded structs\n  encoding.writeVarUint(encoder.restEncoder, structs.length - startNewStructs);\n  encoder.writeClient(client);\n  encoding.writeVarUint(encoder.restEncoder, clock);\n  const firstStruct = structs[startNewStructs];\n  // write first struct with an offset\n  firstStruct.write(encoder, clock - firstStruct.id.clock);\n  for (let i = startNewStructs + 1; i < structs.length; i++) {\n    structs[i].write(encoder, 0);\n  }\n};\n\n/**\n * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n * @param {StructStore} store\n * @param {Map<number,number>} _sm\n *\n * @private\n * @function\n */\nconst writeClientsStructs = (encoder, store, _sm) => {\n  // we filter all valid _sm entries into sm\n  const sm = new Map();\n  _sm.forEach((clock, client) => {\n    // only write if new structs are available\n    if (getState(store, client) > clock) {\n      sm.set(client, clock);\n    }\n  });\n  getStateVector(store).forEach((clock, client) => {\n    if (!_sm.has(client)) {\n      sm.set(client, 0);\n    }\n  });\n  // write # states that were updated\n  encoding.writeVarUint(encoder.restEncoder, sm.size);\n  // Write items with higher client ids first\n  // This heavily improves the conflict algorithm.\n  Array.from(sm.entries()).sort((a, b) => b[0] - a[0]).forEach(([client, clock]) => {\n    // @ts-ignore\n    writeStructs(encoder, store.clients.get(client), client, clock);\n  });\n};\n\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder The decoder object to read data from.\n * @param {Doc} doc\n * @return {Map<number, { i: number, refs: Array<Item | GC> }>}\n *\n * @private\n * @function\n */\nconst readClientsStructRefs = (decoder, doc) => {\n  /**\n   * @type {Map<number, { i: number, refs: Array<Item | GC> }>}\n   */\n  const clientRefs = map.create();\n  const numOfStateUpdates = decoding.readVarUint(decoder.restDecoder);\n  for (let i = 0; i < numOfStateUpdates; i++) {\n    const numberOfStructs = decoding.readVarUint(decoder.restDecoder);\n    /**\n     * @type {Array<GC|Item>}\n     */\n    const refs = new Array(numberOfStructs);\n    const client = decoder.readClient();\n    let clock = decoding.readVarUint(decoder.restDecoder);\n    // const start = performance.now()\n    clientRefs.set(client, { i: 0, refs });\n    for (let i = 0; i < numberOfStructs; i++) {\n      const info = decoder.readInfo();\n      switch (binary.BITS5 & info) {\n        case 0: { // GC\n          const len = decoder.readLen();\n          refs[i] = new GC(createID(client, clock), len);\n          clock += len;\n          break\n        }\n        case 10: { // Skip Struct (nothing to apply)\n          // @todo we could reduce the amount of checks by adding Skip struct to clientRefs so we know that something is missing.\n          const len = decoding.readVarUint(decoder.restDecoder);\n          refs[i] = new Skip(createID(client, clock), len);\n          clock += len;\n          break\n        }\n        default: { // Item with content\n          /**\n           * The optimized implementation doesn't use any variables because inlining variables is faster.\n           * Below a non-optimized version is shown that implements the basic algorithm with\n           * a few comments\n           */\n          const cantCopyParentInfo = (info & (binary.BIT7 | binary.BIT8)) === 0;\n          // If parent = null and neither left nor right are defined, then we know that `parent` is child of `y`\n          // and we read the next string as parentYKey.\n          // It indicates how we store/retrieve parent from `y.share`\n          // @type {string|null}\n          const struct = new Item(\n            createID(client, clock),\n            null, // leftd\n            (info & binary.BIT8) === binary.BIT8 ? decoder.readLeftID() : null, // origin\n            null, // right\n            (info & binary.BIT7) === binary.BIT7 ? decoder.readRightID() : null, // right origin\n            cantCopyParentInfo ? (decoder.readParentInfo() ? doc.get(decoder.readString()) : decoder.readLeftID()) : null, // parent\n            cantCopyParentInfo && (info & binary.BIT6) === binary.BIT6 ? decoder.readString() : null, // parentSub\n            readItemContent(decoder, info) // item content\n          );\n          /* A non-optimized implementation of the above algorithm:\n\n          // The item that was originally to the left of this item.\n          const origin = (info & binary.BIT8) === binary.BIT8 ? decoder.readLeftID() : null\n          // The item that was originally to the right of this item.\n          const rightOrigin = (info & binary.BIT7) === binary.BIT7 ? decoder.readRightID() : null\n          const cantCopyParentInfo = (info & (binary.BIT7 | binary.BIT8)) === 0\n          const hasParentYKey = cantCopyParentInfo ? decoder.readParentInfo() : false\n          // If parent = null and neither left nor right are defined, then we know that `parent` is child of `y`\n          // and we read the next string as parentYKey.\n          // It indicates how we store/retrieve parent from `y.share`\n          // @type {string|null}\n          const parentYKey = cantCopyParentInfo && hasParentYKey ? decoder.readString() : null\n\n          const struct = new Item(\n            createID(client, clock),\n            null, // leftd\n            origin, // origin\n            null, // right\n            rightOrigin, // right origin\n            cantCopyParentInfo && !hasParentYKey ? decoder.readLeftID() : (parentYKey !== null ? doc.get(parentYKey) : null), // parent\n            cantCopyParentInfo && (info & binary.BIT6) === binary.BIT6 ? decoder.readString() : null, // parentSub\n            readItemContent(decoder, info) // item content\n          )\n          */\n          refs[i] = struct;\n          clock += struct.length;\n        }\n      }\n    }\n    // console.log('time to read: ', performance.now() - start) // @todo remove\n  }\n  return clientRefs\n};\n\n/**\n * Resume computing structs generated by struct readers.\n *\n * While there is something to do, we integrate structs in this order\n * 1. top element on stack, if stack is not empty\n * 2. next element from current struct reader (if empty, use next struct reader)\n *\n * If struct causally depends on another struct (ref.missing), we put next reader of\n * `ref.id.client` on top of stack.\n *\n * At some point we find a struct that has no causal dependencies,\n * then we start emptying the stack.\n *\n * It is not possible to have circles: i.e. struct1 (from client1) depends on struct2 (from client2)\n * depends on struct3 (from client1). Therefore the max stack size is eqaul to `structReaders.length`.\n *\n * This method is implemented in a way so that we can resume computation if this update\n * causally depends on another update.\n *\n * @param {Transaction} transaction\n * @param {StructStore} store\n * @param {Map<number, { i: number, refs: (GC | Item)[] }>} clientsStructRefs\n * @return { null | { update: Uint8Array, missing: Map<number,number> } }\n *\n * @private\n * @function\n */\nconst integrateStructs = (transaction, store, clientsStructRefs) => {\n  /**\n   * @type {Array<Item | GC>}\n   */\n  const stack = [];\n  // sort them so that we take the higher id first, in case of conflicts the lower id will probably not conflict with the id from the higher user.\n  let clientsStructRefsIds = Array.from(clientsStructRefs.keys()).sort((a, b) => a - b);\n  if (clientsStructRefsIds.length === 0) {\n    return null\n  }\n  const getNextStructTarget = () => {\n    if (clientsStructRefsIds.length === 0) {\n      return null\n    }\n    let nextStructsTarget = /** @type {{i:number,refs:Array<GC|Item>}} */ (clientsStructRefs.get(clientsStructRefsIds[clientsStructRefsIds.length - 1]));\n    while (nextStructsTarget.refs.length === nextStructsTarget.i) {\n      clientsStructRefsIds.pop();\n      if (clientsStructRefsIds.length > 0) {\n        nextStructsTarget = /** @type {{i:number,refs:Array<GC|Item>}} */ (clientsStructRefs.get(clientsStructRefsIds[clientsStructRefsIds.length - 1]));\n      } else {\n        return null\n      }\n    }\n    return nextStructsTarget\n  };\n  let curStructsTarget = getNextStructTarget();\n  if (curStructsTarget === null && stack.length === 0) {\n    return null\n  }\n\n  /**\n   * @type {StructStore}\n   */\n  const restStructs = new StructStore();\n  const missingSV = new Map();\n  /**\n   * @param {number} client\n   * @param {number} clock\n   */\n  const updateMissingSv = (client, clock) => {\n    const mclock = missingSV.get(client);\n    if (mclock == null || mclock > clock) {\n      missingSV.set(client, clock);\n    }\n  };\n  /**\n   * @type {GC|Item}\n   */\n  let stackHead = /** @type {any} */ (curStructsTarget).refs[/** @type {any} */ (curStructsTarget).i++];\n  // caching the state because it is used very often\n  const state = new Map();\n\n  const addStackToRestSS = () => {\n    for (const item of stack) {\n      const client = item.id.client;\n      const unapplicableItems = clientsStructRefs.get(client);\n      if (unapplicableItems) {\n        // decrement because we weren't able to apply previous operation\n        unapplicableItems.i--;\n        restStructs.clients.set(client, unapplicableItems.refs.slice(unapplicableItems.i));\n        clientsStructRefs.delete(client);\n        unapplicableItems.i = 0;\n        unapplicableItems.refs = [];\n      } else {\n        // item was the last item on clientsStructRefs and the field was already cleared. Add item to restStructs and continue\n        restStructs.clients.set(client, [item]);\n      }\n      // remove client from clientsStructRefsIds to prevent users from applying the same update again\n      clientsStructRefsIds = clientsStructRefsIds.filter(c => c !== client);\n    }\n    stack.length = 0;\n  };\n\n  // iterate over all struct readers until we are done\n  while (true) {\n    if (stackHead.constructor !== Skip) {\n      const localClock = map.setIfUndefined(state, stackHead.id.client, () => getState(store, stackHead.id.client));\n      const offset = localClock - stackHead.id.clock;\n      if (offset < 0) {\n        // update from the same client is missing\n        stack.push(stackHead);\n        updateMissingSv(stackHead.id.client, stackHead.id.clock - 1);\n        // hid a dead wall, add all items from stack to restSS\n        addStackToRestSS();\n      } else {\n        const missing = stackHead.getMissing(transaction, store);\n        if (missing !== null) {\n          stack.push(stackHead);\n          // get the struct reader that has the missing struct\n          /**\n           * @type {{ refs: Array<GC|Item>, i: number }}\n           */\n          const structRefs = clientsStructRefs.get(/** @type {number} */ (missing)) || { refs: [], i: 0 };\n          if (structRefs.refs.length === structRefs.i) {\n            // This update message causally depends on another update message that doesn't exist yet\n            updateMissingSv(/** @type {number} */ (missing), getState(store, missing));\n            addStackToRestSS();\n          } else {\n            stackHead = structRefs.refs[structRefs.i++];\n            continue\n          }\n        } else if (offset === 0 || offset < stackHead.length) {\n          // all fine, apply the stackhead\n          stackHead.integrate(transaction, offset);\n          state.set(stackHead.id.client, stackHead.id.clock + stackHead.length);\n        }\n      }\n    }\n    // iterate to next stackHead\n    if (stack.length > 0) {\n      stackHead = /** @type {GC|Item} */ (stack.pop());\n    } else if (curStructsTarget !== null && curStructsTarget.i < curStructsTarget.refs.length) {\n      stackHead = /** @type {GC|Item} */ (curStructsTarget.refs[curStructsTarget.i++]);\n    } else {\n      curStructsTarget = getNextStructTarget();\n      if (curStructsTarget === null) {\n        // we are done!\n        break\n      } else {\n        stackHead = /** @type {GC|Item} */ (curStructsTarget.refs[curStructsTarget.i++]);\n      }\n    }\n  }\n  if (restStructs.clients.size > 0) {\n    const encoder = new UpdateEncoderV2();\n    writeClientsStructs(encoder, restStructs, new Map());\n    // write empty deleteset\n    // writeDeleteSet(encoder, new DeleteSet())\n    encoding.writeVarUint(encoder.restEncoder, 0); // => no need for an extra function call, just write 0 deletes\n    return { missing: missingSV, update: encoder.toUint8Array() }\n  }\n  return null\n};\n\n/**\n * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n * @param {Transaction} transaction\n *\n * @private\n * @function\n */\nconst writeStructsFromTransaction = (encoder, transaction) => writeClientsStructs(encoder, transaction.doc.store, transaction.beforeState);\n\n/**\n * Read and apply a document update.\n *\n * This function has the same effect as `applyUpdate` but accepts an decoder.\n *\n * @param {decoding.Decoder} decoder\n * @param {Doc} ydoc\n * @param {any} [transactionOrigin] This will be stored on `transaction.origin` and `.on('update', (update, origin))`\n * @param {UpdateDecoderV1 | UpdateDecoderV2} [structDecoder]\n *\n * @function\n */\nconst readUpdateV2 = (decoder, ydoc, transactionOrigin, structDecoder = new UpdateDecoderV2(decoder)) =>\n  transact(ydoc, transaction => {\n    // force that transaction.local is set to non-local\n    transaction.local = false;\n    let retry = false;\n    const doc = transaction.doc;\n    const store = doc.store;\n    // let start = performance.now()\n    const ss = readClientsStructRefs(structDecoder, doc);\n    // console.log('time to read structs: ', performance.now() - start) // @todo remove\n    // start = performance.now()\n    // console.log('time to merge: ', performance.now() - start) // @todo remove\n    // start = performance.now()\n    const restStructs = integrateStructs(transaction, store, ss);\n    const pending = store.pendingStructs;\n    if (pending) {\n      // check if we can apply something\n      for (const [client, clock] of pending.missing) {\n        if (clock < getState(store, client)) {\n          retry = true;\n          break\n        }\n      }\n      if (restStructs) {\n        // merge restStructs into store.pending\n        for (const [client, clock] of restStructs.missing) {\n          const mclock = pending.missing.get(client);\n          if (mclock == null || mclock > clock) {\n            pending.missing.set(client, clock);\n          }\n        }\n        pending.update = mergeUpdatesV2([pending.update, restStructs.update]);\n      }\n    } else {\n      store.pendingStructs = restStructs;\n    }\n    // console.log('time to integrate: ', performance.now() - start) // @todo remove\n    // start = performance.now()\n    const dsRest = readAndApplyDeleteSet(structDecoder, transaction, store);\n    if (store.pendingDs) {\n      // @todo we could make a lower-bound state-vector check as we do above\n      const pendingDSUpdate = new UpdateDecoderV2(decoding.createDecoder(store.pendingDs));\n      decoding.readVarUint(pendingDSUpdate.restDecoder); // read 0 structs, because we only encode deletes in pendingdsupdate\n      const dsRest2 = readAndApplyDeleteSet(pendingDSUpdate, transaction, store);\n      if (dsRest && dsRest2) {\n        // case 1: ds1 != null && ds2 != null\n        store.pendingDs = mergeUpdatesV2([dsRest, dsRest2]);\n      } else {\n        // case 2: ds1 != null\n        // case 3: ds2 != null\n        // case 4: ds1 == null && ds2 == null\n        store.pendingDs = dsRest || dsRest2;\n      }\n    } else {\n      // Either dsRest == null && pendingDs == null OR dsRest != null\n      store.pendingDs = dsRest;\n    }\n    // console.log('time to cleanup: ', performance.now() - start) // @todo remove\n    // start = performance.now()\n\n    // console.log('time to resume delete readers: ', performance.now() - start) // @todo remove\n    // start = performance.now()\n    if (retry) {\n      const update = /** @type {{update: Uint8Array}} */ (store.pendingStructs).update;\n      store.pendingStructs = null;\n      applyUpdateV2(transaction.doc, update);\n    }\n  }, transactionOrigin, false);\n\n/**\n * Read and apply a document update.\n *\n * This function has the same effect as `applyUpdate` but accepts an decoder.\n *\n * @param {decoding.Decoder} decoder\n * @param {Doc} ydoc\n * @param {any} [transactionOrigin] This will be stored on `transaction.origin` and `.on('update', (update, origin))`\n *\n * @function\n */\nconst readUpdate = (decoder, ydoc, transactionOrigin) => readUpdateV2(decoder, ydoc, transactionOrigin, new UpdateDecoderV1(decoder));\n\n/**\n * Apply a document update created by, for example, `y.on('update', update => ..)` or `update = encodeStateAsUpdate()`.\n *\n * This function has the same effect as `readUpdate` but accepts an Uint8Array instead of a Decoder.\n *\n * @param {Doc} ydoc\n * @param {Uint8Array} update\n * @param {any} [transactionOrigin] This will be stored on `transaction.origin` and `.on('update', (update, origin))`\n * @param {typeof UpdateDecoderV1 | typeof UpdateDecoderV2} [YDecoder]\n *\n * @function\n */\nconst applyUpdateV2 = (ydoc, update, transactionOrigin, YDecoder = UpdateDecoderV2) => {\n  const decoder = decoding.createDecoder(update);\n  readUpdateV2(decoder, ydoc, transactionOrigin, new YDecoder(decoder));\n};\n\n/**\n * Apply a document update created by, for example, `y.on('update', update => ..)` or `update = encodeStateAsUpdate()`.\n *\n * This function has the same effect as `readUpdate` but accepts an Uint8Array instead of a Decoder.\n *\n * @param {Doc} ydoc\n * @param {Uint8Array} update\n * @param {any} [transactionOrigin] This will be stored on `transaction.origin` and `.on('update', (update, origin))`\n *\n * @function\n */\nconst applyUpdate = (ydoc, update, transactionOrigin) => applyUpdateV2(ydoc, update, transactionOrigin, UpdateDecoderV1);\n\n/**\n * Write all the document as a single update message. If you specify the state of the remote client (`targetStateVector`) it will\n * only write the operations that are missing.\n *\n * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n * @param {Doc} doc\n * @param {Map<number,number>} [targetStateVector] The state of the target that receives the update. Leave empty to write all known structs\n *\n * @function\n */\nconst writeStateAsUpdate = (encoder, doc, targetStateVector = new Map()) => {\n  writeClientsStructs(encoder, doc.store, targetStateVector);\n  writeDeleteSet(encoder, createDeleteSetFromStructStore(doc.store));\n};\n\n/**\n * Write all the document as a single update message that can be applied on the remote document. If you specify the state of the remote client (`targetState`) it will\n * only write the operations that are missing.\n *\n * Use `writeStateAsUpdate` instead if you are working with lib0/encoding.js#Encoder\n *\n * @param {Doc} doc\n * @param {Uint8Array} [encodedTargetStateVector] The state of the target that receives the update. Leave empty to write all known structs\n * @param {UpdateEncoderV1 | UpdateEncoderV2} [encoder]\n * @return {Uint8Array}\n *\n * @function\n */\nconst encodeStateAsUpdateV2 = (doc, encodedTargetStateVector = new Uint8Array([0]), encoder = new UpdateEncoderV2()) => {\n  const targetStateVector = decodeStateVector(encodedTargetStateVector);\n  writeStateAsUpdate(encoder, doc, targetStateVector);\n  const updates = [encoder.toUint8Array()];\n  // also add the pending updates (if there are any)\n  if (doc.store.pendingDs) {\n    updates.push(doc.store.pendingDs);\n  }\n  if (doc.store.pendingStructs) {\n    updates.push(diffUpdateV2(doc.store.pendingStructs.update, encodedTargetStateVector));\n  }\n  if (updates.length > 1) {\n    if (encoder.constructor === UpdateEncoderV1) {\n      return mergeUpdates(updates.map((update, i) => i === 0 ? update : convertUpdateFormatV2ToV1(update)))\n    } else if (encoder.constructor === UpdateEncoderV2) {\n      return mergeUpdatesV2(updates)\n    }\n  }\n  return updates[0]\n};\n\n/**\n * Write all the document as a single update message that can be applied on the remote document. If you specify the state of the remote client (`targetState`) it will\n * only write the operations that are missing.\n *\n * Use `writeStateAsUpdate` instead if you are working with lib0/encoding.js#Encoder\n *\n * @param {Doc} doc\n * @param {Uint8Array} [encodedTargetStateVector] The state of the target that receives the update. Leave empty to write all known structs\n * @return {Uint8Array}\n *\n * @function\n */\nconst encodeStateAsUpdate = (doc, encodedTargetStateVector) => encodeStateAsUpdateV2(doc, encodedTargetStateVector, new UpdateEncoderV1());\n\n/**\n * Read state vector from Decoder and return as Map\n *\n * @param {DSDecoderV1 | DSDecoderV2} decoder\n * @return {Map<number,number>} Maps `client` to the number next expected `clock` from that client.\n *\n * @function\n */\nconst readStateVector = decoder => {\n  const ss = new Map();\n  const ssLength = decoding.readVarUint(decoder.restDecoder);\n  for (let i = 0; i < ssLength; i++) {\n    const client = decoding.readVarUint(decoder.restDecoder);\n    const clock = decoding.readVarUint(decoder.restDecoder);\n    ss.set(client, clock);\n  }\n  return ss\n};\n\n/**\n * Read decodedState and return State as Map.\n *\n * @param {Uint8Array} decodedState\n * @return {Map<number,number>} Maps `client` to the number next expected `clock` from that client.\n *\n * @function\n */\n// export const decodeStateVectorV2 = decodedState => readStateVector(new DSDecoderV2(decoding.createDecoder(decodedState)))\n\n/**\n * Read decodedState and return State as Map.\n *\n * @param {Uint8Array} decodedState\n * @return {Map<number,number>} Maps `client` to the number next expected `clock` from that client.\n *\n * @function\n */\nconst decodeStateVector = decodedState => readStateVector(new DSDecoderV1(decoding.createDecoder(decodedState)));\n\n/**\n * @param {DSEncoderV1 | DSEncoderV2} encoder\n * @param {Map<number,number>} sv\n * @function\n */\nconst writeStateVector = (encoder, sv) => {\n  encoding.writeVarUint(encoder.restEncoder, sv.size);\n  sv.forEach((clock, client) => {\n    encoding.writeVarUint(encoder.restEncoder, client); // @todo use a special client decoder that is based on mapping\n    encoding.writeVarUint(encoder.restEncoder, clock);\n  });\n  return encoder\n};\n\n/**\n * @param {DSEncoderV1 | DSEncoderV2} encoder\n * @param {Doc} doc\n *\n * @function\n */\nconst writeDocumentStateVector = (encoder, doc) => writeStateVector(encoder, getStateVector(doc.store));\n\n/**\n * Encode State as Uint8Array.\n *\n * @param {Doc|Map<number,number>} doc\n * @param {DSEncoderV1 | DSEncoderV2} [encoder]\n * @return {Uint8Array}\n *\n * @function\n */\nconst encodeStateVectorV2 = (doc, encoder = new DSEncoderV2()) => {\n  if (doc instanceof Map) {\n    writeStateVector(encoder, doc);\n  } else {\n    writeDocumentStateVector(encoder, doc);\n  }\n  return encoder.toUint8Array()\n};\n\n/**\n * Encode State as Uint8Array.\n *\n * @param {Doc|Map<number,number>} doc\n * @return {Uint8Array}\n *\n * @function\n */\nconst encodeStateVector = doc => encodeStateVectorV2(doc, new DSEncoderV1());\n\n/**\n * General event handler implementation.\n *\n * @template ARG0, ARG1\n *\n * @private\n */\nclass EventHandler {\n  constructor () {\n    /**\n     * @type {Array<function(ARG0, ARG1):void>}\n     */\n    this.l = [];\n  }\n}\n\n/**\n * @template ARG0,ARG1\n * @returns {EventHandler<ARG0,ARG1>}\n *\n * @private\n * @function\n */\nconst createEventHandler = () => new EventHandler();\n\n/**\n * Adds an event listener that is called when\n * {@link EventHandler#callEventListeners} is called.\n *\n * @template ARG0,ARG1\n * @param {EventHandler<ARG0,ARG1>} eventHandler\n * @param {function(ARG0,ARG1):void} f The event handler.\n *\n * @private\n * @function\n */\nconst addEventHandlerListener = (eventHandler, f) =>\n  eventHandler.l.push(f);\n\n/**\n * Removes an event listener.\n *\n * @template ARG0,ARG1\n * @param {EventHandler<ARG0,ARG1>} eventHandler\n * @param {function(ARG0,ARG1):void} f The event handler that was added with\n *                     {@link EventHandler#addEventListener}\n *\n * @private\n * @function\n */\nconst removeEventHandlerListener = (eventHandler, f) => {\n  const l = eventHandler.l;\n  const len = l.length;\n  eventHandler.l = l.filter(g => f !== g);\n  if (len === eventHandler.l.length) {\n    console.error('[yjs] Tried to remove event handler that doesn\\'t exist.');\n  }\n};\n\n/**\n * Call all event listeners that were added via\n * {@link EventHandler#addEventListener}.\n *\n * @template ARG0,ARG1\n * @param {EventHandler<ARG0,ARG1>} eventHandler\n * @param {ARG0} arg0\n * @param {ARG1} arg1\n *\n * @private\n * @function\n */\nconst callEventHandlerListeners = (eventHandler, arg0, arg1) =>\n  f.callAll(eventHandler.l, [arg0, arg1]);\n\nclass ID {\n  /**\n   * @param {number} client client id\n   * @param {number} clock unique per client id, continuous number\n   */\n  constructor (client, clock) {\n    /**\n     * Client id\n     * @type {number}\n     */\n    this.client = client;\n    /**\n     * unique per client id, continuous number\n     * @type {number}\n     */\n    this.clock = clock;\n  }\n}\n\n/**\n * @param {ID | null} a\n * @param {ID | null} b\n * @return {boolean}\n *\n * @function\n */\nconst compareIDs = (a, b) => a === b || (a !== null && b !== null && a.client === b.client && a.clock === b.clock);\n\n/**\n * @param {number} client\n * @param {number} clock\n *\n * @private\n * @function\n */\nconst createID = (client, clock) => new ID(client, clock);\n\n/**\n * @param {encoding.Encoder} encoder\n * @param {ID} id\n *\n * @private\n * @function\n */\nconst writeID = (encoder, id) => {\n  encoding.writeVarUint(encoder, id.client);\n  encoding.writeVarUint(encoder, id.clock);\n};\n\n/**\n * Read ID.\n * * If first varUint read is 0xFFFFFF a RootID is returned.\n * * Otherwise an ID is returned\n *\n * @param {decoding.Decoder} decoder\n * @return {ID}\n *\n * @private\n * @function\n */\nconst readID = decoder =>\n  createID(decoding.readVarUint(decoder), decoding.readVarUint(decoder));\n\n/**\n * The top types are mapped from y.share.get(keyname) => type.\n * `type` does not store any information about the `keyname`.\n * This function finds the correct `keyname` for `type` and throws otherwise.\n *\n * @param {AbstractType<any>} type\n * @return {string}\n *\n * @private\n * @function\n */\nconst findRootTypeKey = type => {\n  // @ts-ignore _y must be defined, otherwise unexpected case\n  for (const [key, value] of type.doc.share.entries()) {\n    if (value === type) {\n      return key\n    }\n  }\n  throw error.unexpectedCase()\n};\n\n/**\n * Check if `parent` is a parent of `child`.\n *\n * @param {AbstractType<any>} parent\n * @param {Item|null} child\n * @return {Boolean} Whether `parent` is a parent of `child`.\n *\n * @private\n * @function\n */\nconst isParentOf = (parent, child) => {\n  while (child !== null) {\n    if (child.parent === parent) {\n      return true\n    }\n    child = /** @type {AbstractType<any>} */ (child.parent)._item;\n  }\n  return false\n};\n\n/**\n * Convenient helper to log type information.\n *\n * Do not use in productive systems as the output can be immense!\n *\n * @param {AbstractType<any>} type\n */\nconst logType = type => {\n  const res = [];\n  let n = type._start;\n  while (n) {\n    res.push(n);\n    n = n.right;\n  }\n  console.log('Children: ', res);\n  console.log('Children content: ', res.filter(m => !m.deleted).map(m => m.content));\n};\n\nclass PermanentUserData {\n  /**\n   * @param {Doc} doc\n   * @param {YMap<any>} [storeType]\n   */\n  constructor (doc, storeType = doc.getMap('users')) {\n    /**\n     * @type {Map<string,DeleteSet>}\n     */\n    const dss = new Map();\n    this.yusers = storeType;\n    this.doc = doc;\n    /**\n     * Maps from clientid to userDescription\n     *\n     * @type {Map<number,string>}\n     */\n    this.clients = new Map();\n    this.dss = dss;\n    /**\n     * @param {YMap<any>} user\n     * @param {string} userDescription\n     */\n    const initUser = (user, userDescription) => {\n      /**\n       * @type {YArray<Uint8Array>}\n       */\n      const ds = user.get('ds');\n      const ids = user.get('ids');\n      const addClientId = /** @param {number} clientid */ clientid => this.clients.set(clientid, userDescription);\n      ds.observe(/** @param {YArrayEvent<any>} event */ event => {\n        event.changes.added.forEach(item => {\n          item.content.getContent().forEach(encodedDs => {\n            if (encodedDs instanceof Uint8Array) {\n              this.dss.set(userDescription, mergeDeleteSets([this.dss.get(userDescription) || createDeleteSet(), readDeleteSet(new DSDecoderV1(decoding.createDecoder(encodedDs)))]));\n            }\n          });\n        });\n      });\n      this.dss.set(userDescription, mergeDeleteSets(ds.map(encodedDs => readDeleteSet(new DSDecoderV1(decoding.createDecoder(encodedDs))))));\n      ids.observe(/** @param {YArrayEvent<any>} event */ event =>\n        event.changes.added.forEach(item => item.content.getContent().forEach(addClientId))\n      );\n      ids.forEach(addClientId);\n    };\n    // observe users\n    storeType.observe(event => {\n      event.keysChanged.forEach(userDescription =>\n        initUser(storeType.get(userDescription), userDescription)\n      );\n    });\n    // add intial data\n    storeType.forEach(initUser);\n  }\n\n  /**\n   * @param {Doc} doc\n   * @param {number} clientid\n   * @param {string} userDescription\n   * @param {Object} [conf]\n   * @param {function(Transaction, DeleteSet):boolean} [conf.filter]\n   */\n  setUserMapping (doc, clientid, userDescription, { filter = () => true } = {}) {\n    const users = this.yusers;\n    let user = users.get(userDescription);\n    if (!user) {\n      user = new YMap();\n      user.set('ids', new YArray());\n      user.set('ds', new YArray());\n      users.set(userDescription, user);\n    }\n    user.get('ids').push([clientid]);\n    users.observe(event => {\n      setTimeout(() => {\n        const userOverwrite = users.get(userDescription);\n        if (userOverwrite !== user) {\n          // user was overwritten, port all data over to the next user object\n          // @todo Experiment with Y.Sets here\n          user = userOverwrite;\n          // @todo iterate over old type\n          this.clients.forEach((_userDescription, clientid) => {\n            if (userDescription === _userDescription) {\n              user.get('ids').push([clientid]);\n            }\n          });\n          const encoder = new DSEncoderV1();\n          const ds = this.dss.get(userDescription);\n          if (ds) {\n            writeDeleteSet(encoder, ds);\n            user.get('ds').push([encoder.toUint8Array()]);\n          }\n        }\n      }, 0);\n    });\n    doc.on('afterTransaction', /** @param {Transaction} transaction */ transaction => {\n      setTimeout(() => {\n        const yds = user.get('ds');\n        const ds = transaction.deleteSet;\n        if (transaction.local && ds.clients.size > 0 && filter(transaction, ds)) {\n          const encoder = new DSEncoderV1();\n          writeDeleteSet(encoder, ds);\n          yds.push([encoder.toUint8Array()]);\n        }\n      });\n    });\n  }\n\n  /**\n   * @param {number} clientid\n   * @return {any}\n   */\n  getUserByClientId (clientid) {\n    return this.clients.get(clientid) || null\n  }\n\n  /**\n   * @param {ID} id\n   * @return {string | null}\n   */\n  getUserByDeletedId (id) {\n    for (const [userDescription, ds] of this.dss.entries()) {\n      if (isDeleted(ds, id)) {\n        return userDescription\n      }\n    }\n    return null\n  }\n}\n\n/**\n * A relative position is based on the Yjs model and is not affected by document changes.\n * E.g. If you place a relative position before a certain character, it will always point to this character.\n * If you place a relative position at the end of a type, it will always point to the end of the type.\n *\n * A numeric position is often unsuited for user selections, because it does not change when content is inserted\n * before or after.\n *\n * ```Insert(0, 'x')('a|bc') = 'xa|bc'``` Where | is the relative position.\n *\n * One of the properties must be defined.\n *\n * @example\n *   // Current cursor position is at position 10\n *   const relativePosition = createRelativePositionFromIndex(yText, 10)\n *   // modify yText\n *   yText.insert(0, 'abc')\n *   yText.delete(3, 10)\n *   // Compute the cursor position\n *   const absolutePosition = createAbsolutePositionFromRelativePosition(y, relativePosition)\n *   absolutePosition.type === yText // => true\n *   console.log('cursor location is ' + absolutePosition.index) // => cursor location is 3\n *\n */\nclass RelativePosition {\n  /**\n   * @param {ID|null} type\n   * @param {string|null} tname\n   * @param {ID|null} item\n   * @param {number} assoc\n   */\n  constructor (type, tname, item, assoc = 0) {\n    /**\n     * @type {ID|null}\n     */\n    this.type = type;\n    /**\n     * @type {string|null}\n     */\n    this.tname = tname;\n    /**\n     * @type {ID | null}\n     */\n    this.item = item;\n    /**\n     * A relative position is associated to a specific character. By default\n     * assoc >= 0, the relative position is associated to the character\n     * after the meant position.\n     * I.e. position 1 in 'ab' is associated to character 'b'.\n     *\n     * If assoc < 0, then the relative position is associated to the caharacter\n     * before the meant position.\n     *\n     * @type {number}\n     */\n    this.assoc = assoc;\n  }\n}\n\n/**\n * @param {RelativePosition} rpos\n * @return {any}\n */\nconst relativePositionToJSON = rpos => {\n  const json = {};\n  if (rpos.type) {\n    json.type = rpos.type;\n  }\n  if (rpos.tname) {\n    json.tname = rpos.tname;\n  }\n  if (rpos.item) {\n    json.item = rpos.item;\n  }\n  if (rpos.assoc != null) {\n    json.assoc = rpos.assoc;\n  }\n  return json\n};\n\n/**\n * @param {any} json\n * @return {RelativePosition}\n *\n * @function\n */\nconst createRelativePositionFromJSON = json => new RelativePosition(json.type == null ? null : createID(json.type.client, json.type.clock), json.tname || null, json.item == null ? null : createID(json.item.client, json.item.clock), json.assoc == null ? 0 : json.assoc);\n\nclass AbsolutePosition {\n  /**\n   * @param {AbstractType<any>} type\n   * @param {number} index\n   * @param {number} [assoc]\n   */\n  constructor (type, index, assoc = 0) {\n    /**\n     * @type {AbstractType<any>}\n     */\n    this.type = type;\n    /**\n     * @type {number}\n     */\n    this.index = index;\n    this.assoc = assoc;\n  }\n}\n\n/**\n * @param {AbstractType<any>} type\n * @param {number} index\n * @param {number} [assoc]\n *\n * @function\n */\nconst createAbsolutePosition = (type, index, assoc = 0) => new AbsolutePosition(type, index, assoc);\n\n/**\n * @param {AbstractType<any>} type\n * @param {ID|null} item\n * @param {number} [assoc]\n *\n * @function\n */\nconst createRelativePosition = (type, item, assoc) => {\n  let typeid = null;\n  let tname = null;\n  if (type._item === null) {\n    tname = findRootTypeKey(type);\n  } else {\n    typeid = createID(type._item.id.client, type._item.id.clock);\n  }\n  return new RelativePosition(typeid, tname, item, assoc)\n};\n\n/**\n * Create a relativePosition based on a absolute position.\n *\n * @param {AbstractType<any>} type The base type (e.g. YText or YArray).\n * @param {number} index The absolute position.\n * @param {number} [assoc]\n * @return {RelativePosition}\n *\n * @function\n */\nconst createRelativePositionFromTypeIndex = (type, index, assoc = 0) => {\n  let t = type._start;\n  if (assoc < 0) {\n    // associated to the left character or the beginning of a type, increment index if possible.\n    if (index === 0) {\n      return createRelativePosition(type, null, assoc)\n    }\n    index--;\n  }\n  while (t !== null) {\n    if (!t.deleted && t.countable) {\n      if (t.length > index) {\n        // case 1: found position somewhere in the linked list\n        return createRelativePosition(type, createID(t.id.client, t.id.clock + index), assoc)\n      }\n      index -= t.length;\n    }\n    if (t.right === null && assoc < 0) {\n      // left-associated position, return last available id\n      return createRelativePosition(type, t.lastId, assoc)\n    }\n    t = t.right;\n  }\n  return createRelativePosition(type, null, assoc)\n};\n\n/**\n * @param {encoding.Encoder} encoder\n * @param {RelativePosition} rpos\n *\n * @function\n */\nconst writeRelativePosition = (encoder, rpos) => {\n  const { type, tname, item, assoc } = rpos;\n  if (item !== null) {\n    encoding.writeVarUint(encoder, 0);\n    writeID(encoder, item);\n  } else if (tname !== null) {\n    // case 2: found position at the end of the list and type is stored in y.share\n    encoding.writeUint8(encoder, 1);\n    encoding.writeVarString(encoder, tname);\n  } else if (type !== null) {\n    // case 3: found position at the end of the list and type is attached to an item\n    encoding.writeUint8(encoder, 2);\n    writeID(encoder, type);\n  } else {\n    throw error.unexpectedCase()\n  }\n  encoding.writeVarInt(encoder, assoc);\n  return encoder\n};\n\n/**\n * @param {RelativePosition} rpos\n * @return {Uint8Array}\n */\nconst encodeRelativePosition = rpos => {\n  const encoder = encoding.createEncoder();\n  writeRelativePosition(encoder, rpos);\n  return encoding.toUint8Array(encoder)\n};\n\n/**\n * @param {decoding.Decoder} decoder\n * @return {RelativePosition}\n *\n * @function\n */\nconst readRelativePosition = decoder => {\n  let type = null;\n  let tname = null;\n  let itemID = null;\n  switch (decoding.readVarUint(decoder)) {\n    case 0:\n      // case 1: found position somewhere in the linked list\n      itemID = readID(decoder);\n      break\n    case 1:\n      // case 2: found position at the end of the list and type is stored in y.share\n      tname = decoding.readVarString(decoder);\n      break\n    case 2: {\n      // case 3: found position at the end of the list and type is attached to an item\n      type = readID(decoder);\n    }\n  }\n  const assoc = decoding.hasContent(decoder) ? decoding.readVarInt(decoder) : 0;\n  return new RelativePosition(type, tname, itemID, assoc)\n};\n\n/**\n * @param {Uint8Array} uint8Array\n * @return {RelativePosition}\n */\nconst decodeRelativePosition = uint8Array => readRelativePosition(decoding.createDecoder(uint8Array));\n\n/**\n * @param {RelativePosition} rpos\n * @param {Doc} doc\n * @return {AbsolutePosition|null}\n *\n * @function\n */\nconst createAbsolutePositionFromRelativePosition = (rpos, doc) => {\n  const store = doc.store;\n  const rightID = rpos.item;\n  const typeID = rpos.type;\n  const tname = rpos.tname;\n  const assoc = rpos.assoc;\n  let type = null;\n  let index = 0;\n  if (rightID !== null) {\n    if (getState(store, rightID.client) <= rightID.clock) {\n      return null\n    }\n    const res = followRedone(store, rightID);\n    const right = res.item;\n    if (!(right instanceof Item)) {\n      return null\n    }\n    type = /** @type {AbstractType<any>} */ (right.parent);\n    if (type._item === null || !type._item.deleted) {\n      index = (right.deleted || !right.countable) ? 0 : (res.diff + (assoc >= 0 ? 0 : 1)); // adjust position based on left association if necessary\n      let n = right.left;\n      while (n !== null) {\n        if (!n.deleted && n.countable) {\n          index += n.length;\n        }\n        n = n.left;\n      }\n    }\n  } else {\n    if (tname !== null) {\n      type = doc.get(tname);\n    } else if (typeID !== null) {\n      if (getState(store, typeID.client) <= typeID.clock) {\n        // type does not exist yet\n        return null\n      }\n      const { item } = followRedone(store, typeID);\n      if (item instanceof Item && item.content instanceof ContentType) {\n        type = item.content.type;\n      } else {\n        // struct is garbage collected\n        return null\n      }\n    } else {\n      throw error.unexpectedCase()\n    }\n    if (assoc >= 0) {\n      index = type._length;\n    } else {\n      index = 0;\n    }\n  }\n  return createAbsolutePosition(type, index, rpos.assoc)\n};\n\n/**\n * @param {RelativePosition|null} a\n * @param {RelativePosition|null} b\n * @return {boolean}\n *\n * @function\n */\nconst compareRelativePositions = (a, b) => a === b || (\n  a !== null && b !== null && a.tname === b.tname && compareIDs(a.item, b.item) && compareIDs(a.type, b.type) && a.assoc === b.assoc\n);\n\nclass Snapshot {\n  /**\n   * @param {DeleteSet} ds\n   * @param {Map<number,number>} sv state map\n   */\n  constructor (ds, sv) {\n    /**\n     * @type {DeleteSet}\n     */\n    this.ds = ds;\n    /**\n     * State Map\n     * @type {Map<number,number>}\n     */\n    this.sv = sv;\n  }\n}\n\n/**\n * @param {Snapshot} snap1\n * @param {Snapshot} snap2\n * @return {boolean}\n */\nconst equalSnapshots = (snap1, snap2) => {\n  const ds1 = snap1.ds.clients;\n  const ds2 = snap2.ds.clients;\n  const sv1 = snap1.sv;\n  const sv2 = snap2.sv;\n  if (sv1.size !== sv2.size || ds1.size !== ds2.size) {\n    return false\n  }\n  for (const [key, value] of sv1.entries()) {\n    if (sv2.get(key) !== value) {\n      return false\n    }\n  }\n  for (const [client, dsitems1] of ds1.entries()) {\n    const dsitems2 = ds2.get(client) || [];\n    if (dsitems1.length !== dsitems2.length) {\n      return false\n    }\n    for (let i = 0; i < dsitems1.length; i++) {\n      const dsitem1 = dsitems1[i];\n      const dsitem2 = dsitems2[i];\n      if (dsitem1.clock !== dsitem2.clock || dsitem1.len !== dsitem2.len) {\n        return false\n      }\n    }\n  }\n  return true\n};\n\n/**\n * @param {Snapshot} snapshot\n * @param {DSEncoderV1 | DSEncoderV2} [encoder]\n * @return {Uint8Array}\n */\nconst encodeSnapshotV2 = (snapshot, encoder = new DSEncoderV2()) => {\n  writeDeleteSet(encoder, snapshot.ds);\n  writeStateVector(encoder, snapshot.sv);\n  return encoder.toUint8Array()\n};\n\n/**\n * @param {Snapshot} snapshot\n * @return {Uint8Array}\n */\nconst encodeSnapshot = snapshot => encodeSnapshotV2(snapshot, new DSEncoderV1());\n\n/**\n * @param {Uint8Array} buf\n * @param {DSDecoderV1 | DSDecoderV2} [decoder]\n * @return {Snapshot}\n */\nconst decodeSnapshotV2 = (buf, decoder = new DSDecoderV2(decoding.createDecoder(buf))) => {\n  return new Snapshot(readDeleteSet(decoder), readStateVector(decoder))\n};\n\n/**\n * @param {Uint8Array} buf\n * @return {Snapshot}\n */\nconst decodeSnapshot = buf => decodeSnapshotV2(buf, new DSDecoderV1(decoding.createDecoder(buf)));\n\n/**\n * @param {DeleteSet} ds\n * @param {Map<number,number>} sm\n * @return {Snapshot}\n */\nconst createSnapshot = (ds, sm) => new Snapshot(ds, sm);\n\nconst emptySnapshot = createSnapshot(createDeleteSet(), new Map());\n\n/**\n * @param {Doc} doc\n * @return {Snapshot}\n */\nconst snapshot = doc => createSnapshot(createDeleteSetFromStructStore(doc.store), getStateVector(doc.store));\n\n/**\n * @param {Item} item\n * @param {Snapshot|undefined} snapshot\n *\n * @protected\n * @function\n */\nconst isVisible = (item, snapshot) => snapshot === undefined ? !item.deleted : (\n  snapshot.sv.has(item.id.client) && (snapshot.sv.get(item.id.client) || 0) > item.id.clock && !isDeleted(snapshot.ds, item.id)\n);\n\n/**\n * @param {Transaction} transaction\n * @param {Snapshot} snapshot\n */\nconst splitSnapshotAffectedStructs = (transaction, snapshot) => {\n  const meta = map.setIfUndefined(transaction.meta, splitSnapshotAffectedStructs, set.create);\n  const store = transaction.doc.store;\n  // check if we already split for this snapshot\n  if (!meta.has(snapshot)) {\n    snapshot.sv.forEach((clock, client) => {\n      if (clock < getState(store, client)) {\n        getItemCleanStart(transaction, createID(client, clock));\n      }\n    });\n    iterateDeletedStructs(transaction, snapshot.ds, item => {});\n    meta.add(snapshot);\n  }\n};\n\n/**\n * @param {Doc} originDoc\n * @param {Snapshot} snapshot\n * @param {Doc} [newDoc] Optionally, you may define the Yjs document that receives the data from originDoc\n * @return {Doc}\n */\nconst createDocFromSnapshot = (originDoc, snapshot, newDoc = new Doc()) => {\n  if (originDoc.gc) {\n    // we should not try to restore a GC-ed document, because some of the restored items might have their content deleted\n    throw new Error('originDoc must not be garbage collected')\n  }\n  const { sv, ds } = snapshot;\n\n  const encoder = new UpdateEncoderV2();\n  originDoc.transact(transaction => {\n    let size = 0;\n    sv.forEach(clock => {\n      if (clock > 0) {\n        size++;\n      }\n    });\n    encoding.writeVarUint(encoder.restEncoder, size);\n    // splitting the structs before writing them to the encoder\n    for (const [client, clock] of sv) {\n      if (clock === 0) {\n        continue\n      }\n      if (clock < getState(originDoc.store, client)) {\n        getItemCleanStart(transaction, createID(client, clock));\n      }\n      const structs = originDoc.store.clients.get(client) || [];\n      const lastStructIndex = findIndexSS(structs, clock - 1);\n      // write # encoded structs\n      encoding.writeVarUint(encoder.restEncoder, lastStructIndex + 1);\n      encoder.writeClient(client);\n      // first clock written is 0\n      encoding.writeVarUint(encoder.restEncoder, 0);\n      for (let i = 0; i <= lastStructIndex; i++) {\n        structs[i].write(encoder, 0);\n      }\n    }\n    writeDeleteSet(encoder, ds);\n  });\n\n  applyUpdateV2(newDoc, encoder.toUint8Array(), 'snapshot');\n  return newDoc\n};\n\nclass StructStore {\n  constructor () {\n    /**\n     * @type {Map<number,Array<GC|Item>>}\n     */\n    this.clients = new Map();\n    /**\n     * @type {null | { missing: Map<number, number>, update: Uint8Array }}\n     */\n    this.pendingStructs = null;\n    /**\n     * @type {null | Uint8Array}\n     */\n    this.pendingDs = null;\n  }\n}\n\n/**\n * Return the states as a Map<client,clock>.\n * Note that clock refers to the next expected clock id.\n *\n * @param {StructStore} store\n * @return {Map<number,number>}\n *\n * @public\n * @function\n */\nconst getStateVector = store => {\n  const sm = new Map();\n  store.clients.forEach((structs, client) => {\n    const struct = structs[structs.length - 1];\n    sm.set(client, struct.id.clock + struct.length);\n  });\n  return sm\n};\n\n/**\n * @param {StructStore} store\n * @param {number} client\n * @return {number}\n *\n * @public\n * @function\n */\nconst getState = (store, client) => {\n  const structs = store.clients.get(client);\n  if (structs === undefined) {\n    return 0\n  }\n  const lastStruct = structs[structs.length - 1];\n  return lastStruct.id.clock + lastStruct.length\n};\n\n/**\n * @param {StructStore} store\n * @param {GC|Item} struct\n *\n * @private\n * @function\n */\nconst addStruct = (store, struct) => {\n  let structs = store.clients.get(struct.id.client);\n  if (structs === undefined) {\n    structs = [];\n    store.clients.set(struct.id.client, structs);\n  } else {\n    const lastStruct = structs[structs.length - 1];\n    if (lastStruct.id.clock + lastStruct.length !== struct.id.clock) {\n      throw error.unexpectedCase()\n    }\n  }\n  structs.push(struct);\n};\n\n/**\n * Perform a binary search on a sorted array\n * @param {Array<Item|GC>} structs\n * @param {number} clock\n * @return {number}\n *\n * @private\n * @function\n */\nconst findIndexSS = (structs, clock) => {\n  let left = 0;\n  let right = structs.length - 1;\n  let mid = structs[right];\n  let midclock = mid.id.clock;\n  if (midclock === clock) {\n    return right\n  }\n  // @todo does it even make sense to pivot the search?\n  // If a good split misses, it might actually increase the time to find the correct item.\n  // Currently, the only advantage is that search with pivoting might find the item on the first try.\n  let midindex = math.floor((clock / (midclock + mid.length - 1)) * right); // pivoting the search\n  while (left <= right) {\n    mid = structs[midindex];\n    midclock = mid.id.clock;\n    if (midclock <= clock) {\n      if (clock < midclock + mid.length) {\n        return midindex\n      }\n      left = midindex + 1;\n    } else {\n      right = midindex - 1;\n    }\n    midindex = math.floor((left + right) / 2);\n  }\n  // Always check state before looking for a struct in StructStore\n  // Therefore the case of not finding a struct is unexpected\n  throw error.unexpectedCase()\n};\n\n/**\n * Expects that id is actually in store. This function throws or is an infinite loop otherwise.\n *\n * @param {StructStore} store\n * @param {ID} id\n * @return {GC|Item}\n *\n * @private\n * @function\n */\nconst find = (store, id) => {\n  /**\n   * @type {Array<GC|Item>}\n   */\n  // @ts-ignore\n  const structs = store.clients.get(id.client);\n  return structs[findIndexSS(structs, id.clock)]\n};\n\n/**\n * Expects that id is actually in store. This function throws or is an infinite loop otherwise.\n * @private\n * @function\n */\nconst getItem = /** @type {function(StructStore,ID):Item} */ (find);\n\n/**\n * @param {Transaction} transaction\n * @param {Array<Item|GC>} structs\n * @param {number} clock\n */\nconst findIndexCleanStart = (transaction, structs, clock) => {\n  const index = findIndexSS(structs, clock);\n  const struct = structs[index];\n  if (struct.id.clock < clock && struct instanceof Item) {\n    structs.splice(index + 1, 0, splitItem(transaction, struct, clock - struct.id.clock));\n    return index + 1\n  }\n  return index\n};\n\n/**\n * Expects that id is actually in store. This function throws or is an infinite loop otherwise.\n *\n * @param {Transaction} transaction\n * @param {ID} id\n * @return {Item}\n *\n * @private\n * @function\n */\nconst getItemCleanStart = (transaction, id) => {\n  const structs = /** @type {Array<Item>} */ (transaction.doc.store.clients.get(id.client));\n  return structs[findIndexCleanStart(transaction, structs, id.clock)]\n};\n\n/**\n * Expects that id is actually in store. This function throws or is an infinite loop otherwise.\n *\n * @param {Transaction} transaction\n * @param {StructStore} store\n * @param {ID} id\n * @return {Item}\n *\n * @private\n * @function\n */\nconst getItemCleanEnd = (transaction, store, id) => {\n  /**\n   * @type {Array<Item>}\n   */\n  // @ts-ignore\n  const structs = store.clients.get(id.client);\n  const index = findIndexSS(structs, id.clock);\n  const struct = structs[index];\n  if (id.clock !== struct.id.clock + struct.length - 1 && struct.constructor !== GC) {\n    structs.splice(index + 1, 0, splitItem(transaction, struct, id.clock - struct.id.clock + 1));\n  }\n  return struct\n};\n\n/**\n * Replace `item` with `newitem` in store\n * @param {StructStore} store\n * @param {GC|Item} struct\n * @param {GC|Item} newStruct\n *\n * @private\n * @function\n */\nconst replaceStruct = (store, struct, newStruct) => {\n  const structs = /** @type {Array<GC|Item>} */ (store.clients.get(struct.id.client));\n  structs[findIndexSS(structs, struct.id.clock)] = newStruct;\n};\n\n/**\n * Iterate over a range of structs\n *\n * @param {Transaction} transaction\n * @param {Array<Item|GC>} structs\n * @param {number} clockStart Inclusive start\n * @param {number} len\n * @param {function(GC|Item):void} f\n *\n * @function\n */\nconst iterateStructs = (transaction, structs, clockStart, len, f) => {\n  if (len === 0) {\n    return\n  }\n  const clockEnd = clockStart + len;\n  let index = findIndexCleanStart(transaction, structs, clockStart);\n  let struct;\n  do {\n    struct = structs[index++];\n    if (clockEnd < struct.id.clock + struct.length) {\n      findIndexCleanStart(transaction, structs, clockEnd);\n    }\n    f(struct);\n  } while (index < structs.length && structs[index].id.clock < clockEnd)\n};\n\n/**\n * A transaction is created for every change on the Yjs model. It is possible\n * to bundle changes on the Yjs model in a single transaction to\n * minimize the number on messages sent and the number of observer calls.\n * If possible the user of this library should bundle as many changes as\n * possible. Here is an example to illustrate the advantages of bundling:\n *\n * @example\n * const map = y.define('map', YMap)\n * // Log content when change is triggered\n * map.observe(() => {\n *   console.log('change triggered')\n * })\n * // Each change on the map type triggers a log message:\n * map.set('a', 0) // => \"change triggered\"\n * map.set('b', 0) // => \"change triggered\"\n * // When put in a transaction, it will trigger the log after the transaction:\n * y.transact(() => {\n *   map.set('a', 1)\n *   map.set('b', 1)\n * }) // => \"change triggered\"\n *\n * @public\n */\nclass Transaction {\n  /**\n   * @param {Doc} doc\n   * @param {any} origin\n   * @param {boolean} local\n   */\n  constructor (doc, origin, local) {\n    /**\n     * The Yjs instance.\n     * @type {Doc}\n     */\n    this.doc = doc;\n    /**\n     * Describes the set of deleted items by ids\n     * @type {DeleteSet}\n     */\n    this.deleteSet = new DeleteSet();\n    /**\n     * Holds the state before the transaction started.\n     * @type {Map<Number,Number>}\n     */\n    this.beforeState = getStateVector(doc.store);\n    /**\n     * Holds the state after the transaction.\n     * @type {Map<Number,Number>}\n     */\n    this.afterState = new Map();\n    /**\n     * All types that were directly modified (property added or child\n     * inserted/deleted). New types are not included in this Set.\n     * Maps from type to parentSubs (`item.parentSub = null` for YArray)\n     * @type {Map<AbstractType<YEvent>,Set<String|null>>}\n     */\n    this.changed = new Map();\n    /**\n     * Stores the events for the types that observe also child elements.\n     * It is mainly used by `observeDeep`.\n     * @type {Map<AbstractType<YEvent>,Array<YEvent>>}\n     */\n    this.changedParentTypes = new Map();\n    /**\n     * @type {Array<AbstractStruct>}\n     */\n    this._mergeStructs = [];\n    /**\n     * @type {any}\n     */\n    this.origin = origin;\n    /**\n     * Stores meta information on the transaction\n     * @type {Map<any,any>}\n     */\n    this.meta = new Map();\n    /**\n     * Whether this change originates from this doc.\n     * @type {boolean}\n     */\n    this.local = local;\n    /**\n     * @type {Set<Doc>}\n     */\n    this.subdocsAdded = new Set();\n    /**\n     * @type {Set<Doc>}\n     */\n    this.subdocsRemoved = new Set();\n    /**\n     * @type {Set<Doc>}\n     */\n    this.subdocsLoaded = new Set();\n  }\n}\n\n/**\n * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n * @param {Transaction} transaction\n * @return {boolean} Whether data was written.\n */\nconst writeUpdateMessageFromTransaction = (encoder, transaction) => {\n  if (transaction.deleteSet.clients.size === 0 && !map.any(transaction.afterState, (clock, client) => transaction.beforeState.get(client) !== clock)) {\n    return false\n  }\n  sortAndMergeDeleteSet(transaction.deleteSet);\n  writeStructsFromTransaction(encoder, transaction);\n  writeDeleteSet(encoder, transaction.deleteSet);\n  return true\n};\n\n/**\n * If `type.parent` was added in current transaction, `type` technically\n * did not change, it was just added and we should not fire events for `type`.\n *\n * @param {Transaction} transaction\n * @param {AbstractType<YEvent>} type\n * @param {string|null} parentSub\n */\nconst addChangedTypeToTransaction = (transaction, type, parentSub) => {\n  const item = type._item;\n  if (item === null || (item.id.clock < (transaction.beforeState.get(item.id.client) || 0) && !item.deleted)) {\n    map.setIfUndefined(transaction.changed, type, set.create).add(parentSub);\n  }\n};\n\n/**\n * @param {Array<AbstractStruct>} structs\n * @param {number} pos\n */\nconst tryToMergeWithLeft = (structs, pos) => {\n  const left = structs[pos - 1];\n  const right = structs[pos];\n  if (left.deleted === right.deleted && left.constructor === right.constructor) {\n    if (left.mergeWith(right)) {\n      structs.splice(pos, 1);\n      if (right instanceof Item && right.parentSub !== null && /** @type {AbstractType<any>} */ (right.parent)._map.get(right.parentSub) === right) {\n        /** @type {AbstractType<any>} */ (right.parent)._map.set(right.parentSub, /** @type {Item} */ (left));\n      }\n    }\n  }\n};\n\n/**\n * @param {DeleteSet} ds\n * @param {StructStore} store\n * @param {function(Item):boolean} gcFilter\n */\nconst tryGcDeleteSet = (ds, store, gcFilter) => {\n  for (const [client, deleteItems] of ds.clients.entries()) {\n    const structs = /** @type {Array<GC|Item>} */ (store.clients.get(client));\n    for (let di = deleteItems.length - 1; di >= 0; di--) {\n      const deleteItem = deleteItems[di];\n      const endDeleteItemClock = deleteItem.clock + deleteItem.len;\n      for (\n        let si = findIndexSS(structs, deleteItem.clock), struct = structs[si];\n        si < structs.length && struct.id.clock < endDeleteItemClock;\n        struct = structs[++si]\n      ) {\n        const struct = structs[si];\n        if (deleteItem.clock + deleteItem.len <= struct.id.clock) {\n          break\n        }\n        if (struct instanceof Item && struct.deleted && !struct.keep && gcFilter(struct)) {\n          struct.gc(store, false);\n        }\n      }\n    }\n  }\n};\n\n/**\n * @param {DeleteSet} ds\n * @param {StructStore} store\n */\nconst tryMergeDeleteSet = (ds, store) => {\n  // try to merge deleted / gc'd items\n  // merge from right to left for better efficiecy and so we don't miss any merge targets\n  ds.clients.forEach((deleteItems, client) => {\n    const structs = /** @type {Array<GC|Item>} */ (store.clients.get(client));\n    for (let di = deleteItems.length - 1; di >= 0; di--) {\n      const deleteItem = deleteItems[di];\n      // start with merging the item next to the last deleted item\n      const mostRightIndexToCheck = math.min(structs.length - 1, 1 + findIndexSS(structs, deleteItem.clock + deleteItem.len - 1));\n      for (\n        let si = mostRightIndexToCheck, struct = structs[si];\n        si > 0 && struct.id.clock >= deleteItem.clock;\n        struct = structs[--si]\n      ) {\n        tryToMergeWithLeft(structs, si);\n      }\n    }\n  });\n};\n\n/**\n * @param {DeleteSet} ds\n * @param {StructStore} store\n * @param {function(Item):boolean} gcFilter\n */\nconst tryGc = (ds, store, gcFilter) => {\n  tryGcDeleteSet(ds, store, gcFilter);\n  tryMergeDeleteSet(ds, store);\n};\n\n/**\n * @param {Array<Transaction>} transactionCleanups\n * @param {number} i\n */\nconst cleanupTransactions = (transactionCleanups, i) => {\n  if (i < transactionCleanups.length) {\n    const transaction = transactionCleanups[i];\n    const doc = transaction.doc;\n    const store = doc.store;\n    const ds = transaction.deleteSet;\n    const mergeStructs = transaction._mergeStructs;\n    try {\n      sortAndMergeDeleteSet(ds);\n      transaction.afterState = getStateVector(transaction.doc.store);\n      doc._transaction = null;\n      doc.emit('beforeObserverCalls', [transaction, doc]);\n      /**\n       * An array of event callbacks.\n       *\n       * Each callback is called even if the other ones throw errors.\n       *\n       * @type {Array<function():void>}\n       */\n      const fs = [];\n      // observe events on changed types\n      transaction.changed.forEach((subs, itemtype) =>\n        fs.push(() => {\n          if (itemtype._item === null || !itemtype._item.deleted) {\n            itemtype._callObserver(transaction, subs);\n          }\n        })\n      );\n      fs.push(() => {\n        // deep observe events\n        transaction.changedParentTypes.forEach((events, type) =>\n          fs.push(() => {\n            // We need to think about the possibility that the user transforms the\n            // Y.Doc in the event.\n            if (type._item === null || !type._item.deleted) {\n              events = events\n                .filter(event =>\n                  event.target._item === null || !event.target._item.deleted\n                );\n              events\n                .forEach(event => {\n                  event.currentTarget = type;\n                });\n              // sort events by path length so that top-level events are fired first.\n              events\n                .sort((event1, event2) => event1.path.length - event2.path.length);\n              // We don't need to check for events.length\n              // because we know it has at least one element\n              callEventHandlerListeners(type._dEH, events, transaction);\n            }\n          })\n        );\n        fs.push(() => doc.emit('afterTransaction', [transaction, doc]));\n      });\n      callAll(fs, []);\n    } finally {\n      // Replace deleted items with ItemDeleted / GC.\n      // This is where content is actually remove from the Yjs Doc.\n      if (doc.gc) {\n        tryGcDeleteSet(ds, store, doc.gcFilter);\n      }\n      tryMergeDeleteSet(ds, store);\n\n      // on all affected store.clients props, try to merge\n      transaction.afterState.forEach((clock, client) => {\n        const beforeClock = transaction.beforeState.get(client) || 0;\n        if (beforeClock !== clock) {\n          const structs = /** @type {Array<GC|Item>} */ (store.clients.get(client));\n          // we iterate from right to left so we can safely remove entries\n          const firstChangePos = math.max(findIndexSS(structs, beforeClock), 1);\n          for (let i = structs.length - 1; i >= firstChangePos; i--) {\n            tryToMergeWithLeft(structs, i);\n          }\n        }\n      });\n      // try to merge mergeStructs\n      // @todo: it makes more sense to transform mergeStructs to a DS, sort it, and merge from right to left\n      //        but at the moment DS does not handle duplicates\n      for (let i = 0; i < mergeStructs.length; i++) {\n        const { client, clock } = mergeStructs[i].id;\n        const structs = /** @type {Array<GC|Item>} */ (store.clients.get(client));\n        const replacedStructPos = findIndexSS(structs, clock);\n        if (replacedStructPos + 1 < structs.length) {\n          tryToMergeWithLeft(structs, replacedStructPos + 1);\n        }\n        if (replacedStructPos > 0) {\n          tryToMergeWithLeft(structs, replacedStructPos);\n        }\n      }\n      if (!transaction.local && transaction.afterState.get(doc.clientID) !== transaction.beforeState.get(doc.clientID)) {\n        doc.clientID = generateNewClientId();\n        logging.print(logging.ORANGE, logging.BOLD, '[yjs] ', logging.UNBOLD, logging.RED, 'Changed the client-id because another client seems to be using it.');\n      }\n      // @todo Merge all the transactions into one and provide send the data as a single update message\n      doc.emit('afterTransactionCleanup', [transaction, doc]);\n      if (doc._observers.has('update')) {\n        const encoder = new UpdateEncoderV1();\n        const hasContent = writeUpdateMessageFromTransaction(encoder, transaction);\n        if (hasContent) {\n          doc.emit('update', [encoder.toUint8Array(), transaction.origin, doc, transaction]);\n        }\n      }\n      if (doc._observers.has('updateV2')) {\n        const encoder = new UpdateEncoderV2();\n        const hasContent = writeUpdateMessageFromTransaction(encoder, transaction);\n        if (hasContent) {\n          doc.emit('updateV2', [encoder.toUint8Array(), transaction.origin, doc, transaction]);\n        }\n      }\n      transaction.subdocsAdded.forEach(subdoc => doc.subdocs.add(subdoc));\n      transaction.subdocsRemoved.forEach(subdoc => doc.subdocs.delete(subdoc));\n\n      doc.emit('subdocs', [{ loaded: transaction.subdocsLoaded, added: transaction.subdocsAdded, removed: transaction.subdocsRemoved }]);\n      transaction.subdocsRemoved.forEach(subdoc => subdoc.destroy());\n\n      if (transactionCleanups.length <= i + 1) {\n        doc._transactionCleanups = [];\n        doc.emit('afterAllTransactions', [doc, transactionCleanups]);\n      } else {\n        cleanupTransactions(transactionCleanups, i + 1);\n      }\n    }\n  }\n};\n\n/**\n * Implements the functionality of `y.transact(()=>{..})`\n *\n * @param {Doc} doc\n * @param {function(Transaction):void} f\n * @param {any} [origin=true]\n *\n * @function\n */\nconst transact = (doc, f, origin = null, local = true) => {\n  const transactionCleanups = doc._transactionCleanups;\n  let initialCall = false;\n  if (doc._transaction === null) {\n    initialCall = true;\n    doc._transaction = new Transaction(doc, origin, local);\n    transactionCleanups.push(doc._transaction);\n    if (transactionCleanups.length === 1) {\n      doc.emit('beforeAllTransactions', [doc]);\n    }\n    doc.emit('beforeTransaction', [doc._transaction, doc]);\n  }\n  try {\n    f(doc._transaction);\n  } finally {\n    if (initialCall && transactionCleanups[0] === doc._transaction) {\n      // The first transaction ended, now process observer calls.\n      // Observer call may create new transactions for which we need to call the observers and do cleanup.\n      // We don't want to nest these calls, so we execute these calls one after\n      // another.\n      // Also we need to ensure that all cleanups are called, even if the\n      // observes throw errors.\n      // This file is full of hacky try {} finally {} blocks to ensure that an\n      // event can throw errors and also that the cleanup is called.\n      cleanupTransactions(transactionCleanups, 0);\n    }\n  }\n};\n\nclass StackItem {\n  /**\n   * @param {DeleteSet} deletions\n   * @param {DeleteSet} insertions\n   */\n  constructor (deletions, insertions) {\n    this.insertions = insertions;\n    this.deletions = deletions;\n    /**\n     * Use this to save and restore metadata like selection range\n     */\n    this.meta = new Map();\n  }\n}\n\n/**\n * @param {UndoManager} undoManager\n * @param {Array<StackItem>} stack\n * @param {string} eventType\n * @return {StackItem?}\n */\nconst popStackItem = (undoManager, stack, eventType) => {\n  /**\n   * Whether a change happened\n   * @type {StackItem?}\n   */\n  let result = null;\n  /**\n   * Keep a reference to the transaction so we can fire the event with the changedParentTypes\n   * @type {any}\n   */\n  let _tr = null;\n  const doc = undoManager.doc;\n  const scope = undoManager.scope;\n  transact(doc, transaction => {\n    while (stack.length > 0 && result === null) {\n      const store = doc.store;\n      const stackItem = /** @type {StackItem} */ (stack.pop());\n      /**\n       * @type {Set<Item>}\n       */\n      const itemsToRedo = new Set();\n      /**\n       * @type {Array<Item>}\n       */\n      const itemsToDelete = [];\n      let performedChange = false;\n      iterateDeletedStructs(transaction, stackItem.insertions, struct => {\n        if (struct instanceof Item) {\n          if (struct.redone !== null) {\n            let { item, diff } = followRedone(store, struct.id);\n            if (diff > 0) {\n              item = getItemCleanStart(transaction, createID(item.id.client, item.id.clock + diff));\n            }\n            struct = item;\n          }\n          if (!struct.deleted && scope.some(type => isParentOf(type, /** @type {Item} */ (struct)))) {\n            itemsToDelete.push(struct);\n          }\n        }\n      });\n      iterateDeletedStructs(transaction, stackItem.deletions, struct => {\n        if (\n          struct instanceof Item &&\n          scope.some(type => isParentOf(type, struct)) &&\n          // Never redo structs in stackItem.insertions because they were created and deleted in the same capture interval.\n          !isDeleted(stackItem.insertions, struct.id)\n        ) {\n          itemsToRedo.add(struct);\n        }\n      });\n      itemsToRedo.forEach(struct => {\n        performedChange = redoItem(transaction, struct, itemsToRedo) !== null || performedChange;\n      });\n      // We want to delete in reverse order so that children are deleted before\n      // parents, so we have more information available when items are filtered.\n      for (let i = itemsToDelete.length - 1; i >= 0; i--) {\n        const item = itemsToDelete[i];\n        if (undoManager.deleteFilter(item)) {\n          item.delete(transaction);\n          performedChange = true;\n        }\n      }\n      result = performedChange ? stackItem : null;\n    }\n    transaction.changed.forEach((subProps, type) => {\n      // destroy search marker if necessary\n      if (subProps.has(null) && type._searchMarker) {\n        type._searchMarker.length = 0;\n      }\n    });\n    _tr = transaction;\n  }, undoManager);\n  if (result != null) {\n    const changedParentTypes = _tr.changedParentTypes;\n    undoManager.emit('stack-item-popped', [{ stackItem: result, type: eventType, changedParentTypes }, undoManager]);\n  }\n  return result\n};\n\n/**\n * @typedef {Object} UndoManagerOptions\n * @property {number} [UndoManagerOptions.captureTimeout=500]\n * @property {function(Item):boolean} [UndoManagerOptions.deleteFilter=()=>true] Sometimes\n * it is necessary to filter whan an Undo/Redo operation can delete. If this\n * filter returns false, the type/item won't be deleted even it is in the\n * undo/redo scope.\n * @property {Set<any>} [UndoManagerOptions.trackedOrigins=new Set([null])]\n */\n\n/**\n * Fires 'stack-item-added' event when a stack item was added to either the undo- or\n * the redo-stack. You may store additional stack information via the\n * metadata property on `event.stackItem.meta` (it is a `Map` of metadata properties).\n * Fires 'stack-item-popped' event when a stack item was popped from either the\n * undo- or the redo-stack. You may restore the saved stack information from `event.stackItem.meta`.\n *\n * @extends {Observable<'stack-item-added'|'stack-item-popped'>}\n */\nclass UndoManager extends Observable {\n  /**\n   * @param {AbstractType<any>|Array<AbstractType<any>>} typeScope Accepts either a single type, or an array of types\n   * @param {UndoManagerOptions} options\n   */\n  constructor (typeScope, { captureTimeout = 500, deleteFilter = () => true, trackedOrigins = new Set([null]) } = {}) {\n    super();\n    this.scope = typeScope instanceof Array ? typeScope : [typeScope];\n    this.deleteFilter = deleteFilter;\n    trackedOrigins.add(this);\n    this.trackedOrigins = trackedOrigins;\n    /**\n     * @type {Array<StackItem>}\n     */\n    this.undoStack = [];\n    /**\n     * @type {Array<StackItem>}\n     */\n    this.redoStack = [];\n    /**\n     * Whether the client is currently undoing (calling UndoManager.undo)\n     *\n     * @type {boolean}\n     */\n    this.undoing = false;\n    this.redoing = false;\n    this.doc = /** @type {Doc} */ (this.scope[0].doc);\n    this.lastChange = 0;\n    this.doc.on('afterTransaction', /** @param {Transaction} transaction */ transaction => {\n      // Only track certain transactions\n      if (!this.scope.some(type => transaction.changedParentTypes.has(type)) || (!this.trackedOrigins.has(transaction.origin) && (!transaction.origin || !this.trackedOrigins.has(transaction.origin.constructor)))) {\n        return\n      }\n      const undoing = this.undoing;\n      const redoing = this.redoing;\n      const stack = undoing ? this.redoStack : this.undoStack;\n      if (undoing) {\n        this.stopCapturing(); // next undo should not be appended to last stack item\n      } else if (!redoing) {\n        // neither undoing nor redoing: delete redoStack\n        this.redoStack = [];\n      }\n      const insertions = new DeleteSet();\n      transaction.afterState.forEach((endClock, client) => {\n        const startClock = transaction.beforeState.get(client) || 0;\n        const len = endClock - startClock;\n        if (len > 0) {\n          addToDeleteSet(insertions, client, startClock, len);\n        }\n      });\n      const now = time.getUnixTime();\n      if (now - this.lastChange < captureTimeout && stack.length > 0 && !undoing && !redoing) {\n        // append change to last stack op\n        const lastOp = stack[stack.length - 1];\n        lastOp.deletions = mergeDeleteSets([lastOp.deletions, transaction.deleteSet]);\n        lastOp.insertions = mergeDeleteSets([lastOp.insertions, insertions]);\n      } else {\n        // create a new stack op\n        stack.push(new StackItem(transaction.deleteSet, insertions));\n      }\n      if (!undoing && !redoing) {\n        this.lastChange = now;\n      }\n      // make sure that deleted structs are not gc'd\n      iterateDeletedStructs(transaction, transaction.deleteSet, /** @param {Item|GC} item */ item => {\n        if (item instanceof Item && this.scope.some(type => isParentOf(type, item))) {\n          keepItem(item, true);\n        }\n      });\n      this.emit('stack-item-added', [{ stackItem: stack[stack.length - 1], origin: transaction.origin, type: undoing ? 'redo' : 'undo', changedParentTypes: transaction.changedParentTypes }, this]);\n    });\n  }\n\n  clear () {\n    this.doc.transact(transaction => {\n      /**\n       * @param {StackItem} stackItem\n       */\n      const clearItem = stackItem => {\n        iterateDeletedStructs(transaction, stackItem.deletions, item => {\n          if (item instanceof Item && this.scope.some(type => isParentOf(type, item))) {\n            keepItem(item, false);\n          }\n        });\n      };\n      this.undoStack.forEach(clearItem);\n      this.redoStack.forEach(clearItem);\n    });\n    this.undoStack = [];\n    this.redoStack = [];\n  }\n\n  /**\n   * UndoManager merges Undo-StackItem if they are created within time-gap\n   * smaller than `options.captureTimeout`. Call `um.stopCapturing()` so that the next\n   * StackItem won't be merged.\n   *\n   *\n   * @example\n   *     // without stopCapturing\n   *     ytext.insert(0, 'a')\n   *     ytext.insert(1, 'b')\n   *     um.undo()\n   *     ytext.toString() // => '' (note that 'ab' was removed)\n   *     // with stopCapturing\n   *     ytext.insert(0, 'a')\n   *     um.stopCapturing()\n   *     ytext.insert(0, 'b')\n   *     um.undo()\n   *     ytext.toString() // => 'a' (note that only 'b' was removed)\n   *\n   */\n  stopCapturing () {\n    this.lastChange = 0;\n  }\n\n  /**\n   * Undo last changes on type.\n   *\n   * @return {StackItem?} Returns StackItem if a change was applied\n   */\n  undo () {\n    this.undoing = true;\n    let res;\n    try {\n      res = popStackItem(this, this.undoStack, 'undo');\n    } finally {\n      this.undoing = false;\n    }\n    return res\n  }\n\n  /**\n   * Redo last undo operation.\n   *\n   * @return {StackItem?} Returns StackItem if a change was applied\n   */\n  redo () {\n    this.redoing = true;\n    let res;\n    try {\n      res = popStackItem(this, this.redoStack, 'redo');\n    } finally {\n      this.redoing = false;\n    }\n    return res\n  }\n}\n\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n */\nfunction * lazyStructReaderGenerator (decoder) {\n  const numOfStateUpdates = decoding.readVarUint(decoder.restDecoder);\n  for (let i = 0; i < numOfStateUpdates; i++) {\n    const numberOfStructs = decoding.readVarUint(decoder.restDecoder);\n    const client = decoder.readClient();\n    let clock = decoding.readVarUint(decoder.restDecoder);\n    for (let i = 0; i < numberOfStructs; i++) {\n      const info = decoder.readInfo();\n      // @todo use switch instead of ifs\n      if (info === 10) {\n        const len = decoding.readVarUint(decoder.restDecoder);\n        yield new Skip(createID(client, clock), len);\n        clock += len;\n      } else if ((binary.BITS5 & info) !== 0) {\n        const cantCopyParentInfo = (info & (binary.BIT7 | binary.BIT8)) === 0;\n        // If parent = null and neither left nor right are defined, then we know that `parent` is child of `y`\n        // and we read the next string as parentYKey.\n        // It indicates how we store/retrieve parent from `y.share`\n        // @type {string|null}\n        const struct = new Item(\n          createID(client, clock),\n          null, // left\n          (info & binary.BIT8) === binary.BIT8 ? decoder.readLeftID() : null, // origin\n          null, // right\n          (info & binary.BIT7) === binary.BIT7 ? decoder.readRightID() : null, // right origin\n          // @ts-ignore Force writing a string here.\n          cantCopyParentInfo ? (decoder.readParentInfo() ? decoder.readString() : decoder.readLeftID()) : null, // parent\n          cantCopyParentInfo && (info & binary.BIT6) === binary.BIT6 ? decoder.readString() : null, // parentSub\n          readItemContent(decoder, info) // item content\n        );\n        yield struct;\n        clock += struct.length;\n      } else {\n        const len = decoder.readLen();\n        yield new GC(createID(client, clock), len);\n        clock += len;\n      }\n    }\n  }\n}\n\nclass LazyStructReader {\n  /**\n   * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n   * @param {boolean} filterSkips\n   */\n  constructor (decoder, filterSkips) {\n    this.gen = lazyStructReaderGenerator(decoder);\n    /**\n     * @type {null | Item | Skip | GC}\n     */\n    this.curr = null;\n    this.done = false;\n    this.filterSkips = filterSkips;\n    this.next();\n  }\n\n  /**\n   * @return {Item | GC | Skip |null}\n   */\n  next () {\n    // ignore \"Skip\" structs\n    do {\n      this.curr = this.gen.next().value || null;\n    } while (this.filterSkips && this.curr !== null && this.curr.constructor === Skip)\n    return this.curr\n  }\n}\n\n/**\n * @param {Uint8Array} update\n *\n */\nconst logUpdate = update => logUpdateV2(update, UpdateDecoderV1);\n\n/**\n * @param {Uint8Array} update\n * @param {typeof UpdateDecoderV2 | typeof UpdateDecoderV1} [YDecoder]\n *\n */\nconst logUpdateV2 = (update, YDecoder = UpdateDecoderV2) => {\n  const structs = [];\n  const updateDecoder = new YDecoder(decoding.createDecoder(update));\n  const lazyDecoder = new LazyStructReader(updateDecoder, false);\n  for (let curr = lazyDecoder.curr; curr !== null; curr = lazyDecoder.next()) {\n    structs.push(curr);\n  }\n  logging.print('Structs: ', structs);\n  const ds = readDeleteSet(updateDecoder);\n  logging.print('DeleteSet: ', ds);\n};\n\nclass LazyStructWriter {\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   */\n  constructor (encoder) {\n    this.currClient = 0;\n    this.startClock = 0;\n    this.written = 0;\n    this.encoder = encoder;\n    /**\n     * We want to write operations lazily, but also we need to know beforehand how many operations we want to write for each client.\n     *\n     * This kind of meta-information (#clients, #structs-per-client-written) is written to the restEncoder.\n     *\n     * We fragment the restEncoder and store a slice of it per-client until we know how many clients there are.\n     * When we flush (toUint8Array) we write the restEncoder using the fragments and the meta-information.\n     *\n     * @type {Array<{ written: number, restEncoder: Uint8Array }>}\n     */\n    this.clientStructs = [];\n  }\n}\n\n/**\n * @param {Array<Uint8Array>} updates\n * @return {Uint8Array}\n */\nconst mergeUpdates = updates => mergeUpdatesV2(updates, UpdateDecoderV1, UpdateEncoderV1);\n\n/**\n * @param {Uint8Array} update\n * @param {typeof DSEncoderV1 | typeof DSEncoderV2} YEncoder\n * @param {typeof UpdateDecoderV1 | typeof UpdateDecoderV2} YDecoder\n * @return {Uint8Array}\n */\nconst encodeStateVectorFromUpdateV2 = (update, YEncoder = DSEncoderV2, YDecoder = UpdateDecoderV2) => {\n  const encoder = new YEncoder();\n  const updateDecoder = new LazyStructReader(new YDecoder(decoding.createDecoder(update)), false);\n  let curr = updateDecoder.curr;\n  if (curr !== null) {\n    let size = 0;\n    let currClient = curr.id.client;\n    let stopCounting = curr.id.clock !== 0; // must start at 0\n    let currClock = stopCounting ? 0 : curr.id.clock + curr.length;\n    for (; curr !== null; curr = updateDecoder.next()) {\n      if (currClient !== curr.id.client) {\n        if (currClock !== 0) {\n          size++;\n          // We found a new client\n          // write what we have to the encoder\n          encoding.writeVarUint(encoder.restEncoder, currClient);\n          encoding.writeVarUint(encoder.restEncoder, currClock);\n        }\n        currClient = curr.id.client;\n        currClock = 0;\n        stopCounting = curr.id.clock !== 0;\n      }\n      // we ignore skips\n      if (curr.constructor === Skip) {\n        stopCounting = true;\n      }\n      if (!stopCounting) {\n        currClock = curr.id.clock + curr.length;\n      }\n    }\n    // write what we have\n    if (currClock !== 0) {\n      size++;\n      encoding.writeVarUint(encoder.restEncoder, currClient);\n      encoding.writeVarUint(encoder.restEncoder, currClock);\n    }\n    // prepend the size of the state vector\n    const enc = encoding.createEncoder();\n    encoding.writeVarUint(enc, size);\n    encoding.writeBinaryEncoder(enc, encoder.restEncoder);\n    encoder.restEncoder = enc;\n    return encoder.toUint8Array()\n  } else {\n    encoding.writeVarUint(encoder.restEncoder, 0);\n    return encoder.toUint8Array()\n  }\n};\n\n/**\n * @param {Uint8Array} update\n * @return {Uint8Array}\n */\nconst encodeStateVectorFromUpdate = update => encodeStateVectorFromUpdateV2(update, DSEncoderV1, UpdateDecoderV1);\n\n/**\n * @param {Uint8Array} update\n * @param {typeof UpdateDecoderV1 | typeof UpdateDecoderV2} YDecoder\n * @return {{ from: Map<number,number>, to: Map<number,number> }}\n */\nconst parseUpdateMetaV2 = (update, YDecoder = UpdateDecoderV2) => {\n  /**\n   * @type {Map<number, number>}\n   */\n  const from = new Map();\n  /**\n   * @type {Map<number, number>}\n   */\n  const to = new Map();\n  const updateDecoder = new LazyStructReader(new YDecoder(decoding.createDecoder(update)), false);\n  let curr = updateDecoder.curr;\n  if (curr !== null) {\n    let currClient = curr.id.client;\n    let currClock = curr.id.clock;\n    // write the beginning to `from`\n    from.set(currClient, currClock);\n    for (; curr !== null; curr = updateDecoder.next()) {\n      if (currClient !== curr.id.client) {\n        // We found a new client\n        // write the end to `to`\n        to.set(currClient, currClock);\n        // write the beginning to `from`\n        from.set(curr.id.client, curr.id.clock);\n        // update currClient\n        currClient = curr.id.client;\n      }\n      currClock = curr.id.clock + curr.length;\n    }\n    // write the end to `to`\n    to.set(currClient, currClock);\n  }\n  return { from, to }\n};\n\n/**\n * @param {Uint8Array} update\n * @return {{ from: Map<number,number>, to: Map<number,number> }}\n */\nconst parseUpdateMeta = update => parseUpdateMetaV2(update, UpdateDecoderV1);\n\n/**\n * This method is intended to slice any kind of struct and retrieve the right part.\n * It does not handle side-effects, so it should only be used by the lazy-encoder.\n *\n * @param {Item | GC | Skip} left\n * @param {number} diff\n * @return {Item | GC}\n */\nconst sliceStruct = (left, diff) => {\n  if (left.constructor === GC) {\n    const { client, clock } = left.id;\n    return new GC(createID(client, clock + diff), left.length - diff)\n  } else if (left.constructor === Skip) {\n    const { client, clock } = left.id;\n    return new Skip(createID(client, clock + diff), left.length - diff)\n  } else {\n    const leftItem = /** @type {Item} */ (left);\n    const { client, clock } = leftItem.id;\n    return new Item(\n      createID(client, clock + diff),\n      null,\n      createID(client, clock + diff - 1),\n      null,\n      leftItem.rightOrigin,\n      leftItem.parent,\n      leftItem.parentSub,\n      leftItem.content.splice(diff)\n    )\n  }\n};\n\n/**\n *\n * This function works similarly to `readUpdateV2`.\n *\n * @param {Array<Uint8Array>} updates\n * @param {typeof UpdateDecoderV1 | typeof UpdateDecoderV2} [YDecoder]\n * @param {typeof UpdateEncoderV1 | typeof UpdateEncoderV2} [YEncoder]\n * @return {Uint8Array}\n */\nconst mergeUpdatesV2 = (updates, YDecoder = UpdateDecoderV2, YEncoder = UpdateEncoderV2) => {\n  const updateDecoders = updates.map(update => new YDecoder(decoding.createDecoder(update)));\n  let lazyStructDecoders = updateDecoders.map(decoder => new LazyStructReader(decoder, true));\n\n  /**\n   * @todo we don't need offset because we always slice before\n   * @type {null | { struct: Item | GC | Skip, offset: number }}\n   */\n  let currWrite = null;\n\n  const updateEncoder = new YEncoder();\n  // write structs lazily\n  const lazyStructEncoder = new LazyStructWriter(updateEncoder);\n\n  // Note: We need to ensure that all lazyStructDecoders are fully consumed\n  // Note: Should merge document updates whenever possible - even from different updates\n  // Note: Should handle that some operations cannot be applied yet ()\n\n  while (true) {\n    // Write higher clients first ⇒ sort by clientID & clock and remove decoders without content\n    lazyStructDecoders = lazyStructDecoders.filter(dec => dec.curr !== null);\n    lazyStructDecoders.sort(\n      /** @type {function(any,any):number} */ (dec1, dec2) => {\n        if (dec1.curr.id.client === dec2.curr.id.client) {\n          const clockDiff = dec1.curr.id.clock - dec2.curr.id.clock;\n          if (clockDiff === 0) {\n            return dec1.curr.constructor === dec2.curr.constructor ? 0 : (\n              dec1.curr.constructor === Skip ? 1 : -1\n            )\n          } else {\n            return clockDiff\n          }\n        } else {\n          return dec2.curr.id.client - dec1.curr.id.client\n        }\n      }\n    );\n    if (lazyStructDecoders.length === 0) {\n      break\n    }\n    const currDecoder = lazyStructDecoders[0];\n    // write from currDecoder until the next operation is from another client or if filler-struct\n    // then we need to reorder the decoders and find the next operation to write\n    const firstClient = /** @type {Item | GC} */ (currDecoder.curr).id.client;\n\n    if (currWrite !== null) {\n      let curr = /** @type {Item | GC | null} */ (currDecoder.curr);\n      let iterated = false;\n\n      // iterate until we find something that we haven't written already\n      // remember: first the high client-ids are written\n      while (curr !== null && curr.id.clock + curr.length <= currWrite.struct.id.clock + currWrite.struct.length && curr.id.client >= currWrite.struct.id.client) {\n        curr = currDecoder.next();\n        iterated = true;\n      }\n      if (\n        curr === null || // current decoder is empty\n        curr.id.client !== firstClient || // check whether there is another decoder that has has updates from `firstClient`\n        (iterated && curr.id.clock > currWrite.struct.id.clock + currWrite.struct.length) // the above while loop was used and we are potentially missing updates\n      ) {\n        continue\n      }\n\n      if (firstClient !== currWrite.struct.id.client) {\n        writeStructToLazyStructWriter(lazyStructEncoder, currWrite.struct, currWrite.offset);\n        currWrite = { struct: curr, offset: 0 };\n        currDecoder.next();\n      } else {\n        if (currWrite.struct.id.clock + currWrite.struct.length < curr.id.clock) {\n          // @todo write currStruct & set currStruct = Skip(clock = currStruct.id.clock + currStruct.length, length = curr.id.clock - self.clock)\n          if (currWrite.struct.constructor === Skip) {\n            // extend existing skip\n            currWrite.struct.length = curr.id.clock + curr.length - currWrite.struct.id.clock;\n          } else {\n            writeStructToLazyStructWriter(lazyStructEncoder, currWrite.struct, currWrite.offset);\n            const diff = curr.id.clock - currWrite.struct.id.clock - currWrite.struct.length;\n            /**\n             * @type {Skip}\n             */\n            const struct = new Skip(createID(firstClient, currWrite.struct.id.clock + currWrite.struct.length), diff);\n            currWrite = { struct, offset: 0 };\n          }\n        } else { // if (currWrite.struct.id.clock + currWrite.struct.length >= curr.id.clock) {\n          const diff = currWrite.struct.id.clock + currWrite.struct.length - curr.id.clock;\n          if (diff > 0) {\n            if (currWrite.struct.constructor === Skip) {\n              // prefer to slice Skip because the other struct might contain more information\n              currWrite.struct.length -= diff;\n            } else {\n              curr = sliceStruct(curr, diff);\n            }\n          }\n          if (!currWrite.struct.mergeWith(/** @type {any} */ (curr))) {\n            writeStructToLazyStructWriter(lazyStructEncoder, currWrite.struct, currWrite.offset);\n            currWrite = { struct: curr, offset: 0 };\n            currDecoder.next();\n          }\n        }\n      }\n    } else {\n      currWrite = { struct: /** @type {Item | GC} */ (currDecoder.curr), offset: 0 };\n      currDecoder.next();\n    }\n    for (\n      let next = currDecoder.curr;\n      next !== null && next.id.client === firstClient && next.id.clock === currWrite.struct.id.clock + currWrite.struct.length && next.constructor !== Skip;\n      next = currDecoder.next()\n    ) {\n      writeStructToLazyStructWriter(lazyStructEncoder, currWrite.struct, currWrite.offset);\n      currWrite = { struct: next, offset: 0 };\n    }\n  }\n  if (currWrite !== null) {\n    writeStructToLazyStructWriter(lazyStructEncoder, currWrite.struct, currWrite.offset);\n    currWrite = null;\n  }\n  finishLazyStructWriting(lazyStructEncoder);\n\n  const dss = updateDecoders.map(decoder => readDeleteSet(decoder));\n  const ds = mergeDeleteSets(dss);\n  writeDeleteSet(updateEncoder, ds);\n  return updateEncoder.toUint8Array()\n};\n\n/**\n * @param {Uint8Array} update\n * @param {Uint8Array} sv\n * @param {typeof UpdateDecoderV1 | typeof UpdateDecoderV2} [YDecoder]\n * @param {typeof UpdateEncoderV1 | typeof UpdateEncoderV2} [YEncoder]\n */\nconst diffUpdateV2 = (update, sv, YDecoder = UpdateDecoderV2, YEncoder = UpdateEncoderV2) => {\n  const state = decodeStateVector(sv);\n  const encoder = new YEncoder();\n  const lazyStructWriter = new LazyStructWriter(encoder);\n  const decoder = new YDecoder(decoding.createDecoder(update));\n  const reader = new LazyStructReader(decoder, false);\n  while (reader.curr) {\n    const curr = reader.curr;\n    const currClient = curr.id.client;\n    const svClock = state.get(currClient) || 0;\n    if (reader.curr.constructor === Skip) {\n      // the first written struct shouldn't be a skip\n      reader.next();\n      continue\n    }\n    if (curr.id.clock + curr.length > svClock) {\n      writeStructToLazyStructWriter(lazyStructWriter, curr, math.max(svClock - curr.id.clock, 0));\n      reader.next();\n      while (reader.curr && reader.curr.id.client === currClient) {\n        writeStructToLazyStructWriter(lazyStructWriter, reader.curr, 0);\n        reader.next();\n      }\n    } else {\n      // read until something new comes up\n      while (reader.curr && reader.curr.id.client === currClient && reader.curr.id.clock + reader.curr.length <= svClock) {\n        reader.next();\n      }\n    }\n  }\n  finishLazyStructWriting(lazyStructWriter);\n  // write ds\n  const ds = readDeleteSet(decoder);\n  writeDeleteSet(encoder, ds);\n  return encoder.toUint8Array()\n};\n\n/**\n * @param {Uint8Array} update\n * @param {Uint8Array} sv\n */\nconst diffUpdate = (update, sv) => diffUpdateV2(update, sv, UpdateDecoderV1, UpdateEncoderV1);\n\n/**\n * @param {LazyStructWriter} lazyWriter\n */\nconst flushLazyStructWriter = lazyWriter => {\n  if (lazyWriter.written > 0) {\n    lazyWriter.clientStructs.push({ written: lazyWriter.written, restEncoder: encoding.toUint8Array(lazyWriter.encoder.restEncoder) });\n    lazyWriter.encoder.restEncoder = encoding.createEncoder();\n    lazyWriter.written = 0;\n  }\n};\n\n/**\n * @param {LazyStructWriter} lazyWriter\n * @param {Item | GC} struct\n * @param {number} offset\n */\nconst writeStructToLazyStructWriter = (lazyWriter, struct, offset) => {\n  // flush curr if we start another client\n  if (lazyWriter.written > 0 && lazyWriter.currClient !== struct.id.client) {\n    flushLazyStructWriter(lazyWriter);\n  }\n  if (lazyWriter.written === 0) {\n    lazyWriter.currClient = struct.id.client;\n    // write next client\n    lazyWriter.encoder.writeClient(struct.id.client);\n    // write startClock\n    encoding.writeVarUint(lazyWriter.encoder.restEncoder, struct.id.clock + offset);\n  }\n  struct.write(lazyWriter.encoder, offset);\n  lazyWriter.written++;\n};\n/**\n * Call this function when we collected all parts and want to\n * put all the parts together. After calling this method,\n * you can continue using the UpdateEncoder.\n *\n * @param {LazyStructWriter} lazyWriter\n */\nconst finishLazyStructWriting = (lazyWriter) => {\n  flushLazyStructWriter(lazyWriter);\n\n  // this is a fresh encoder because we called flushCurr\n  const restEncoder = lazyWriter.encoder.restEncoder;\n\n  /**\n   * Now we put all the fragments together.\n   * This works similarly to `writeClientsStructs`\n   */\n\n  // write # states that were updated - i.e. the clients\n  encoding.writeVarUint(restEncoder, lazyWriter.clientStructs.length);\n\n  for (let i = 0; i < lazyWriter.clientStructs.length; i++) {\n    const partStructs = lazyWriter.clientStructs[i];\n    /**\n     * Works similarly to `writeStructs`\n     */\n    // write # encoded structs\n    encoding.writeVarUint(restEncoder, partStructs.written);\n    // write the rest of the fragment\n    encoding.writeUint8Array(restEncoder, partStructs.restEncoder);\n  }\n};\n\n/**\n * @param {Uint8Array} update\n * @param {typeof UpdateDecoderV2 | typeof UpdateDecoderV1} YDecoder\n * @param {typeof UpdateEncoderV2 | typeof UpdateEncoderV1 } YEncoder\n */\nconst convertUpdateFormat = (update, YDecoder, YEncoder) => {\n  const updateDecoder = new YDecoder(decoding.createDecoder(update));\n  const lazyDecoder = new LazyStructReader(updateDecoder, false);\n  const updateEncoder = new YEncoder();\n  const lazyWriter = new LazyStructWriter(updateEncoder);\n\n  for (let curr = lazyDecoder.curr; curr !== null; curr = lazyDecoder.next()) {\n    writeStructToLazyStructWriter(lazyWriter, curr, 0);\n  }\n  finishLazyStructWriting(lazyWriter);\n  const ds = readDeleteSet(updateDecoder);\n  writeDeleteSet(updateEncoder, ds);\n  return updateEncoder.toUint8Array()\n};\n\n/**\n * @param {Uint8Array} update\n */\nconst convertUpdateFormatV2ToV1 = update => convertUpdateFormat(update, UpdateDecoderV2, UpdateEncoderV1);\n\n/**\n * YEvent describes the changes on a YType.\n */\nclass YEvent {\n  /**\n   * @param {AbstractType<any>} target The changed type.\n   * @param {Transaction} transaction\n   */\n  constructor (target, transaction) {\n    /**\n     * The type on which this event was created on.\n     * @type {AbstractType<any>}\n     */\n    this.target = target;\n    /**\n     * The current target on which the observe callback is called.\n     * @type {AbstractType<any>}\n     */\n    this.currentTarget = target;\n    /**\n     * The transaction that triggered this event.\n     * @type {Transaction}\n     */\n    this.transaction = transaction;\n    /**\n     * @type {Object|null}\n     */\n    this._changes = null;\n    /**\n     * @type {null | Map<string, { action: 'add' | 'update' | 'delete', oldValue: any, newValue: any }>}\n     */\n    this._keys = null;\n    /**\n     * @type {null | Array<{ insert?: string | Array<any>, retain?: number, delete?: number, attributes?: Object<string, any> }>}\n     */\n    this._delta = null;\n  }\n\n  /**\n   * Computes the path from `y` to the changed type.\n   *\n   * @todo v14 should standardize on path: Array<{parent, index}> because that is easier to work with.\n   *\n   * The following property holds:\n   * @example\n   *   let type = y\n   *   event.path.forEach(dir => {\n   *     type = type.get(dir)\n   *   })\n   *   type === event.target // => true\n   */\n  get path () {\n    // @ts-ignore _item is defined because target is integrated\n    return getPathTo(this.currentTarget, this.target)\n  }\n\n  /**\n   * Check if a struct is deleted by this event.\n   *\n   * In contrast to change.deleted, this method also returns true if the struct was added and then deleted.\n   *\n   * @param {AbstractStruct} struct\n   * @return {boolean}\n   */\n  deletes (struct) {\n    return isDeleted(this.transaction.deleteSet, struct.id)\n  }\n\n  /**\n   * @type {Map<string, { action: 'add' | 'update' | 'delete', oldValue: any, newValue: any }>}\n   */\n  get keys () {\n    if (this._keys === null) {\n      const keys = new Map();\n      const target = this.target;\n      const changed = /** @type Set<string|null> */ (this.transaction.changed.get(target));\n      changed.forEach(key => {\n        if (key !== null) {\n          const item = /** @type {Item} */ (target._map.get(key));\n          /**\n           * @type {'delete' | 'add' | 'update'}\n           */\n          let action;\n          let oldValue;\n          if (this.adds(item)) {\n            let prev = item.left;\n            while (prev !== null && this.adds(prev)) {\n              prev = prev.left;\n            }\n            if (this.deletes(item)) {\n              if (prev !== null && this.deletes(prev)) {\n                action = 'delete';\n                oldValue = array.last(prev.content.getContent());\n              } else {\n                return\n              }\n            } else {\n              if (prev !== null && this.deletes(prev)) {\n                action = 'update';\n                oldValue = array.last(prev.content.getContent());\n              } else {\n                action = 'add';\n                oldValue = undefined;\n              }\n            }\n          } else {\n            if (this.deletes(item)) {\n              action = 'delete';\n              oldValue = array.last(/** @type {Item} */ item.content.getContent());\n            } else {\n              return // nop\n            }\n          }\n          keys.set(key, { action, oldValue });\n        }\n      });\n      this._keys = keys;\n    }\n    return this._keys\n  }\n\n  /**\n   * @type {Array<{insert?: string | Array<any>, retain?: number, delete?: number, attributes?: Object<string, any>}>}\n   */\n  get delta () {\n    return this.changes.delta\n  }\n\n  /**\n   * Check if a struct is added by this event.\n   *\n   * In contrast to change.deleted, this method also returns true if the struct was added and then deleted.\n   *\n   * @param {AbstractStruct} struct\n   * @return {boolean}\n   */\n  adds (struct) {\n    return struct.id.clock >= (this.transaction.beforeState.get(struct.id.client) || 0)\n  }\n\n  /**\n   * @type {{added:Set<Item>,deleted:Set<Item>,keys:Map<string,{action:'add'|'update'|'delete',oldValue:any}>,delta:Array<{insert?:Array<any>|string, delete?:number, retain?:number}>}}\n   */\n  get changes () {\n    let changes = this._changes;\n    if (changes === null) {\n      const target = this.target;\n      const added = set.create();\n      const deleted = set.create();\n      /**\n       * @type {Array<{insert:Array<any>}|{delete:number}|{retain:number}>}\n       */\n      const delta = [];\n      changes = {\n        added,\n        deleted,\n        delta,\n        keys: this.keys\n      };\n      const changed = /** @type Set<string|null> */ (this.transaction.changed.get(target));\n      if (changed.has(null)) {\n        /**\n         * @type {any}\n         */\n        let lastOp = null;\n        const packOp = () => {\n          if (lastOp) {\n            delta.push(lastOp);\n          }\n        };\n        for (let item = target._start; item !== null; item = item.right) {\n          if (item.deleted) {\n            if (this.deletes(item) && !this.adds(item)) {\n              if (lastOp === null || lastOp.delete === undefined) {\n                packOp();\n                lastOp = { delete: 0 };\n              }\n              lastOp.delete += item.length;\n              deleted.add(item);\n            } // else nop\n          } else {\n            if (this.adds(item)) {\n              if (lastOp === null || lastOp.insert === undefined) {\n                packOp();\n                lastOp = { insert: [] };\n              }\n              lastOp.insert = lastOp.insert.concat(item.content.getContent());\n              added.add(item);\n            } else {\n              if (lastOp === null || lastOp.retain === undefined) {\n                packOp();\n                lastOp = { retain: 0 };\n              }\n              lastOp.retain += item.length;\n            }\n          }\n        }\n        if (lastOp !== null && lastOp.retain === undefined) {\n          packOp();\n        }\n      }\n      this._changes = changes;\n    }\n    return /** @type {any} */ (changes)\n  }\n}\n\n/**\n * Compute the path from this type to the specified target.\n *\n * @example\n *   // `child` should be accessible via `type.get(path[0]).get(path[1])..`\n *   const path = type.getPathTo(child)\n *   // assuming `type instanceof YArray`\n *   console.log(path) // might look like => [2, 'key1']\n *   child === type.get(path[0]).get(path[1])\n *\n * @param {AbstractType<any>} parent\n * @param {AbstractType<any>} child target\n * @return {Array<string|number>} Path to the target\n *\n * @private\n * @function\n */\nconst getPathTo = (parent, child) => {\n  const path = [];\n  while (child._item !== null && child !== parent) {\n    if (child._item.parentSub !== null) {\n      // parent is map-ish\n      path.unshift(child._item.parentSub);\n    } else {\n      // parent is array-ish\n      let i = 0;\n      let c = /** @type {AbstractType<any>} */ (child._item.parent)._start;\n      while (c !== child._item && c !== null) {\n        if (!c.deleted) {\n          i++;\n        }\n        c = c.right;\n      }\n      path.unshift(i);\n    }\n    child = /** @type {AbstractType<any>} */ (child._item.parent);\n  }\n  return path\n};\n\nconst maxSearchMarker = 80;\n\n/**\n * A unique timestamp that identifies each marker.\n *\n * Time is relative,.. this is more like an ever-increasing clock.\n *\n * @type {number}\n */\nlet globalSearchMarkerTimestamp = 0;\n\nclass ArraySearchMarker {\n  /**\n   * @param {Item} p\n   * @param {number} index\n   */\n  constructor (p, index) {\n    p.marker = true;\n    this.p = p;\n    this.index = index;\n    this.timestamp = globalSearchMarkerTimestamp++;\n  }\n}\n\n/**\n * @param {ArraySearchMarker} marker\n */\nconst refreshMarkerTimestamp = marker => { marker.timestamp = globalSearchMarkerTimestamp++; };\n\n/**\n * This is rather complex so this function is the only thing that should overwrite a marker\n *\n * @param {ArraySearchMarker} marker\n * @param {Item} p\n * @param {number} index\n */\nconst overwriteMarker = (marker, p, index) => {\n  marker.p.marker = false;\n  marker.p = p;\n  p.marker = true;\n  marker.index = index;\n  marker.timestamp = globalSearchMarkerTimestamp++;\n};\n\n/**\n * @param {Array<ArraySearchMarker>} searchMarker\n * @param {Item} p\n * @param {number} index\n */\nconst markPosition = (searchMarker, p, index) => {\n  if (searchMarker.length >= maxSearchMarker) {\n    // override oldest marker (we don't want to create more objects)\n    const marker = searchMarker.reduce((a, b) => a.timestamp < b.timestamp ? a : b);\n    overwriteMarker(marker, p, index);\n    return marker\n  } else {\n    // create new marker\n    const pm = new ArraySearchMarker(p, index);\n    searchMarker.push(pm);\n    return pm\n  }\n};\n\n/**\n * Search marker help us to find positions in the associative array faster.\n *\n * They speed up the process of finding a position without much bookkeeping.\n *\n * A maximum of `maxSearchMarker` objects are created.\n *\n * This function always returns a refreshed marker (updated timestamp)\n *\n * @param {AbstractType<any>} yarray\n * @param {number} index\n */\nconst findMarker = (yarray, index) => {\n  if (yarray._start === null || index === 0 || yarray._searchMarker === null) {\n    return null\n  }\n  const marker = yarray._searchMarker.length === 0 ? null : yarray._searchMarker.reduce((a, b) => math.abs(index - a.index) < math.abs(index - b.index) ? a : b);\n  let p = yarray._start;\n  let pindex = 0;\n  if (marker !== null) {\n    p = marker.p;\n    pindex = marker.index;\n    refreshMarkerTimestamp(marker); // we used it, we might need to use it again\n  }\n  // iterate to right if possible\n  while (p.right !== null && pindex < index) {\n    if (!p.deleted && p.countable) {\n      if (index < pindex + p.length) {\n        break\n      }\n      pindex += p.length;\n    }\n    p = p.right;\n  }\n  // iterate to left if necessary (might be that pindex > index)\n  while (p.left !== null && pindex > index) {\n    p = p.left;\n    if (!p.deleted && p.countable) {\n      pindex -= p.length;\n    }\n  }\n  // we want to make sure that p can't be merged with left, because that would screw up everything\n  // in that cas just return what we have (it is most likely the best marker anyway)\n  // iterate to left until p can't be merged with left\n  while (p.left !== null && p.left.id.client === p.id.client && p.left.id.clock + p.left.length === p.id.clock) {\n    p = p.left;\n    if (!p.deleted && p.countable) {\n      pindex -= p.length;\n    }\n  }\n\n  // @todo remove!\n  // assure position\n  // {\n  //   let start = yarray._start\n  //   let pos = 0\n  //   while (start !== p) {\n  //     if (!start.deleted && start.countable) {\n  //       pos += start.length\n  //     }\n  //     start = /** @type {Item} */ (start.right)\n  //   }\n  //   if (pos !== pindex) {\n  //     debugger\n  //     throw new Error('Gotcha position fail!')\n  //   }\n  // }\n  // if (marker) {\n  //   if (window.lengthes == null) {\n  //     window.lengthes = []\n  //     window.getLengthes = () => window.lengthes.sort((a, b) => a - b)\n  //   }\n  //   window.lengthes.push(marker.index - pindex)\n  //   console.log('distance', marker.index - pindex, 'len', p && p.parent.length)\n  // }\n  if (marker !== null && math.abs(marker.index - pindex) < /** @type {YText|YArray<any>} */ (p.parent).length / maxSearchMarker) {\n    // adjust existing marker\n    overwriteMarker(marker, p, pindex);\n    return marker\n  } else {\n    // create new marker\n    return markPosition(yarray._searchMarker, p, pindex)\n  }\n};\n\n/**\n * Update markers when a change happened.\n *\n * This should be called before doing a deletion!\n *\n * @param {Array<ArraySearchMarker>} searchMarker\n * @param {number} index\n * @param {number} len If insertion, len is positive. If deletion, len is negative.\n */\nconst updateMarkerChanges = (searchMarker, index, len) => {\n  for (let i = searchMarker.length - 1; i >= 0; i--) {\n    const m = searchMarker[i];\n    if (len > 0) {\n      /**\n       * @type {Item|null}\n       */\n      let p = m.p;\n      p.marker = false;\n      // Ideally we just want to do a simple position comparison, but this will only work if\n      // search markers don't point to deleted items for formats.\n      // Iterate marker to prev undeleted countable position so we know what to do when updating a position\n      while (p && (p.deleted || !p.countable)) {\n        p = p.left;\n        if (p && !p.deleted && p.countable) {\n          // adjust position. the loop should break now\n          m.index -= p.length;\n        }\n      }\n      if (p === null || p.marker === true) {\n        // remove search marker if updated position is null or if position is already marked\n        searchMarker.splice(i, 1);\n        continue\n      }\n      m.p = p;\n      p.marker = true;\n    }\n    if (index < m.index || (len > 0 && index === m.index)) { // a simple index <= m.index check would actually suffice\n      m.index = math.max(index, m.index + len);\n    }\n  }\n};\n\n/**\n * Accumulate all (list) children of a type and return them as an Array.\n *\n * @param {AbstractType<any>} t\n * @return {Array<Item>}\n */\nconst getTypeChildren = t => {\n  let s = t._start;\n  const arr = [];\n  while (s) {\n    arr.push(s);\n    s = s.right;\n  }\n  return arr\n};\n\n/**\n * Call event listeners with an event. This will also add an event to all\n * parents (for `.observeDeep` handlers).\n *\n * @template EventType\n * @param {AbstractType<EventType>} type\n * @param {Transaction} transaction\n * @param {EventType} event\n */\nconst callTypeObservers = (type, transaction, event) => {\n  const changedType = type;\n  const changedParentTypes = transaction.changedParentTypes;\n  while (true) {\n    // @ts-ignore\n    map.setIfUndefined(changedParentTypes, type, () => []).push(event);\n    if (type._item === null) {\n      break\n    }\n    type = /** @type {AbstractType<any>} */ (type._item.parent);\n  }\n  callEventHandlerListeners(changedType._eH, event, transaction);\n};\n\n/**\n * @template EventType\n * Abstract Yjs Type class\n */\nclass AbstractType {\n  constructor () {\n    /**\n     * @type {Item|null}\n     */\n    this._item = null;\n    /**\n     * @type {Map<string,Item>}\n     */\n    this._map = new Map();\n    /**\n     * @type {Item|null}\n     */\n    this._start = null;\n    /**\n     * @type {Doc|null}\n     */\n    this.doc = null;\n    this._length = 0;\n    /**\n     * Event handlers\n     * @type {EventHandler<EventType,Transaction>}\n     */\n    this._eH = createEventHandler();\n    /**\n     * Deep event handlers\n     * @type {EventHandler<Array<YEvent>,Transaction>}\n     */\n    this._dEH = createEventHandler();\n    /**\n     * @type {null | Array<ArraySearchMarker>}\n     */\n    this._searchMarker = null;\n  }\n\n  /**\n   * @return {AbstractType<any>|null}\n   */\n  get parent () {\n    return this._item ? /** @type {AbstractType<any>} */ (this._item.parent) : null\n  }\n\n  /**\n   * Integrate this type into the Yjs instance.\n   *\n   * * Save this struct in the os\n   * * This type is sent to other client\n   * * Observer functions are fired\n   *\n   * @param {Doc} y The Yjs instance\n   * @param {Item|null} item\n   */\n  _integrate (y, item) {\n    this.doc = y;\n    this._item = item;\n  }\n\n  /**\n   * @return {AbstractType<EventType>}\n   */\n  _copy () {\n    throw error.methodUnimplemented()\n  }\n\n  /**\n   * @return {AbstractType<EventType>}\n   */\n  clone () {\n    throw error.methodUnimplemented()\n  }\n\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   */\n  _write (encoder) { }\n\n  /**\n   * The first non-deleted item\n   */\n  get _first () {\n    let n = this._start;\n    while (n !== null && n.deleted) {\n      n = n.right;\n    }\n    return n\n  }\n\n  /**\n   * Creates YEvent and calls all type observers.\n   * Must be implemented by each type.\n   *\n   * @param {Transaction} transaction\n   * @param {Set<null|string>} parentSubs Keys changed on this type. `null` if list was modified.\n   */\n  _callObserver (transaction, parentSubs) {\n    if (!transaction.local && this._searchMarker) {\n      this._searchMarker.length = 0;\n    }\n  }\n\n  /**\n   * Observe all events that are created on this type.\n   *\n   * @param {function(EventType, Transaction):void} f Observer function\n   */\n  observe (f) {\n    addEventHandlerListener(this._eH, f);\n  }\n\n  /**\n   * Observe all events that are created by this type and its children.\n   *\n   * @param {function(Array<YEvent>,Transaction):void} f Observer function\n   */\n  observeDeep (f) {\n    addEventHandlerListener(this._dEH, f);\n  }\n\n  /**\n   * Unregister an observer function.\n   *\n   * @param {function(EventType,Transaction):void} f Observer function\n   */\n  unobserve (f) {\n    removeEventHandlerListener(this._eH, f);\n  }\n\n  /**\n   * Unregister an observer function.\n   *\n   * @param {function(Array<YEvent>,Transaction):void} f Observer function\n   */\n  unobserveDeep (f) {\n    removeEventHandlerListener(this._dEH, f);\n  }\n\n  /**\n   * @abstract\n   * @return {any}\n   */\n  toJSON () {}\n}\n\n/**\n * @param {AbstractType<any>} type\n * @param {number} start\n * @param {number} end\n * @return {Array<any>}\n *\n * @private\n * @function\n */\nconst typeListSlice = (type, start, end) => {\n  if (start < 0) {\n    start = type._length + start;\n  }\n  if (end < 0) {\n    end = type._length + end;\n  }\n  let len = end - start;\n  const cs = [];\n  let n = type._start;\n  while (n !== null && len > 0) {\n    if (n.countable && !n.deleted) {\n      const c = n.content.getContent();\n      if (c.length <= start) {\n        start -= c.length;\n      } else {\n        for (let i = start; i < c.length && len > 0; i++) {\n          cs.push(c[i]);\n          len--;\n        }\n        start = 0;\n      }\n    }\n    n = n.right;\n  }\n  return cs\n};\n\n/**\n * @param {AbstractType<any>} type\n * @return {Array<any>}\n *\n * @private\n * @function\n */\nconst typeListToArray = type => {\n  const cs = [];\n  let n = type._start;\n  while (n !== null) {\n    if (n.countable && !n.deleted) {\n      const c = n.content.getContent();\n      for (let i = 0; i < c.length; i++) {\n        cs.push(c[i]);\n      }\n    }\n    n = n.right;\n  }\n  return cs\n};\n\n/**\n * @param {AbstractType<any>} type\n * @param {Snapshot} snapshot\n * @return {Array<any>}\n *\n * @private\n * @function\n */\nconst typeListToArraySnapshot = (type, snapshot) => {\n  const cs = [];\n  let n = type._start;\n  while (n !== null) {\n    if (n.countable && isVisible(n, snapshot)) {\n      const c = n.content.getContent();\n      for (let i = 0; i < c.length; i++) {\n        cs.push(c[i]);\n      }\n    }\n    n = n.right;\n  }\n  return cs\n};\n\n/**\n * Executes a provided function on once on overy element of this YArray.\n *\n * @param {AbstractType<any>} type\n * @param {function(any,number,any):void} f A function to execute on every element of this YArray.\n *\n * @private\n * @function\n */\nconst typeListForEach = (type, f) => {\n  let index = 0;\n  let n = type._start;\n  while (n !== null) {\n    if (n.countable && !n.deleted) {\n      const c = n.content.getContent();\n      for (let i = 0; i < c.length; i++) {\n        f(c[i], index++, type);\n      }\n    }\n    n = n.right;\n  }\n};\n\n/**\n * @template C,R\n * @param {AbstractType<any>} type\n * @param {function(C,number,AbstractType<any>):R} f\n * @return {Array<R>}\n *\n * @private\n * @function\n */\nconst typeListMap = (type, f) => {\n  /**\n   * @type {Array<any>}\n   */\n  const result = [];\n  typeListForEach(type, (c, i) => {\n    result.push(f(c, i, type));\n  });\n  return result\n};\n\n/**\n * @param {AbstractType<any>} type\n * @return {IterableIterator<any>}\n *\n * @private\n * @function\n */\nconst typeListCreateIterator = type => {\n  let n = type._start;\n  /**\n   * @type {Array<any>|null}\n   */\n  let currentContent = null;\n  let currentContentIndex = 0;\n  return {\n    [Symbol.iterator] () {\n      return this\n    },\n    next: () => {\n      // find some content\n      if (currentContent === null) {\n        while (n !== null && n.deleted) {\n          n = n.right;\n        }\n        // check if we reached the end, no need to check currentContent, because it does not exist\n        if (n === null) {\n          return {\n            done: true,\n            value: undefined\n          }\n        }\n        // we found n, so we can set currentContent\n        currentContent = n.content.getContent();\n        currentContentIndex = 0;\n        n = n.right; // we used the content of n, now iterate to next\n      }\n      const value = currentContent[currentContentIndex++];\n      // check if we need to empty currentContent\n      if (currentContent.length <= currentContentIndex) {\n        currentContent = null;\n      }\n      return {\n        done: false,\n        value\n      }\n    }\n  }\n};\n\n/**\n * @param {AbstractType<any>} type\n * @param {number} index\n * @return {any}\n *\n * @private\n * @function\n */\nconst typeListGet = (type, index) => {\n  const marker = findMarker(type, index);\n  let n = type._start;\n  if (marker !== null) {\n    n = marker.p;\n    index -= marker.index;\n  }\n  for (; n !== null; n = n.right) {\n    if (!n.deleted && n.countable) {\n      if (index < n.length) {\n        return n.content.getContent()[index]\n      }\n      index -= n.length;\n    }\n  }\n};\n\n/**\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {Item?} referenceItem\n * @param {Array<Object<string,any>|Array<any>|boolean|number|string|Uint8Array>} content\n *\n * @private\n * @function\n */\nconst typeListInsertGenericsAfter = (transaction, parent, referenceItem, content) => {\n  let left = referenceItem;\n  const doc = transaction.doc;\n  const ownClientId = doc.clientID;\n  const store = doc.store;\n  const right = referenceItem === null ? parent._start : referenceItem.right;\n  /**\n   * @type {Array<Object|Array<any>|number>}\n   */\n  let jsonContent = [];\n  const packJsonContent = () => {\n    if (jsonContent.length > 0) {\n      left = new Item(createID(ownClientId, getState(store, ownClientId)), left, left && left.lastId, right, right && right.id, parent, null, new ContentAny(jsonContent));\n      left.integrate(transaction, 0);\n      jsonContent = [];\n    }\n  };\n  content.forEach(c => {\n    switch (c.constructor) {\n      case Number:\n      case Object:\n      case Boolean:\n      case Array:\n      case String:\n        jsonContent.push(c);\n        break\n      default:\n        packJsonContent();\n        switch (c.constructor) {\n          case Uint8Array:\n          case ArrayBuffer:\n            left = new Item(createID(ownClientId, getState(store, ownClientId)), left, left && left.lastId, right, right && right.id, parent, null, new ContentBinary(new Uint8Array(/** @type {Uint8Array} */ (c))));\n            left.integrate(transaction, 0);\n            break\n          case Doc:\n            left = new Item(createID(ownClientId, getState(store, ownClientId)), left, left && left.lastId, right, right && right.id, parent, null, new ContentDoc(/** @type {Doc} */ (c)));\n            left.integrate(transaction, 0);\n            break\n          default:\n            if (c instanceof AbstractType) {\n              left = new Item(createID(ownClientId, getState(store, ownClientId)), left, left && left.lastId, right, right && right.id, parent, null, new ContentType(c));\n              left.integrate(transaction, 0);\n            } else {\n              throw new Error('Unexpected content type in insert operation')\n            }\n        }\n    }\n  });\n  packJsonContent();\n};\n\nconst lengthExceeded = error.create('Length exceeded!');\n\n/**\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {number} index\n * @param {Array<Object<string,any>|Array<any>|number|string|Uint8Array>} content\n *\n * @private\n * @function\n */\nconst typeListInsertGenerics = (transaction, parent, index, content) => {\n  if (index > parent._length) {\n    throw lengthExceeded\n  }\n  if (index === 0) {\n    if (parent._searchMarker) {\n      updateMarkerChanges(parent._searchMarker, index, content.length);\n    }\n    return typeListInsertGenericsAfter(transaction, parent, null, content)\n  }\n  const startIndex = index;\n  const marker = findMarker(parent, index);\n  let n = parent._start;\n  if (marker !== null) {\n    n = marker.p;\n    index -= marker.index;\n    // we need to iterate one to the left so that the algorithm works\n    if (index === 0) {\n      // @todo refactor this as it actually doesn't consider formats\n      n = n.prev; // important! get the left undeleted item so that we can actually decrease index\n      index += (n && n.countable && !n.deleted) ? n.length : 0;\n    }\n  }\n  for (; n !== null; n = n.right) {\n    if (!n.deleted && n.countable) {\n      if (index <= n.length) {\n        if (index < n.length) {\n          // insert in-between\n          getItemCleanStart(transaction, createID(n.id.client, n.id.clock + index));\n        }\n        break\n      }\n      index -= n.length;\n    }\n  }\n  if (parent._searchMarker) {\n    updateMarkerChanges(parent._searchMarker, startIndex, content.length);\n  }\n  return typeListInsertGenericsAfter(transaction, parent, n, content)\n};\n\n/**\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {number} index\n * @param {number} length\n *\n * @private\n * @function\n */\nconst typeListDelete = (transaction, parent, index, length) => {\n  if (length === 0) { return }\n  const startIndex = index;\n  const startLength = length;\n  const marker = findMarker(parent, index);\n  let n = parent._start;\n  if (marker !== null) {\n    n = marker.p;\n    index -= marker.index;\n  }\n  // compute the first item to be deleted\n  for (; n !== null && index > 0; n = n.right) {\n    if (!n.deleted && n.countable) {\n      if (index < n.length) {\n        getItemCleanStart(transaction, createID(n.id.client, n.id.clock + index));\n      }\n      index -= n.length;\n    }\n  }\n  // delete all items until done\n  while (length > 0 && n !== null) {\n    if (!n.deleted) {\n      if (length < n.length) {\n        getItemCleanStart(transaction, createID(n.id.client, n.id.clock + length));\n      }\n      n.delete(transaction);\n      length -= n.length;\n    }\n    n = n.right;\n  }\n  if (length > 0) {\n    throw lengthExceeded\n  }\n  if (parent._searchMarker) {\n    updateMarkerChanges(parent._searchMarker, startIndex, -startLength + length /* in case we remove the above exception */);\n  }\n};\n\n/**\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {string} key\n *\n * @private\n * @function\n */\nconst typeMapDelete = (transaction, parent, key) => {\n  const c = parent._map.get(key);\n  if (c !== undefined) {\n    c.delete(transaction);\n  }\n};\n\n/**\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {string} key\n * @param {Object|number|Array<any>|string|Uint8Array|AbstractType<any>} value\n *\n * @private\n * @function\n */\nconst typeMapSet = (transaction, parent, key, value) => {\n  const left = parent._map.get(key) || null;\n  const doc = transaction.doc;\n  const ownClientId = doc.clientID;\n  let content;\n  if (value == null) {\n    content = new ContentAny([value]);\n  } else {\n    switch (value.constructor) {\n      case Number:\n      case Object:\n      case Boolean:\n      case Array:\n      case String:\n        content = new ContentAny([value]);\n        break\n      case Uint8Array:\n        content = new ContentBinary(/** @type {Uint8Array} */ (value));\n        break\n      case Doc:\n        content = new ContentDoc(/** @type {Doc} */ (value));\n        break\n      default:\n        if (value instanceof AbstractType) {\n          content = new ContentType(value);\n        } else {\n          throw new Error('Unexpected content type')\n        }\n    }\n  }\n  new Item(createID(ownClientId, getState(doc.store, ownClientId)), left, left && left.lastId, null, null, parent, key, content).integrate(transaction, 0);\n};\n\n/**\n * @param {AbstractType<any>} parent\n * @param {string} key\n * @return {Object<string,any>|number|Array<any>|string|Uint8Array|AbstractType<any>|undefined}\n *\n * @private\n * @function\n */\nconst typeMapGet = (parent, key) => {\n  const val = parent._map.get(key);\n  return val !== undefined && !val.deleted ? val.content.getContent()[val.length - 1] : undefined\n};\n\n/**\n * @param {AbstractType<any>} parent\n * @return {Object<string,Object<string,any>|number|Array<any>|string|Uint8Array|AbstractType<any>|undefined>}\n *\n * @private\n * @function\n */\nconst typeMapGetAll = (parent) => {\n  /**\n   * @type {Object<string,any>}\n   */\n  const res = {};\n  parent._map.forEach((value, key) => {\n    if (!value.deleted) {\n      res[key] = value.content.getContent()[value.length - 1];\n    }\n  });\n  return res\n};\n\n/**\n * @param {AbstractType<any>} parent\n * @param {string} key\n * @return {boolean}\n *\n * @private\n * @function\n */\nconst typeMapHas = (parent, key) => {\n  const val = parent._map.get(key);\n  return val !== undefined && !val.deleted\n};\n\n/**\n * @param {AbstractType<any>} parent\n * @param {string} key\n * @param {Snapshot} snapshot\n * @return {Object<string,any>|number|Array<any>|string|Uint8Array|AbstractType<any>|undefined}\n *\n * @private\n * @function\n */\nconst typeMapGetSnapshot = (parent, key, snapshot) => {\n  let v = parent._map.get(key) || null;\n  while (v !== null && (!snapshot.sv.has(v.id.client) || v.id.clock >= (snapshot.sv.get(v.id.client) || 0))) {\n    v = v.left;\n  }\n  return v !== null && isVisible(v, snapshot) ? v.content.getContent()[v.length - 1] : undefined\n};\n\n/**\n * @param {Map<string,Item>} map\n * @return {IterableIterator<Array<any>>}\n *\n * @private\n * @function\n */\nconst createMapIterator = map => iterator.iteratorFilter(map.entries(), /** @param {any} entry */ entry => !entry[1].deleted);\n\n/**\n * @module YArray\n */\n\n/**\n * Event that describes the changes on a YArray\n * @template T\n */\nclass YArrayEvent extends YEvent {\n  /**\n   * @param {YArray<T>} yarray The changed type\n   * @param {Transaction} transaction The transaction object\n   */\n  constructor (yarray, transaction) {\n    super(yarray, transaction);\n    this._transaction = transaction;\n  }\n}\n\n/**\n * A shared Array implementation.\n * @template T\n * @extends AbstractType<YArrayEvent<T>>\n * @implements {Iterable<T>}\n */\nclass YArray extends AbstractType {\n  constructor () {\n    super();\n    /**\n     * @type {Array<any>?}\n     * @private\n     */\n    this._prelimContent = [];\n    /**\n     * @type {Array<ArraySearchMarker>}\n     */\n    this._searchMarker = [];\n  }\n\n  /**\n   * Construct a new YArray containing the specified items.\n   * @template T\n   * @param {Array<T>} items\n   * @return {YArray<T>}\n   */\n  static from (items) {\n    const a = new YArray();\n    a.push(items);\n    return a\n  }\n\n  /**\n   * Integrate this type into the Yjs instance.\n   *\n   * * Save this struct in the os\n   * * This type is sent to other client\n   * * Observer functions are fired\n   *\n   * @param {Doc} y The Yjs instance\n   * @param {Item} item\n   */\n  _integrate (y, item) {\n    super._integrate(y, item);\n    this.insert(0, /** @type {Array<any>} */ (this._prelimContent));\n    this._prelimContent = null;\n  }\n\n  _copy () {\n    return new YArray()\n  }\n\n  /**\n   * @return {YArray<T>}\n   */\n  clone () {\n    const arr = new YArray();\n    arr.insert(0, this.toArray().map(el =>\n      el instanceof AbstractType ? el.clone() : el\n    ));\n    return arr\n  }\n\n  get length () {\n    return this._prelimContent === null ? this._length : this._prelimContent.length\n  }\n\n  /**\n   * Creates YArrayEvent and calls observers.\n   *\n   * @param {Transaction} transaction\n   * @param {Set<null|string>} parentSubs Keys changed on this type. `null` if list was modified.\n   */\n  _callObserver (transaction, parentSubs) {\n    super._callObserver(transaction, parentSubs);\n    callTypeObservers(this, transaction, new YArrayEvent(this, transaction));\n  }\n\n  /**\n   * Inserts new content at an index.\n   *\n   * Important: This function expects an array of content. Not just a content\n   * object. The reason for this \"weirdness\" is that inserting several elements\n   * is very efficient when it is done as a single operation.\n   *\n   * @example\n   *  // Insert character 'a' at position 0\n   *  yarray.insert(0, ['a'])\n   *  // Insert numbers 1, 2 at position 1\n   *  yarray.insert(1, [1, 2])\n   *\n   * @param {number} index The index to insert content at.\n   * @param {Array<T>} content The array of content\n   */\n  insert (index, content) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        typeListInsertGenerics(transaction, this, index, content);\n      });\n    } else {\n      /** @type {Array<any>} */ (this._prelimContent).splice(index, 0, ...content);\n    }\n  }\n\n  /**\n   * Appends content to this YArray.\n   *\n   * @param {Array<T>} content Array of content to append.\n   */\n  push (content) {\n    this.insert(this.length, content);\n  }\n\n  /**\n   * Preppends content to this YArray.\n   *\n   * @param {Array<T>} content Array of content to preppend.\n   */\n  unshift (content) {\n    this.insert(0, content);\n  }\n\n  /**\n   * Deletes elements starting from an index.\n   *\n   * @param {number} index Index at which to start deleting elements\n   * @param {number} length The number of elements to remove. Defaults to 1.\n   */\n  delete (index, length = 1) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        typeListDelete(transaction, this, index, length);\n      });\n    } else {\n      /** @type {Array<any>} */ (this._prelimContent).splice(index, length);\n    }\n  }\n\n  /**\n   * Returns the i-th element from a YArray.\n   *\n   * @param {number} index The index of the element to return from the YArray\n   * @return {T}\n   */\n  get (index) {\n    return typeListGet(this, index)\n  }\n\n  /**\n   * Transforms this YArray to a JavaScript Array.\n   *\n   * @return {Array<T>}\n   */\n  toArray () {\n    return typeListToArray(this)\n  }\n\n  /**\n   * Transforms this YArray to a JavaScript Array.\n   *\n   * @param {number} [start]\n   * @param {number} [end]\n   * @return {Array<T>}\n   */\n  slice (start = 0, end = this.length) {\n    return typeListSlice(this, start, end)\n  }\n\n  /**\n   * Transforms this Shared Type to a JSON object.\n   *\n   * @return {Array<any>}\n   */\n  toJSON () {\n    return this.map(c => c instanceof AbstractType ? c.toJSON() : c)\n  }\n\n  /**\n   * Returns an Array with the result of calling a provided function on every\n   * element of this YArray.\n   *\n   * @template T,M\n   * @param {function(T,number,YArray<T>):M} f Function that produces an element of the new Array\n   * @return {Array<M>} A new array with each element being the result of the\n   *                 callback function\n   */\n  map (f) {\n    return typeListMap(this, /** @type {any} */ (f))\n  }\n\n  /**\n   * Executes a provided function on once on overy element of this YArray.\n   *\n   * @param {function(T,number,YArray<T>):void} f A function to execute on every element of this YArray.\n   */\n  forEach (f) {\n    typeListForEach(this, f);\n  }\n\n  /**\n   * @return {IterableIterator<T>}\n   */\n  [Symbol.iterator] () {\n    return typeListCreateIterator(this)\n  }\n\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   */\n  _write (encoder) {\n    encoder.writeTypeRef(YArrayRefID);\n  }\n}\n\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n *\n * @private\n * @function\n */\nconst readYArray = decoder => new YArray();\n\n/**\n * @template T\n * Event that describes the changes on a YMap.\n */\nclass YMapEvent extends YEvent {\n  /**\n   * @param {YMap<T>} ymap The YArray that changed.\n   * @param {Transaction} transaction\n   * @param {Set<any>} subs The keys that changed.\n   */\n  constructor (ymap, transaction, subs) {\n    super(ymap, transaction);\n    this.keysChanged = subs;\n  }\n}\n\n/**\n * @template T number|string|Object|Array|Uint8Array\n * A shared Map implementation.\n *\n * @extends AbstractType<YMapEvent<T>>\n * @implements {Iterable<T>}\n */\nclass YMap extends AbstractType {\n  /**\n   *\n   * @param {Iterable<readonly [string, any]>=} entries - an optional iterable to initialize the YMap\n   */\n  constructor (entries) {\n    super();\n    /**\n     * @type {Map<string,any>?}\n     * @private\n     */\n    this._prelimContent = null;\n\n    if (entries === undefined) {\n      this._prelimContent = new Map();\n    } else {\n      this._prelimContent = new Map(entries);\n    }\n  }\n\n  /**\n   * Integrate this type into the Yjs instance.\n   *\n   * * Save this struct in the os\n   * * This type is sent to other client\n   * * Observer functions are fired\n   *\n   * @param {Doc} y The Yjs instance\n   * @param {Item} item\n   */\n  _integrate (y, item) {\n    super._integrate(y, item)\n    ;/** @type {Map<string, any>} */ (this._prelimContent).forEach((value, key) => {\n      this.set(key, value);\n    });\n    this._prelimContent = null;\n  }\n\n  _copy () {\n    return new YMap()\n  }\n\n  /**\n   * @return {YMap<T>}\n   */\n  clone () {\n    const map = new YMap();\n    this.forEach((value, key) => {\n      map.set(key, value instanceof AbstractType ? value.clone() : value);\n    });\n    return map\n  }\n\n  /**\n   * Creates YMapEvent and calls observers.\n   *\n   * @param {Transaction} transaction\n   * @param {Set<null|string>} parentSubs Keys changed on this type. `null` if list was modified.\n   */\n  _callObserver (transaction, parentSubs) {\n    callTypeObservers(this, transaction, new YMapEvent(this, transaction, parentSubs));\n  }\n\n  /**\n   * Transforms this Shared Type to a JSON object.\n   *\n   * @return {Object<string,T>}\n   */\n  toJSON () {\n    /**\n     * @type {Object<string,T>}\n     */\n    const map = {};\n    this._map.forEach((item, key) => {\n      if (!item.deleted) {\n        const v = item.content.getContent()[item.length - 1];\n        map[key] = v instanceof AbstractType ? v.toJSON() : v;\n      }\n    });\n    return map\n  }\n\n  /**\n   * Returns the size of the YMap (count of key/value pairs)\n   *\n   * @return {number}\n   */\n  get size () {\n    return [...createMapIterator(this._map)].length\n  }\n\n  /**\n   * Returns the keys for each element in the YMap Type.\n   *\n   * @return {IterableIterator<string>}\n   */\n  keys () {\n    return iterator.iteratorMap(createMapIterator(this._map), /** @param {any} v */ v => v[0])\n  }\n\n  /**\n   * Returns the values for each element in the YMap Type.\n   *\n   * @return {IterableIterator<any>}\n   */\n  values () {\n    return iterator.iteratorMap(createMapIterator(this._map), /** @param {any} v */ v => v[1].content.getContent()[v[1].length - 1])\n  }\n\n  /**\n   * Returns an Iterator of [key, value] pairs\n   *\n   * @return {IterableIterator<any>}\n   */\n  entries () {\n    return iterator.iteratorMap(createMapIterator(this._map), /** @param {any} v */ v => [v[0], v[1].content.getContent()[v[1].length - 1]])\n  }\n\n  /**\n   * Executes a provided function on once on every key-value pair.\n   *\n   * @param {function(T,string,YMap<T>):void} f A function to execute on every element of this YArray.\n   */\n  forEach (f) {\n    /**\n     * @type {Object<string,T>}\n     */\n    const map = {};\n    this._map.forEach((item, key) => {\n      if (!item.deleted) {\n        f(item.content.getContent()[item.length - 1], key, this);\n      }\n    });\n    return map\n  }\n\n  /**\n   * @return {IterableIterator<T>}\n   */\n  [Symbol.iterator] () {\n    return this.entries()\n  }\n\n  /**\n   * Remove a specified element from this YMap.\n   *\n   * @param {string} key The key of the element to remove.\n   */\n  delete (key) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        typeMapDelete(transaction, this, key);\n      });\n    } else {\n      /** @type {Map<string, any>} */ (this._prelimContent).delete(key);\n    }\n  }\n\n  /**\n   * Adds or updates an element with a specified key and value.\n   *\n   * @param {string} key The key of the element to add to this YMap\n   * @param {T} value The value of the element to add\n   */\n  set (key, value) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        typeMapSet(transaction, this, key, value);\n      });\n    } else {\n      /** @type {Map<string, any>} */ (this._prelimContent).set(key, value);\n    }\n    return value\n  }\n\n  /**\n   * Returns a specified element from this YMap.\n   *\n   * @param {string} key\n   * @return {T|undefined}\n   */\n  get (key) {\n    return /** @type {any} */ (typeMapGet(this, key))\n  }\n\n  /**\n   * Returns a boolean indicating whether the specified key exists or not.\n   *\n   * @param {string} key The key to test.\n   * @return {boolean}\n   */\n  has (key) {\n    return typeMapHas(this, key)\n  }\n\n  /**\n   * Removes all elements from this YMap.\n   */\n  clear () {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        this.forEach(function (value, key, map) {\n          typeMapDelete(transaction, map, key);\n        });\n      });\n    } else {\n      /** @type {Map<string, any>} */ (this._prelimContent).clear();\n    }\n  }\n\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   */\n  _write (encoder) {\n    encoder.writeTypeRef(YMapRefID);\n  }\n}\n\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n *\n * @private\n * @function\n */\nconst readYMap = decoder => new YMap();\n\n/**\n * @param {any} a\n * @param {any} b\n * @return {boolean}\n */\nconst equalAttrs = (a, b) => a === b || (typeof a === 'object' && typeof b === 'object' && a && b && object.equalFlat(a, b));\n\nclass ItemTextListPosition {\n  /**\n   * @param {Item|null} left\n   * @param {Item|null} right\n   * @param {number} index\n   * @param {Map<string,any>} currentAttributes\n   */\n  constructor (left, right, index, currentAttributes) {\n    this.left = left;\n    this.right = right;\n    this.index = index;\n    this.currentAttributes = currentAttributes;\n  }\n\n  /**\n   * Only call this if you know that this.right is defined\n   */\n  forward () {\n    if (this.right === null) {\n      error.unexpectedCase();\n    }\n    switch (this.right.content.constructor) {\n      case ContentEmbed:\n      case ContentString:\n        if (!this.right.deleted) {\n          this.index += this.right.length;\n        }\n        break\n      case ContentFormat:\n        if (!this.right.deleted) {\n          updateCurrentAttributes(this.currentAttributes, /** @type {ContentFormat} */ (this.right.content));\n        }\n        break\n    }\n    this.left = this.right;\n    this.right = this.right.right;\n  }\n}\n\n/**\n * @param {Transaction} transaction\n * @param {ItemTextListPosition} pos\n * @param {number} count steps to move forward\n * @return {ItemTextListPosition}\n *\n * @private\n * @function\n */\nconst findNextPosition = (transaction, pos, count) => {\n  while (pos.right !== null && count > 0) {\n    switch (pos.right.content.constructor) {\n      case ContentEmbed:\n      case ContentString:\n        if (!pos.right.deleted) {\n          if (count < pos.right.length) {\n            // split right\n            getItemCleanStart(transaction, createID(pos.right.id.client, pos.right.id.clock + count));\n          }\n          pos.index += pos.right.length;\n          count -= pos.right.length;\n        }\n        break\n      case ContentFormat:\n        if (!pos.right.deleted) {\n          updateCurrentAttributes(pos.currentAttributes, /** @type {ContentFormat} */ (pos.right.content));\n        }\n        break\n    }\n    pos.left = pos.right;\n    pos.right = pos.right.right;\n    // pos.forward() - we don't forward because that would halve the performance because we already do the checks above\n  }\n  return pos\n};\n\n/**\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {number} index\n * @return {ItemTextListPosition}\n *\n * @private\n * @function\n */\nconst findPosition = (transaction, parent, index) => {\n  const currentAttributes = new Map();\n  const marker = findMarker(parent, index);\n  if (marker) {\n    const pos = new ItemTextListPosition(marker.p.left, marker.p, marker.index, currentAttributes);\n    return findNextPosition(transaction, pos, index - marker.index)\n  } else {\n    const pos = new ItemTextListPosition(null, parent._start, 0, currentAttributes);\n    return findNextPosition(transaction, pos, index)\n  }\n};\n\n/**\n * Negate applied formats\n *\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {ItemTextListPosition} currPos\n * @param {Map<string,any>} negatedAttributes\n *\n * @private\n * @function\n */\nconst insertNegatedAttributes = (transaction, parent, currPos, negatedAttributes) => {\n  // check if we really need to remove attributes\n  while (\n    currPos.right !== null && (\n      currPos.right.deleted === true || (\n        currPos.right.content.constructor === ContentFormat &&\n        equalAttrs(negatedAttributes.get(/** @type {ContentFormat} */ (currPos.right.content).key), /** @type {ContentFormat} */ (currPos.right.content).value)\n      )\n    )\n  ) {\n    if (!currPos.right.deleted) {\n      negatedAttributes.delete(/** @type {ContentFormat} */ (currPos.right.content).key);\n    }\n    currPos.forward();\n  }\n  const doc = transaction.doc;\n  const ownClientId = doc.clientID;\n  negatedAttributes.forEach((val, key) => {\n    const left = currPos.left;\n    const right = currPos.right;\n    const nextFormat = new Item(createID(ownClientId, getState(doc.store, ownClientId)), left, left && left.lastId, right, right && right.id, parent, null, new ContentFormat(key, val));\n    nextFormat.integrate(transaction, 0);\n    currPos.right = nextFormat;\n    currPos.forward();\n  });\n};\n\n/**\n * @param {Map<string,any>} currentAttributes\n * @param {ContentFormat} format\n *\n * @private\n * @function\n */\nconst updateCurrentAttributes = (currentAttributes, format) => {\n  const { key, value } = format;\n  if (value === null) {\n    currentAttributes.delete(key);\n  } else {\n    currentAttributes.set(key, value);\n  }\n};\n\n/**\n * @param {ItemTextListPosition} currPos\n * @param {Object<string,any>} attributes\n *\n * @private\n * @function\n */\nconst minimizeAttributeChanges = (currPos, attributes) => {\n  // go right while attributes[right.key] === right.value (or right is deleted)\n  while (true) {\n    if (currPos.right === null) {\n      break\n    } else if (currPos.right.deleted || (currPos.right.content.constructor === ContentFormat && equalAttrs(attributes[(/** @type {ContentFormat} */ (currPos.right.content)).key] || null, /** @type {ContentFormat} */ (currPos.right.content).value))) ; else {\n      break\n    }\n    currPos.forward();\n  }\n};\n\n/**\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {ItemTextListPosition} currPos\n * @param {Object<string,any>} attributes\n * @return {Map<string,any>}\n *\n * @private\n * @function\n **/\nconst insertAttributes = (transaction, parent, currPos, attributes) => {\n  const doc = transaction.doc;\n  const ownClientId = doc.clientID;\n  const negatedAttributes = new Map();\n  // insert format-start items\n  for (const key in attributes) {\n    const val = attributes[key];\n    const currentVal = currPos.currentAttributes.get(key) || null;\n    if (!equalAttrs(currentVal, val)) {\n      // save negated attribute (set null if currentVal undefined)\n      negatedAttributes.set(key, currentVal);\n      const { left, right } = currPos;\n      currPos.right = new Item(createID(ownClientId, getState(doc.store, ownClientId)), left, left && left.lastId, right, right && right.id, parent, null, new ContentFormat(key, val));\n      currPos.right.integrate(transaction, 0);\n      currPos.forward();\n    }\n  }\n  return negatedAttributes\n};\n\n/**\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {ItemTextListPosition} currPos\n * @param {string|object} text\n * @param {Object<string,any>} attributes\n *\n * @private\n * @function\n **/\nconst insertText = (transaction, parent, currPos, text, attributes) => {\n  currPos.currentAttributes.forEach((val, key) => {\n    if (attributes[key] === undefined) {\n      attributes[key] = null;\n    }\n  });\n  const doc = transaction.doc;\n  const ownClientId = doc.clientID;\n  minimizeAttributeChanges(currPos, attributes);\n  const negatedAttributes = insertAttributes(transaction, parent, currPos, attributes);\n  // insert content\n  const content = text.constructor === String ? new ContentString(/** @type {string} */ (text)) : new ContentEmbed(text);\n  let { left, right, index } = currPos;\n  if (parent._searchMarker) {\n    updateMarkerChanges(parent._searchMarker, currPos.index, content.getLength());\n  }\n  right = new Item(createID(ownClientId, getState(doc.store, ownClientId)), left, left && left.lastId, right, right && right.id, parent, null, content);\n  right.integrate(transaction, 0);\n  currPos.right = right;\n  currPos.index = index;\n  currPos.forward();\n  insertNegatedAttributes(transaction, parent, currPos, negatedAttributes);\n};\n\n/**\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {ItemTextListPosition} currPos\n * @param {number} length\n * @param {Object<string,any>} attributes\n *\n * @private\n * @function\n */\nconst formatText = (transaction, parent, currPos, length, attributes) => {\n  const doc = transaction.doc;\n  const ownClientId = doc.clientID;\n  minimizeAttributeChanges(currPos, attributes);\n  const negatedAttributes = insertAttributes(transaction, parent, currPos, attributes);\n  // iterate until first non-format or null is found\n  // delete all formats with attributes[format.key] != null\n  while (length > 0 && currPos.right !== null) {\n    if (!currPos.right.deleted) {\n      switch (currPos.right.content.constructor) {\n        case ContentFormat: {\n          const { key, value } = /** @type {ContentFormat} */ (currPos.right.content);\n          const attr = attributes[key];\n          if (attr !== undefined) {\n            if (equalAttrs(attr, value)) {\n              negatedAttributes.delete(key);\n            } else {\n              negatedAttributes.set(key, value);\n            }\n            currPos.right.delete(transaction);\n          }\n          break\n        }\n        case ContentEmbed:\n        case ContentString:\n          if (length < currPos.right.length) {\n            getItemCleanStart(transaction, createID(currPos.right.id.client, currPos.right.id.clock + length));\n          }\n          length -= currPos.right.length;\n          break\n      }\n    }\n    currPos.forward();\n  }\n  // Quill just assumes that the editor starts with a newline and that it always\n  // ends with a newline. We only insert that newline when a new newline is\n  // inserted - i.e when length is bigger than type.length\n  if (length > 0) {\n    let newlines = '';\n    for (; length > 0; length--) {\n      newlines += '\\n';\n    }\n    currPos.right = new Item(createID(ownClientId, getState(doc.store, ownClientId)), currPos.left, currPos.left && currPos.left.lastId, currPos.right, currPos.right && currPos.right.id, parent, null, new ContentString(newlines));\n    currPos.right.integrate(transaction, 0);\n    currPos.forward();\n  }\n  insertNegatedAttributes(transaction, parent, currPos, negatedAttributes);\n};\n\n/**\n * Call this function after string content has been deleted in order to\n * clean up formatting Items.\n *\n * @param {Transaction} transaction\n * @param {Item} start\n * @param {Item|null} end exclusive end, automatically iterates to the next Content Item\n * @param {Map<string,any>} startAttributes\n * @param {Map<string,any>} endAttributes This attribute is modified!\n * @return {number} The amount of formatting Items deleted.\n *\n * @function\n */\nconst cleanupFormattingGap = (transaction, start, end, startAttributes, endAttributes) => {\n  while (end && end.content.constructor !== ContentString && end.content.constructor !== ContentEmbed) {\n    if (!end.deleted && end.content.constructor === ContentFormat) {\n      updateCurrentAttributes(endAttributes, /** @type {ContentFormat} */ (end.content));\n    }\n    end = end.right;\n  }\n  let cleanups = 0;\n  while (start !== end) {\n    if (!start.deleted) {\n      const content = start.content;\n      switch (content.constructor) {\n        case ContentFormat: {\n          const { key, value } = /** @type {ContentFormat} */ (content);\n          if ((endAttributes.get(key) || null) !== value || (startAttributes.get(key) || null) === value) {\n            // Either this format is overwritten or it is not necessary because the attribute already existed.\n            start.delete(transaction);\n            cleanups++;\n          }\n          break\n        }\n      }\n    }\n    start = /** @type {Item} */ (start.right);\n  }\n  return cleanups\n};\n\n/**\n * @param {Transaction} transaction\n * @param {Item | null} item\n */\nconst cleanupContextlessFormattingGap = (transaction, item) => {\n  // iterate until item.right is null or content\n  while (item && item.right && (item.right.deleted || (item.right.content.constructor !== ContentString && item.right.content.constructor !== ContentEmbed))) {\n    item = item.right;\n  }\n  const attrs = new Set();\n  // iterate back until a content item is found\n  while (item && (item.deleted || (item.content.constructor !== ContentString && item.content.constructor !== ContentEmbed))) {\n    if (!item.deleted && item.content.constructor === ContentFormat) {\n      const key = /** @type {ContentFormat} */ (item.content).key;\n      if (attrs.has(key)) {\n        item.delete(transaction);\n      } else {\n        attrs.add(key);\n      }\n    }\n    item = item.left;\n  }\n};\n\n/**\n * This function is experimental and subject to change / be removed.\n *\n * Ideally, we don't need this function at all. Formatting attributes should be cleaned up\n * automatically after each change. This function iterates twice over the complete YText type\n * and removes unnecessary formatting attributes. This is also helpful for testing.\n *\n * This function won't be exported anymore as soon as there is confidence that the YText type works as intended.\n *\n * @param {YText} type\n * @return {number} How many formatting attributes have been cleaned up.\n */\nconst cleanupYTextFormatting = type => {\n  let res = 0;\n  transact(/** @type {Doc} */ (type.doc), transaction => {\n    let start = /** @type {Item} */ (type._start);\n    let end = type._start;\n    let startAttributes = map.create();\n    const currentAttributes = map.copy(startAttributes);\n    while (end) {\n      if (end.deleted === false) {\n        switch (end.content.constructor) {\n          case ContentFormat:\n            updateCurrentAttributes(currentAttributes, /** @type {ContentFormat} */ (end.content));\n            break\n          case ContentEmbed:\n          case ContentString:\n            res += cleanupFormattingGap(transaction, start, end, startAttributes, currentAttributes);\n            startAttributes = map.copy(currentAttributes);\n            start = end;\n            break\n        }\n      }\n      end = end.right;\n    }\n  });\n  return res\n};\n\n/**\n * @param {Transaction} transaction\n * @param {ItemTextListPosition} currPos\n * @param {number} length\n * @return {ItemTextListPosition}\n *\n * @private\n * @function\n */\nconst deleteText = (transaction, currPos, length) => {\n  const startLength = length;\n  const startAttrs = map.copy(currPos.currentAttributes);\n  const start = currPos.right;\n  while (length > 0 && currPos.right !== null) {\n    if (currPos.right.deleted === false) {\n      switch (currPos.right.content.constructor) {\n        case ContentEmbed:\n        case ContentString:\n          if (length < currPos.right.length) {\n            getItemCleanStart(transaction, createID(currPos.right.id.client, currPos.right.id.clock + length));\n          }\n          length -= currPos.right.length;\n          currPos.right.delete(transaction);\n          break\n      }\n    }\n    currPos.forward();\n  }\n  if (start) {\n    cleanupFormattingGap(transaction, start, currPos.right, startAttrs, map.copy(currPos.currentAttributes));\n  }\n  const parent = /** @type {AbstractType<any>} */ (/** @type {Item} */ (currPos.left || currPos.right).parent);\n  if (parent._searchMarker) {\n    updateMarkerChanges(parent._searchMarker, currPos.index, -startLength + length);\n  }\n  return currPos\n};\n\n/**\n * The Quill Delta format represents changes on a text document with\n * formatting information. For mor information visit {@link https://quilljs.com/docs/delta/|Quill Delta}\n *\n * @example\n *   {\n *     ops: [\n *       { insert: 'Gandalf', attributes: { bold: true } },\n *       { insert: ' the ' },\n *       { insert: 'Grey', attributes: { color: '#cccccc' } }\n *     ]\n *   }\n *\n */\n\n/**\n  * Attributes that can be assigned to a selection of text.\n  *\n  * @example\n  *   {\n  *     bold: true,\n  *     font-size: '40px'\n  *   }\n  *\n  * @typedef {Object} TextAttributes\n  */\n\n/**\n * Event that describes the changes on a YText type.\n */\nclass YTextEvent extends YEvent {\n  /**\n   * @param {YText} ytext\n   * @param {Transaction} transaction\n   * @param {Set<any>} subs The keys that changed\n   */\n  constructor (ytext, transaction, subs) {\n    super(ytext, transaction);\n    /**\n     * Whether the children changed.\n     * @type {Boolean}\n     * @private\n     */\n    this.childListChanged = false;\n    /**\n     * Set of all changed attributes.\n     * @type {Set<string>}\n     */\n    this.keysChanged = new Set();\n    subs.forEach((sub) => {\n      if (sub === null) {\n        this.childListChanged = true;\n      } else {\n        this.keysChanged.add(sub);\n      }\n    });\n  }\n\n  /**\n   * @type {{added:Set<Item>,deleted:Set<Item>,keys:Map<string,{action:'add'|'update'|'delete',oldValue:any}>,delta:Array<{insert?:Array<any>|string, delete?:number, retain?:number}>}}\n   */\n  get changes () {\n    if (this._changes === null) {\n      /**\n       * @type {{added:Set<Item>,deleted:Set<Item>,keys:Map<string,{action:'add'|'update'|'delete',oldValue:any}>,delta:Array<{insert?:Array<any>|string, delete?:number, retain?:number}>}}\n       */\n      const changes = {\n        keys: this.keys,\n        delta: this.delta,\n        added: new Set(),\n        deleted: new Set()\n      };\n      this._changes = changes;\n    }\n    return /** @type {any} */ (this._changes)\n  }\n\n  /**\n   * Compute the changes in the delta format.\n   * A {@link https://quilljs.com/docs/delta/|Quill Delta}) that represents the changes on the document.\n   *\n   * @type {Array<{insert?:string, delete?:number, retain?:number, attributes?: Object<string,any>}>}\n   *\n   * @public\n   */\n  get delta () {\n    if (this._delta === null) {\n      const y = /** @type {Doc} */ (this.target.doc);\n      /**\n       * @type {Array<{insert?:string, delete?:number, retain?:number, attributes?: Object<string,any>}>}\n       */\n      const delta = [];\n      transact(y, transaction => {\n        const currentAttributes = new Map(); // saves all current attributes for insert\n        const oldAttributes = new Map();\n        let item = this.target._start;\n        /**\n         * @type {string?}\n         */\n        let action = null;\n        /**\n         * @type {Object<string,any>}\n         */\n        const attributes = {}; // counts added or removed new attributes for retain\n        /**\n         * @type {string|object}\n         */\n        let insert = '';\n        let retain = 0;\n        let deleteLen = 0;\n        const addOp = () => {\n          if (action !== null) {\n            /**\n             * @type {any}\n             */\n            let op;\n            switch (action) {\n              case 'delete':\n                op = { delete: deleteLen };\n                deleteLen = 0;\n                break\n              case 'insert':\n                op = { insert };\n                if (currentAttributes.size > 0) {\n                  op.attributes = {};\n                  currentAttributes.forEach((value, key) => {\n                    if (value !== null) {\n                      op.attributes[key] = value;\n                    }\n                  });\n                }\n                insert = '';\n                break\n              case 'retain':\n                op = { retain };\n                if (Object.keys(attributes).length > 0) {\n                  op.attributes = {};\n                  for (const key in attributes) {\n                    op.attributes[key] = attributes[key];\n                  }\n                }\n                retain = 0;\n                break\n            }\n            delta.push(op);\n            action = null;\n          }\n        };\n        while (item !== null) {\n          switch (item.content.constructor) {\n            case ContentEmbed:\n              if (this.adds(item)) {\n                if (!this.deletes(item)) {\n                  addOp();\n                  action = 'insert';\n                  insert = /** @type {ContentEmbed} */ (item.content).embed;\n                  addOp();\n                }\n              } else if (this.deletes(item)) {\n                if (action !== 'delete') {\n                  addOp();\n                  action = 'delete';\n                }\n                deleteLen += 1;\n              } else if (!item.deleted) {\n                if (action !== 'retain') {\n                  addOp();\n                  action = 'retain';\n                }\n                retain += 1;\n              }\n              break\n            case ContentString:\n              if (this.adds(item)) {\n                if (!this.deletes(item)) {\n                  if (action !== 'insert') {\n                    addOp();\n                    action = 'insert';\n                  }\n                  insert += /** @type {ContentString} */ (item.content).str;\n                }\n              } else if (this.deletes(item)) {\n                if (action !== 'delete') {\n                  addOp();\n                  action = 'delete';\n                }\n                deleteLen += item.length;\n              } else if (!item.deleted) {\n                if (action !== 'retain') {\n                  addOp();\n                  action = 'retain';\n                }\n                retain += item.length;\n              }\n              break\n            case ContentFormat: {\n              const { key, value } = /** @type {ContentFormat} */ (item.content);\n              if (this.adds(item)) {\n                if (!this.deletes(item)) {\n                  const curVal = currentAttributes.get(key) || null;\n                  if (!equalAttrs(curVal, value)) {\n                    if (action === 'retain') {\n                      addOp();\n                    }\n                    if (equalAttrs(value, (oldAttributes.get(key) || null))) {\n                      delete attributes[key];\n                    } else {\n                      attributes[key] = value;\n                    }\n                  } else {\n                    item.delete(transaction);\n                  }\n                }\n              } else if (this.deletes(item)) {\n                oldAttributes.set(key, value);\n                const curVal = currentAttributes.get(key) || null;\n                if (!equalAttrs(curVal, value)) {\n                  if (action === 'retain') {\n                    addOp();\n                  }\n                  attributes[key] = curVal;\n                }\n              } else if (!item.deleted) {\n                oldAttributes.set(key, value);\n                const attr = attributes[key];\n                if (attr !== undefined) {\n                  if (!equalAttrs(attr, value)) {\n                    if (action === 'retain') {\n                      addOp();\n                    }\n                    if (value === null) {\n                      attributes[key] = value;\n                    } else {\n                      delete attributes[key];\n                    }\n                  } else {\n                    item.delete(transaction);\n                  }\n                }\n              }\n              if (!item.deleted) {\n                if (action === 'insert') {\n                  addOp();\n                }\n                updateCurrentAttributes(currentAttributes, /** @type {ContentFormat} */ (item.content));\n              }\n              break\n            }\n          }\n          item = item.right;\n        }\n        addOp();\n        while (delta.length > 0) {\n          const lastOp = delta[delta.length - 1];\n          if (lastOp.retain !== undefined && lastOp.attributes === undefined) {\n            // retain delta's if they don't assign attributes\n            delta.pop();\n          } else {\n            break\n          }\n        }\n      });\n      this._delta = delta;\n    }\n    return /** @type {any} */ (this._delta)\n  }\n}\n\n/**\n * Type that represents text with formatting information.\n *\n * This type replaces y-richtext as this implementation is able to handle\n * block formats (format information on a paragraph), embeds (complex elements\n * like pictures and videos), and text formats (**bold**, *italic*).\n *\n * @extends AbstractType<YTextEvent>\n */\nclass YText extends AbstractType {\n  /**\n   * @param {String} [string] The initial value of the YText.\n   */\n  constructor (string) {\n    super();\n    /**\n     * Array of pending operations on this type\n     * @type {Array<function():void>?}\n     */\n    this._pending = string !== undefined ? [() => this.insert(0, string)] : [];\n    /**\n     * @type {Array<ArraySearchMarker>}\n     */\n    this._searchMarker = [];\n  }\n\n  /**\n   * Number of characters of this text type.\n   *\n   * @type {number}\n   */\n  get length () {\n    return this._length\n  }\n\n  /**\n   * @param {Doc} y\n   * @param {Item} item\n   */\n  _integrate (y, item) {\n    super._integrate(y, item);\n    try {\n      /** @type {Array<function>} */ (this._pending).forEach(f => f());\n    } catch (e) {\n      console.error(e);\n    }\n    this._pending = null;\n  }\n\n  _copy () {\n    return new YText()\n  }\n\n  /**\n   * @return {YText}\n   */\n  clone () {\n    const text = new YText();\n    text.applyDelta(this.toDelta());\n    return text\n  }\n\n  /**\n   * Creates YTextEvent and calls observers.\n   *\n   * @param {Transaction} transaction\n   * @param {Set<null|string>} parentSubs Keys changed on this type. `null` if list was modified.\n   */\n  _callObserver (transaction, parentSubs) {\n    super._callObserver(transaction, parentSubs);\n    const event = new YTextEvent(this, transaction, parentSubs);\n    const doc = transaction.doc;\n    callTypeObservers(this, transaction, event);\n    // If a remote change happened, we try to cleanup potential formatting duplicates.\n    if (!transaction.local) {\n      // check if another formatting item was inserted\n      let foundFormattingItem = false;\n      for (const [client, afterClock] of transaction.afterState.entries()) {\n        const clock = transaction.beforeState.get(client) || 0;\n        if (afterClock === clock) {\n          continue\n        }\n        iterateStructs(transaction, /** @type {Array<Item|GC>} */ (doc.store.clients.get(client)), clock, afterClock, item => {\n          if (!item.deleted && /** @type {Item} */ (item).content.constructor === ContentFormat) {\n            foundFormattingItem = true;\n          }\n        });\n        if (foundFormattingItem) {\n          break\n        }\n      }\n      if (!foundFormattingItem) {\n        iterateDeletedStructs(transaction, transaction.deleteSet, item => {\n          if (item instanceof GC || foundFormattingItem) {\n            return\n          }\n          if (item.parent === this && item.content.constructor === ContentFormat) {\n            foundFormattingItem = true;\n          }\n        });\n      }\n      transact(doc, (t) => {\n        if (foundFormattingItem) {\n          // If a formatting item was inserted, we simply clean the whole type.\n          // We need to compute currentAttributes for the current position anyway.\n          cleanupYTextFormatting(this);\n        } else {\n          // If no formatting attribute was inserted, we can make due with contextless\n          // formatting cleanups.\n          // Contextless: it is not necessary to compute currentAttributes for the affected position.\n          iterateDeletedStructs(t, t.deleteSet, item => {\n            if (item instanceof GC) {\n              return\n            }\n            if (item.parent === this) {\n              cleanupContextlessFormattingGap(t, item);\n            }\n          });\n        }\n      });\n    }\n  }\n\n  /**\n   * Returns the unformatted string representation of this YText type.\n   *\n   * @public\n   */\n  toString () {\n    let str = '';\n    /**\n     * @type {Item|null}\n     */\n    let n = this._start;\n    while (n !== null) {\n      if (!n.deleted && n.countable && n.content.constructor === ContentString) {\n        str += /** @type {ContentString} */ (n.content).str;\n      }\n      n = n.right;\n    }\n    return str\n  }\n\n  /**\n   * Returns the unformatted string representation of this YText type.\n   *\n   * @return {string}\n   * @public\n   */\n  toJSON () {\n    return this.toString()\n  }\n\n  /**\n   * Apply a {@link Delta} on this shared YText type.\n   *\n   * @param {any} delta The changes to apply on this element.\n   * @param {object}  [opts]\n   * @param {boolean} [opts.sanitize] Sanitize input delta. Removes ending newlines if set to true.\n   *\n   *\n   * @public\n   */\n  applyDelta (delta, { sanitize = true } = {}) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        const currPos = new ItemTextListPosition(null, this._start, 0, new Map());\n        for (let i = 0; i < delta.length; i++) {\n          const op = delta[i];\n          if (op.insert !== undefined) {\n            // Quill assumes that the content starts with an empty paragraph.\n            // Yjs/Y.Text assumes that it starts empty. We always hide that\n            // there is a newline at the end of the content.\n            // If we omit this step, clients will see a different number of\n            // paragraphs, but nothing bad will happen.\n            const ins = (!sanitize && typeof op.insert === 'string' && i === delta.length - 1 && currPos.right === null && op.insert.slice(-1) === '\\n') ? op.insert.slice(0, -1) : op.insert;\n            if (typeof ins !== 'string' || ins.length > 0) {\n              insertText(transaction, this, currPos, ins, op.attributes || {});\n            }\n          } else if (op.retain !== undefined) {\n            formatText(transaction, this, currPos, op.retain, op.attributes || {});\n          } else if (op.delete !== undefined) {\n            deleteText(transaction, currPos, op.delete);\n          }\n        }\n      });\n    } else {\n      /** @type {Array<function>} */ (this._pending).push(() => this.applyDelta(delta));\n    }\n  }\n\n  /**\n   * Returns the Delta representation of this YText type.\n   *\n   * @param {Snapshot} [snapshot]\n   * @param {Snapshot} [prevSnapshot]\n   * @param {function('removed' | 'added', ID):any} [computeYChange]\n   * @return {any} The Delta representation of this type.\n   *\n   * @public\n   */\n  toDelta (snapshot, prevSnapshot, computeYChange) {\n    /**\n     * @type{Array<any>}\n     */\n    const ops = [];\n    const currentAttributes = new Map();\n    const doc = /** @type {Doc} */ (this.doc);\n    let str = '';\n    let n = this._start;\n    function packStr () {\n      if (str.length > 0) {\n        // pack str with attributes to ops\n        /**\n         * @type {Object<string,any>}\n         */\n        const attributes = {};\n        let addAttributes = false;\n        currentAttributes.forEach((value, key) => {\n          addAttributes = true;\n          attributes[key] = value;\n        });\n        /**\n         * @type {Object<string,any>}\n         */\n        const op = { insert: str };\n        if (addAttributes) {\n          op.attributes = attributes;\n        }\n        ops.push(op);\n        str = '';\n      }\n    }\n    // snapshots are merged again after the transaction, so we need to keep the\n    // transalive until we are done\n    transact(doc, transaction => {\n      if (snapshot) {\n        splitSnapshotAffectedStructs(transaction, snapshot);\n      }\n      if (prevSnapshot) {\n        splitSnapshotAffectedStructs(transaction, prevSnapshot);\n      }\n      while (n !== null) {\n        if (isVisible(n, snapshot) || (prevSnapshot !== undefined && isVisible(n, prevSnapshot))) {\n          switch (n.content.constructor) {\n            case ContentString: {\n              const cur = currentAttributes.get('ychange');\n              if (snapshot !== undefined && !isVisible(n, snapshot)) {\n                if (cur === undefined || cur.user !== n.id.client || cur.state !== 'removed') {\n                  packStr();\n                  currentAttributes.set('ychange', computeYChange ? computeYChange('removed', n.id) : { type: 'removed' });\n                }\n              } else if (prevSnapshot !== undefined && !isVisible(n, prevSnapshot)) {\n                if (cur === undefined || cur.user !== n.id.client || cur.state !== 'added') {\n                  packStr();\n                  currentAttributes.set('ychange', computeYChange ? computeYChange('added', n.id) : { type: 'added' });\n                }\n              } else if (cur !== undefined) {\n                packStr();\n                currentAttributes.delete('ychange');\n              }\n              str += /** @type {ContentString} */ (n.content).str;\n              break\n            }\n            case ContentEmbed: {\n              packStr();\n              /**\n               * @type {Object<string,any>}\n               */\n              const op = {\n                insert: /** @type {ContentEmbed} */ (n.content).embed\n              };\n              if (currentAttributes.size > 0) {\n                const attrs = /** @type {Object<string,any>} */ ({});\n                op.attributes = attrs;\n                currentAttributes.forEach((value, key) => {\n                  attrs[key] = value;\n                });\n              }\n              ops.push(op);\n              break\n            }\n            case ContentFormat:\n              if (isVisible(n, snapshot)) {\n                packStr();\n                updateCurrentAttributes(currentAttributes, /** @type {ContentFormat} */ (n.content));\n              }\n              break\n          }\n        }\n        n = n.right;\n      }\n      packStr();\n    }, splitSnapshotAffectedStructs);\n    return ops\n  }\n\n  /**\n   * Insert text at a given index.\n   *\n   * @param {number} index The index at which to start inserting.\n   * @param {String} text The text to insert at the specified position.\n   * @param {TextAttributes} [attributes] Optionally define some formatting\n   *                                    information to apply on the inserted\n   *                                    Text.\n   * @public\n   */\n  insert (index, text, attributes) {\n    if (text.length <= 0) {\n      return\n    }\n    const y = this.doc;\n    if (y !== null) {\n      transact(y, transaction => {\n        const pos = findPosition(transaction, this, index);\n        if (!attributes) {\n          attributes = {};\n          // @ts-ignore\n          pos.currentAttributes.forEach((v, k) => { attributes[k] = v; });\n        }\n        insertText(transaction, this, pos, text, attributes);\n      });\n    } else {\n      /** @type {Array<function>} */ (this._pending).push(() => this.insert(index, text, attributes));\n    }\n  }\n\n  /**\n   * Inserts an embed at a index.\n   *\n   * @param {number} index The index to insert the embed at.\n   * @param {Object} embed The Object that represents the embed.\n   * @param {TextAttributes} attributes Attribute information to apply on the\n   *                                    embed\n   *\n   * @public\n   */\n  insertEmbed (index, embed, attributes = {}) {\n    if (embed.constructor !== Object) {\n      throw new Error('Embed must be an Object')\n    }\n    const y = this.doc;\n    if (y !== null) {\n      transact(y, transaction => {\n        const pos = findPosition(transaction, this, index);\n        insertText(transaction, this, pos, embed, attributes);\n      });\n    } else {\n      /** @type {Array<function>} */ (this._pending).push(() => this.insertEmbed(index, embed, attributes));\n    }\n  }\n\n  /**\n   * Deletes text starting from an index.\n   *\n   * @param {number} index Index at which to start deleting.\n   * @param {number} length The number of characters to remove. Defaults to 1.\n   *\n   * @public\n   */\n  delete (index, length) {\n    if (length === 0) {\n      return\n    }\n    const y = this.doc;\n    if (y !== null) {\n      transact(y, transaction => {\n        deleteText(transaction, findPosition(transaction, this, index), length);\n      });\n    } else {\n      /** @type {Array<function>} */ (this._pending).push(() => this.delete(index, length));\n    }\n  }\n\n  /**\n   * Assigns properties to a range of text.\n   *\n   * @param {number} index The position where to start formatting.\n   * @param {number} length The amount of characters to assign properties to.\n   * @param {TextAttributes} attributes Attribute information to apply on the\n   *                                    text.\n   *\n   * @public\n   */\n  format (index, length, attributes) {\n    if (length === 0) {\n      return\n    }\n    const y = this.doc;\n    if (y !== null) {\n      transact(y, transaction => {\n        const pos = findPosition(transaction, this, index);\n        if (pos.right === null) {\n          return\n        }\n        formatText(transaction, this, pos, length, attributes);\n      });\n    } else {\n      /** @type {Array<function>} */ (this._pending).push(() => this.format(index, length, attributes));\n    }\n  }\n\n  /**\n   * Removes an attribute.\n   *\n   * @note Xml-Text nodes don't have attributes. You can use this feature to assign properties to complete text-blocks.\n   *\n   * @param {String} attributeName The attribute name that is to be removed.\n   *\n   * @public\n   */\n  removeAttribute (attributeName) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        typeMapDelete(transaction, this, attributeName);\n      });\n    } else {\n      /** @type {Array<function>} */ (this._pending).push(() => this.removeAttribute(attributeName));\n    }\n  }\n\n  /**\n   * Sets or updates an attribute.\n   *\n   * @note Xml-Text nodes don't have attributes. You can use this feature to assign properties to complete text-blocks.\n   *\n   * @param {String} attributeName The attribute name that is to be set.\n   * @param {any} attributeValue The attribute value that is to be set.\n   *\n   * @public\n   */\n  setAttribute (attributeName, attributeValue) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        typeMapSet(transaction, this, attributeName, attributeValue);\n      });\n    } else {\n      /** @type {Array<function>} */ (this._pending).push(() => this.setAttribute(attributeName, attributeValue));\n    }\n  }\n\n  /**\n   * Returns an attribute value that belongs to the attribute name.\n   *\n   * @note Xml-Text nodes don't have attributes. You can use this feature to assign properties to complete text-blocks.\n   *\n   * @param {String} attributeName The attribute name that identifies the\n   *                               queried value.\n   * @return {any} The queried attribute value.\n   *\n   * @public\n   */\n  getAttribute (attributeName) {\n    return /** @type {any} */ (typeMapGet(this, attributeName))\n  }\n\n  /**\n   * Returns all attribute name/value pairs in a JSON Object.\n   *\n   * @note Xml-Text nodes don't have attributes. You can use this feature to assign properties to complete text-blocks.\n   *\n   * @param {Snapshot} [snapshot]\n   * @return {Object<string, any>} A JSON Object that describes the attributes.\n   *\n   * @public\n   */\n  getAttributes (snapshot) {\n    return typeMapGetAll(this)\n  }\n\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   */\n  _write (encoder) {\n    encoder.writeTypeRef(YTextRefID);\n  }\n}\n\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n * @return {YText}\n *\n * @private\n * @function\n */\nconst readYText = decoder => new YText();\n\n/**\n * @module YXml\n */\n\n/**\n * Define the elements to which a set of CSS queries apply.\n * {@link https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors|CSS_Selectors}\n *\n * @example\n *   query = '.classSelector'\n *   query = 'nodeSelector'\n *   query = '#idSelector'\n *\n * @typedef {string} CSS_Selector\n */\n\n/**\n * Dom filter function.\n *\n * @callback domFilter\n * @param {string} nodeName The nodeName of the element\n * @param {Map} attributes The map of attributes.\n * @return {boolean} Whether to include the Dom node in the YXmlElement.\n */\n\n/**\n * Represents a subset of the nodes of a YXmlElement / YXmlFragment and a\n * position within them.\n *\n * Can be created with {@link YXmlFragment#createTreeWalker}\n *\n * @public\n * @implements {Iterable<YXmlElement|YXmlText|YXmlElement|YXmlHook>}\n */\nclass YXmlTreeWalker {\n  /**\n   * @param {YXmlFragment | YXmlElement} root\n   * @param {function(AbstractType<any>):boolean} [f]\n   */\n  constructor (root, f = () => true) {\n    this._filter = f;\n    this._root = root;\n    /**\n     * @type {Item}\n     */\n    this._currentNode = /** @type {Item} */ (root._start);\n    this._firstCall = true;\n  }\n\n  [Symbol.iterator] () {\n    return this\n  }\n\n  /**\n   * Get the next node.\n   *\n   * @return {IteratorResult<YXmlElement|YXmlText|YXmlHook>} The next node.\n   *\n   * @public\n   */\n  next () {\n    /**\n     * @type {Item|null}\n     */\n    let n = this._currentNode;\n    let type = n && n.content && /** @type {any} */ (n.content).type;\n    if (n !== null && (!this._firstCall || n.deleted || !this._filter(type))) { // if first call, we check if we can use the first item\n      do {\n        type = /** @type {any} */ (n.content).type;\n        if (!n.deleted && (type.constructor === YXmlElement || type.constructor === YXmlFragment) && type._start !== null) {\n          // walk down in the tree\n          n = type._start;\n        } else {\n          // walk right or up in the tree\n          while (n !== null) {\n            if (n.right !== null) {\n              n = n.right;\n              break\n            } else if (n.parent === this._root) {\n              n = null;\n            } else {\n              n = /** @type {AbstractType<any>} */ (n.parent)._item;\n            }\n          }\n        }\n      } while (n !== null && (n.deleted || !this._filter(/** @type {ContentType} */ (n.content).type)))\n    }\n    this._firstCall = false;\n    if (n === null) {\n      // @ts-ignore\n      return { value: undefined, done: true }\n    }\n    this._currentNode = n;\n    return { value: /** @type {any} */ (n.content).type, done: false }\n  }\n}\n\n/**\n * Represents a list of {@link YXmlElement}.and {@link YXmlText} types.\n * A YxmlFragment is similar to a {@link YXmlElement}, but it does not have a\n * nodeName and it does not have attributes. Though it can be bound to a DOM\n * element - in this case the attributes and the nodeName are not shared.\n *\n * @public\n * @extends AbstractType<YXmlEvent>\n */\nclass YXmlFragment extends AbstractType {\n  constructor () {\n    super();\n    /**\n     * @type {Array<any>|null}\n     */\n    this._prelimContent = [];\n  }\n\n  /**\n   * @type {YXmlElement|YXmlText|null}\n   */\n  get firstChild () {\n    const first = this._first;\n    return first ? first.content.getContent()[0] : null\n  }\n\n  /**\n   * Integrate this type into the Yjs instance.\n   *\n   * * Save this struct in the os\n   * * This type is sent to other client\n   * * Observer functions are fired\n   *\n   * @param {Doc} y The Yjs instance\n   * @param {Item} item\n   */\n  _integrate (y, item) {\n    super._integrate(y, item);\n    this.insert(0, /** @type {Array<any>} */ (this._prelimContent));\n    this._prelimContent = null;\n  }\n\n  _copy () {\n    return new YXmlFragment()\n  }\n\n  /**\n   * @return {YXmlFragment}\n   */\n  clone () {\n    const el = new YXmlFragment();\n    // @ts-ignore\n    el.insert(0, this.toArray().map(item => item instanceof AbstractType ? item.clone() : item));\n    return el\n  }\n\n  get length () {\n    return this._prelimContent === null ? this._length : this._prelimContent.length\n  }\n\n  /**\n   * Create a subtree of childNodes.\n   *\n   * @example\n   * const walker = elem.createTreeWalker(dom => dom.nodeName === 'div')\n   * for (let node in walker) {\n   *   // `node` is a div node\n   *   nop(node)\n   * }\n   *\n   * @param {function(AbstractType<any>):boolean} filter Function that is called on each child element and\n   *                          returns a Boolean indicating whether the child\n   *                          is to be included in the subtree.\n   * @return {YXmlTreeWalker} A subtree and a position within it.\n   *\n   * @public\n   */\n  createTreeWalker (filter) {\n    return new YXmlTreeWalker(this, filter)\n  }\n\n  /**\n   * Returns the first YXmlElement that matches the query.\n   * Similar to DOM's {@link querySelector}.\n   *\n   * Query support:\n   *   - tagname\n   * TODO:\n   *   - id\n   *   - attribute\n   *\n   * @param {CSS_Selector} query The query on the children.\n   * @return {YXmlElement|YXmlText|YXmlHook|null} The first element that matches the query or null.\n   *\n   * @public\n   */\n  querySelector (query) {\n    query = query.toUpperCase();\n    // @ts-ignore\n    const iterator = new YXmlTreeWalker(this, element => element.nodeName && element.nodeName.toUpperCase() === query);\n    const next = iterator.next();\n    if (next.done) {\n      return null\n    } else {\n      return next.value\n    }\n  }\n\n  /**\n   * Returns all YXmlElements that match the query.\n   * Similar to Dom's {@link querySelectorAll}.\n   *\n   * @todo Does not yet support all queries. Currently only query by tagName.\n   *\n   * @param {CSS_Selector} query The query on the children\n   * @return {Array<YXmlElement|YXmlText|YXmlHook|null>} The elements that match this query.\n   *\n   * @public\n   */\n  querySelectorAll (query) {\n    query = query.toUpperCase();\n    // @ts-ignore\n    return Array.from(new YXmlTreeWalker(this, element => element.nodeName && element.nodeName.toUpperCase() === query))\n  }\n\n  /**\n   * Creates YXmlEvent and calls observers.\n   *\n   * @param {Transaction} transaction\n   * @param {Set<null|string>} parentSubs Keys changed on this type. `null` if list was modified.\n   */\n  _callObserver (transaction, parentSubs) {\n    callTypeObservers(this, transaction, new YXmlEvent(this, parentSubs, transaction));\n  }\n\n  /**\n   * Get the string representation of all the children of this YXmlFragment.\n   *\n   * @return {string} The string representation of all children.\n   */\n  toString () {\n    return typeListMap(this, xml => xml.toString()).join('')\n  }\n\n  /**\n   * @return {string}\n   */\n  toJSON () {\n    return this.toString()\n  }\n\n  /**\n   * Creates a Dom Element that mirrors this YXmlElement.\n   *\n   * @param {Document} [_document=document] The document object (you must define\n   *                                        this when calling this method in\n   *                                        nodejs)\n   * @param {Object<string, any>} [hooks={}] Optional property to customize how hooks\n   *                                             are presented in the DOM\n   * @param {any} [binding] You should not set this property. This is\n   *                               used if DomBinding wants to create a\n   *                               association to the created DOM type.\n   * @return {Node} The {@link https://developer.mozilla.org/en-US/docs/Web/API/Element|Dom Element}\n   *\n   * @public\n   */\n  toDOM (_document = document, hooks = {}, binding) {\n    const fragment = _document.createDocumentFragment();\n    if (binding !== undefined) {\n      binding._createAssociation(fragment, this);\n    }\n    typeListForEach(this, xmlType => {\n      fragment.insertBefore(xmlType.toDOM(_document, hooks, binding), null);\n    });\n    return fragment\n  }\n\n  /**\n   * Inserts new content at an index.\n   *\n   * @example\n   *  // Insert character 'a' at position 0\n   *  xml.insert(0, [new Y.XmlText('text')])\n   *\n   * @param {number} index The index to insert content at\n   * @param {Array<YXmlElement|YXmlText>} content The array of content\n   */\n  insert (index, content) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        typeListInsertGenerics(transaction, this, index, content);\n      });\n    } else {\n      // @ts-ignore _prelimContent is defined because this is not yet integrated\n      this._prelimContent.splice(index, 0, ...content);\n    }\n  }\n\n  /**\n   * Inserts new content at an index.\n   *\n   * @example\n   *  // Insert character 'a' at position 0\n   *  xml.insert(0, [new Y.XmlText('text')])\n   *\n   * @param {null|Item|YXmlElement|YXmlText} ref The index to insert content at\n   * @param {Array<YXmlElement|YXmlText>} content The array of content\n   */\n  insertAfter (ref, content) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        const refItem = (ref && ref instanceof AbstractType) ? ref._item : ref;\n        typeListInsertGenericsAfter(transaction, this, refItem, content);\n      });\n    } else {\n      const pc = /** @type {Array<any>} */ (this._prelimContent);\n      const index = ref === null ? 0 : pc.findIndex(el => el === ref) + 1;\n      if (index === 0 && ref !== null) {\n        throw error.create('Reference item not found')\n      }\n      pc.splice(index, 0, ...content);\n    }\n  }\n\n  /**\n   * Deletes elements starting from an index.\n   *\n   * @param {number} index Index at which to start deleting elements\n   * @param {number} [length=1] The number of elements to remove. Defaults to 1.\n   */\n  delete (index, length = 1) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        typeListDelete(transaction, this, index, length);\n      });\n    } else {\n      // @ts-ignore _prelimContent is defined because this is not yet integrated\n      this._prelimContent.splice(index, length);\n    }\n  }\n\n  /**\n   * Transforms this YArray to a JavaScript Array.\n   *\n   * @return {Array<YXmlElement|YXmlText|YXmlHook>}\n   */\n  toArray () {\n    return typeListToArray(this)\n  }\n\n  /**\n   * Appends content to this YArray.\n   *\n   * @param {Array<YXmlElement|YXmlText>} content Array of content to append.\n   */\n  push (content) {\n    this.insert(this.length, content);\n  }\n\n  /**\n   * Preppends content to this YArray.\n   *\n   * @param {Array<YXmlElement|YXmlText>} content Array of content to preppend.\n   */\n  unshift (content) {\n    this.insert(0, content);\n  }\n\n  /**\n   * Returns the i-th element from a YArray.\n   *\n   * @param {number} index The index of the element to return from the YArray\n   * @return {YXmlElement|YXmlText}\n   */\n  get (index) {\n    return typeListGet(this, index)\n  }\n\n  /**\n   * Transforms this YArray to a JavaScript Array.\n   *\n   * @param {number} [start]\n   * @param {number} [end]\n   * @return {Array<YXmlElement|YXmlText>}\n   */\n  slice (start = 0, end = this.length) {\n    return typeListSlice(this, start, end)\n  }\n\n  /**\n   * Transform the properties of this type to binary and write it to an\n   * BinaryEncoder.\n   *\n   * This is called when this Item is sent to a remote peer.\n   *\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder The encoder to write data to.\n   */\n  _write (encoder) {\n    encoder.writeTypeRef(YXmlFragmentRefID);\n  }\n}\n\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n * @return {YXmlFragment}\n *\n * @private\n * @function\n */\nconst readYXmlFragment = decoder => new YXmlFragment();\n\n/**\n * An YXmlElement imitates the behavior of a\n * {@link https://developer.mozilla.org/en-US/docs/Web/API/Element|Dom Element}.\n *\n * * An YXmlElement has attributes (key value pairs)\n * * An YXmlElement has childElements that must inherit from YXmlElement\n */\nclass YXmlElement extends YXmlFragment {\n  constructor (nodeName = 'UNDEFINED') {\n    super();\n    this.nodeName = nodeName;\n    /**\n     * @type {Map<string, any>|null}\n     */\n    this._prelimAttrs = new Map();\n  }\n\n  /**\n   * @type {YXmlElement|YXmlText|null}\n   */\n  get nextSibling () {\n    const n = this._item ? this._item.next : null;\n    return n ? /** @type {YXmlElement|YXmlText} */ (/** @type {ContentType} */ (n.content).type) : null\n  }\n\n  /**\n   * @type {YXmlElement|YXmlText|null}\n   */\n  get prevSibling () {\n    const n = this._item ? this._item.prev : null;\n    return n ? /** @type {YXmlElement|YXmlText} */ (/** @type {ContentType} */ (n.content).type) : null\n  }\n\n  /**\n   * Integrate this type into the Yjs instance.\n   *\n   * * Save this struct in the os\n   * * This type is sent to other client\n   * * Observer functions are fired\n   *\n   * @param {Doc} y The Yjs instance\n   * @param {Item} item\n   */\n  _integrate (y, item) {\n    super._integrate(y, item)\n    ;(/** @type {Map<string, any>} */ (this._prelimAttrs)).forEach((value, key) => {\n      this.setAttribute(key, value);\n    });\n    this._prelimAttrs = null;\n  }\n\n  /**\n   * Creates an Item with the same effect as this Item (without position effect)\n   *\n   * @return {YXmlElement}\n   */\n  _copy () {\n    return new YXmlElement(this.nodeName)\n  }\n\n  /**\n   * @return {YXmlElement}\n   */\n  clone () {\n    const el = new YXmlElement(this.nodeName);\n    const attrs = this.getAttributes();\n    for (const key in attrs) {\n      el.setAttribute(key, attrs[key]);\n    }\n    // @ts-ignore\n    el.insert(0, this.toArray().map(item => item instanceof AbstractType ? item.clone() : item));\n    return el\n  }\n\n  /**\n   * Returns the XML serialization of this YXmlElement.\n   * The attributes are ordered by attribute-name, so you can easily use this\n   * method to compare YXmlElements\n   *\n   * @return {string} The string representation of this type.\n   *\n   * @public\n   */\n  toString () {\n    const attrs = this.getAttributes();\n    const stringBuilder = [];\n    const keys = [];\n    for (const key in attrs) {\n      keys.push(key);\n    }\n    keys.sort();\n    const keysLen = keys.length;\n    for (let i = 0; i < keysLen; i++) {\n      const key = keys[i];\n      stringBuilder.push(key + '=\"' + attrs[key] + '\"');\n    }\n    const nodeName = this.nodeName.toLocaleLowerCase();\n    const attrsString = stringBuilder.length > 0 ? ' ' + stringBuilder.join(' ') : '';\n    return `<${nodeName}${attrsString}>${super.toString()}</${nodeName}>`\n  }\n\n  /**\n   * Removes an attribute from this YXmlElement.\n   *\n   * @param {String} attributeName The attribute name that is to be removed.\n   *\n   * @public\n   */\n  removeAttribute (attributeName) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        typeMapDelete(transaction, this, attributeName);\n      });\n    } else {\n      /** @type {Map<string,any>} */ (this._prelimAttrs).delete(attributeName);\n    }\n  }\n\n  /**\n   * Sets or updates an attribute.\n   *\n   * @param {String} attributeName The attribute name that is to be set.\n   * @param {String} attributeValue The attribute value that is to be set.\n   *\n   * @public\n   */\n  setAttribute (attributeName, attributeValue) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        typeMapSet(transaction, this, attributeName, attributeValue);\n      });\n    } else {\n      /** @type {Map<string, any>} */ (this._prelimAttrs).set(attributeName, attributeValue);\n    }\n  }\n\n  /**\n   * Returns an attribute value that belongs to the attribute name.\n   *\n   * @param {String} attributeName The attribute name that identifies the\n   *                               queried value.\n   * @return {String} The queried attribute value.\n   *\n   * @public\n   */\n  getAttribute (attributeName) {\n    return /** @type {any} */ (typeMapGet(this, attributeName))\n  }\n\n  /**\n   * Returns whether an attribute exists\n   *\n   * @param {String} attributeName The attribute name to check for existence.\n   * @return {boolean} whether the attribute exists.\n   *\n   * @public\n   */\n  hasAttribute (attributeName) {\n    return /** @type {any} */ (typeMapHas(this, attributeName))\n  }\n\n  /**\n   * Returns all attribute name/value pairs in a JSON Object.\n   *\n   * @param {Snapshot} [snapshot]\n   * @return {Object<string, any>} A JSON Object that describes the attributes.\n   *\n   * @public\n   */\n  getAttributes (snapshot) {\n    return typeMapGetAll(this)\n  }\n\n  /**\n   * Creates a Dom Element that mirrors this YXmlElement.\n   *\n   * @param {Document} [_document=document] The document object (you must define\n   *                                        this when calling this method in\n   *                                        nodejs)\n   * @param {Object<string, any>} [hooks={}] Optional property to customize how hooks\n   *                                             are presented in the DOM\n   * @param {any} [binding] You should not set this property. This is\n   *                               used if DomBinding wants to create a\n   *                               association to the created DOM type.\n   * @return {Node} The {@link https://developer.mozilla.org/en-US/docs/Web/API/Element|Dom Element}\n   *\n   * @public\n   */\n  toDOM (_document = document, hooks = {}, binding) {\n    const dom = _document.createElement(this.nodeName);\n    const attrs = this.getAttributes();\n    for (const key in attrs) {\n      dom.setAttribute(key, attrs[key]);\n    }\n    typeListForEach(this, yxml => {\n      dom.appendChild(yxml.toDOM(_document, hooks, binding));\n    });\n    if (binding !== undefined) {\n      binding._createAssociation(dom, this);\n    }\n    return dom\n  }\n\n  /**\n   * Transform the properties of this type to binary and write it to an\n   * BinaryEncoder.\n   *\n   * This is called when this Item is sent to a remote peer.\n   *\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder The encoder to write data to.\n   */\n  _write (encoder) {\n    encoder.writeTypeRef(YXmlElementRefID);\n    encoder.writeKey(this.nodeName);\n  }\n}\n\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n * @return {YXmlElement}\n *\n * @function\n */\nconst readYXmlElement = decoder => new YXmlElement(decoder.readKey());\n\n/**\n * An Event that describes changes on a YXml Element or Yxml Fragment\n */\nclass YXmlEvent extends YEvent {\n  /**\n   * @param {YXmlElement|YXmlText|YXmlFragment} target The target on which the event is created.\n   * @param {Set<string|null>} subs The set of changed attributes. `null` is included if the\n   *                   child list changed.\n   * @param {Transaction} transaction The transaction instance with wich the\n   *                                  change was created.\n   */\n  constructor (target, subs, transaction) {\n    super(target, transaction);\n    /**\n     * Whether the children changed.\n     * @type {Boolean}\n     * @private\n     */\n    this.childListChanged = false;\n    /**\n     * Set of all changed attributes.\n     * @type {Set<string>}\n     */\n    this.attributesChanged = new Set();\n    subs.forEach((sub) => {\n      if (sub === null) {\n        this.childListChanged = true;\n      } else {\n        this.attributesChanged.add(sub);\n      }\n    });\n  }\n}\n\n/**\n * You can manage binding to a custom type with YXmlHook.\n *\n * @extends {YMap<any>}\n */\nclass YXmlHook extends YMap {\n  /**\n   * @param {string} hookName nodeName of the Dom Node.\n   */\n  constructor (hookName) {\n    super();\n    /**\n     * @type {string}\n     */\n    this.hookName = hookName;\n  }\n\n  /**\n   * Creates an Item with the same effect as this Item (without position effect)\n   */\n  _copy () {\n    return new YXmlHook(this.hookName)\n  }\n\n  /**\n   * @return {YXmlHook}\n   */\n  clone () {\n    const el = new YXmlHook(this.hookName);\n    this.forEach((value, key) => {\n      el.set(key, value);\n    });\n    return el\n  }\n\n  /**\n   * Creates a Dom Element that mirrors this YXmlElement.\n   *\n   * @param {Document} [_document=document] The document object (you must define\n   *                                        this when calling this method in\n   *                                        nodejs)\n   * @param {Object.<string, any>} [hooks] Optional property to customize how hooks\n   *                                             are presented in the DOM\n   * @param {any} [binding] You should not set this property. This is\n   *                               used if DomBinding wants to create a\n   *                               association to the created DOM type\n   * @return {Element} The {@link https://developer.mozilla.org/en-US/docs/Web/API/Element|Dom Element}\n   *\n   * @public\n   */\n  toDOM (_document = document, hooks = {}, binding) {\n    const hook = hooks[this.hookName];\n    let dom;\n    if (hook !== undefined) {\n      dom = hook.createDom(this);\n    } else {\n      dom = document.createElement(this.hookName);\n    }\n    dom.setAttribute('data-yjs-hook', this.hookName);\n    if (binding !== undefined) {\n      binding._createAssociation(dom, this);\n    }\n    return dom\n  }\n\n  /**\n   * Transform the properties of this type to binary and write it to an\n   * BinaryEncoder.\n   *\n   * This is called when this Item is sent to a remote peer.\n   *\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder The encoder to write data to.\n   */\n  _write (encoder) {\n    encoder.writeTypeRef(YXmlHookRefID);\n    encoder.writeKey(this.hookName);\n  }\n}\n\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n * @return {YXmlHook}\n *\n * @private\n * @function\n */\nconst readYXmlHook = decoder =>\n  new YXmlHook(decoder.readKey());\n\n/**\n * Represents text in a Dom Element. In the future this type will also handle\n * simple formatting information like bold and italic.\n */\nclass YXmlText extends YText {\n  /**\n   * @type {YXmlElement|YXmlText|null}\n   */\n  get nextSibling () {\n    const n = this._item ? this._item.next : null;\n    return n ? /** @type {YXmlElement|YXmlText} */ (/** @type {ContentType} */ (n.content).type) : null\n  }\n\n  /**\n   * @type {YXmlElement|YXmlText|null}\n   */\n  get prevSibling () {\n    const n = this._item ? this._item.prev : null;\n    return n ? /** @type {YXmlElement|YXmlText} */ (/** @type {ContentType} */ (n.content).type) : null\n  }\n\n  _copy () {\n    return new YXmlText()\n  }\n\n  /**\n   * @return {YXmlText}\n   */\n  clone () {\n    const text = new YXmlText();\n    text.applyDelta(this.toDelta());\n    return text\n  }\n\n  /**\n   * Creates a Dom Element that mirrors this YXmlText.\n   *\n   * @param {Document} [_document=document] The document object (you must define\n   *                                        this when calling this method in\n   *                                        nodejs)\n   * @param {Object<string, any>} [hooks] Optional property to customize how hooks\n   *                                             are presented in the DOM\n   * @param {any} [binding] You should not set this property. This is\n   *                               used if DomBinding wants to create a\n   *                               association to the created DOM type.\n   * @return {Text} The {@link https://developer.mozilla.org/en-US/docs/Web/API/Element|Dom Element}\n   *\n   * @public\n   */\n  toDOM (_document = document, hooks, binding) {\n    const dom = _document.createTextNode(this.toString());\n    if (binding !== undefined) {\n      binding._createAssociation(dom, this);\n    }\n    return dom\n  }\n\n  toString () {\n    // @ts-ignore\n    return this.toDelta().map(delta => {\n      const nestedNodes = [];\n      for (const nodeName in delta.attributes) {\n        const attrs = [];\n        for (const key in delta.attributes[nodeName]) {\n          attrs.push({ key, value: delta.attributes[nodeName][key] });\n        }\n        // sort attributes to get a unique order\n        attrs.sort((a, b) => a.key < b.key ? -1 : 1);\n        nestedNodes.push({ nodeName, attrs });\n      }\n      // sort node order to get a unique order\n      nestedNodes.sort((a, b) => a.nodeName < b.nodeName ? -1 : 1);\n      // now convert to dom string\n      let str = '';\n      for (let i = 0; i < nestedNodes.length; i++) {\n        const node = nestedNodes[i];\n        str += `<${node.nodeName}`;\n        for (let j = 0; j < node.attrs.length; j++) {\n          const attr = node.attrs[j];\n          str += ` ${attr.key}=\"${attr.value}\"`;\n        }\n        str += '>';\n      }\n      str += delta.insert;\n      for (let i = nestedNodes.length - 1; i >= 0; i--) {\n        str += `</${nestedNodes[i].nodeName}>`;\n      }\n      return str\n    }).join('')\n  }\n\n  /**\n   * @return {string}\n   */\n  toJSON () {\n    return this.toString()\n  }\n\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   */\n  _write (encoder) {\n    encoder.writeTypeRef(YXmlTextRefID);\n  }\n}\n\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n * @return {YXmlText}\n *\n * @private\n * @function\n */\nconst readYXmlText = decoder => new YXmlText();\n\nclass AbstractStruct {\n  /**\n   * @param {ID} id\n   * @param {number} length\n   */\n  constructor (id, length) {\n    this.id = id;\n    this.length = length;\n  }\n\n  /**\n   * @type {boolean}\n   */\n  get deleted () {\n    throw error.methodUnimplemented()\n  }\n\n  /**\n   * Merge this struct with the item to the right.\n   * This method is already assuming that `this.id.clock + this.length === this.id.clock`.\n   * Also this method does *not* remove right from StructStore!\n   * @param {AbstractStruct} right\n   * @return {boolean} wether this merged with right\n   */\n  mergeWith (right) {\n    return false\n  }\n\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder The encoder to write data to.\n   * @param {number} offset\n   * @param {number} encodingRef\n   */\n  write (encoder, offset, encodingRef) {\n    throw error.methodUnimplemented()\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {number} offset\n   */\n  integrate (transaction, offset) {\n    throw error.methodUnimplemented()\n  }\n}\n\nconst structGCRefNumber = 0;\n\n/**\n * @private\n */\nclass GC extends AbstractStruct {\n  get deleted () {\n    return true\n  }\n\n  delete () {}\n\n  /**\n   * @param {GC} right\n   * @return {boolean}\n   */\n  mergeWith (right) {\n    if (this.constructor !== right.constructor) {\n      return false\n    }\n    this.length += right.length;\n    return true\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {number} offset\n   */\n  integrate (transaction, offset) {\n    if (offset > 0) {\n      this.id.clock += offset;\n      this.length -= offset;\n    }\n    addStruct(transaction.doc.store, this);\n  }\n\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   * @param {number} offset\n   */\n  write (encoder, offset) {\n    encoder.writeInfo(structGCRefNumber);\n    encoder.writeLen(this.length - offset);\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {StructStore} store\n   * @return {null | number}\n   */\n  getMissing (transaction, store) {\n    return null\n  }\n}\n\nclass ContentBinary {\n  /**\n   * @param {Uint8Array} content\n   */\n  constructor (content) {\n    this.content = content;\n  }\n\n  /**\n   * @return {number}\n   */\n  getLength () {\n    return 1\n  }\n\n  /**\n   * @return {Array<any>}\n   */\n  getContent () {\n    return [this.content]\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isCountable () {\n    return true\n  }\n\n  /**\n   * @return {ContentBinary}\n   */\n  copy () {\n    return new ContentBinary(this.content)\n  }\n\n  /**\n   * @param {number} offset\n   * @return {ContentBinary}\n   */\n  splice (offset) {\n    throw error.methodUnimplemented()\n  }\n\n  /**\n   * @param {ContentBinary} right\n   * @return {boolean}\n   */\n  mergeWith (right) {\n    return false\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {Item} item\n   */\n  integrate (transaction, item) {}\n  /**\n   * @param {Transaction} transaction\n   */\n  delete (transaction) {}\n  /**\n   * @param {StructStore} store\n   */\n  gc (store) {}\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   * @param {number} offset\n   */\n  write (encoder, offset) {\n    encoder.writeBuf(this.content);\n  }\n\n  /**\n   * @return {number}\n   */\n  getRef () {\n    return 3\n  }\n}\n\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2 } decoder\n * @return {ContentBinary}\n */\nconst readContentBinary = decoder => new ContentBinary(decoder.readBuf());\n\nclass ContentDeleted {\n  /**\n   * @param {number} len\n   */\n  constructor (len) {\n    this.len = len;\n  }\n\n  /**\n   * @return {number}\n   */\n  getLength () {\n    return this.len\n  }\n\n  /**\n   * @return {Array<any>}\n   */\n  getContent () {\n    return []\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isCountable () {\n    return false\n  }\n\n  /**\n   * @return {ContentDeleted}\n   */\n  copy () {\n    return new ContentDeleted(this.len)\n  }\n\n  /**\n   * @param {number} offset\n   * @return {ContentDeleted}\n   */\n  splice (offset) {\n    const right = new ContentDeleted(this.len - offset);\n    this.len = offset;\n    return right\n  }\n\n  /**\n   * @param {ContentDeleted} right\n   * @return {boolean}\n   */\n  mergeWith (right) {\n    this.len += right.len;\n    return true\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {Item} item\n   */\n  integrate (transaction, item) {\n    addToDeleteSet(transaction.deleteSet, item.id.client, item.id.clock, this.len);\n    item.markDeleted();\n  }\n\n  /**\n   * @param {Transaction} transaction\n   */\n  delete (transaction) {}\n  /**\n   * @param {StructStore} store\n   */\n  gc (store) {}\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   * @param {number} offset\n   */\n  write (encoder, offset) {\n    encoder.writeLen(this.len - offset);\n  }\n\n  /**\n   * @return {number}\n   */\n  getRef () {\n    return 1\n  }\n}\n\n/**\n * @private\n *\n * @param {UpdateDecoderV1 | UpdateDecoderV2 } decoder\n * @return {ContentDeleted}\n */\nconst readContentDeleted = decoder => new ContentDeleted(decoder.readLen());\n\n/**\n * @private\n */\nclass ContentDoc {\n  /**\n   * @param {Doc} doc\n   */\n  constructor (doc) {\n    if (doc._item) {\n      console.error('This document was already integrated as a sub-document. You should create a second instance instead with the same guid.');\n    }\n    /**\n     * @type {Doc}\n     */\n    this.doc = doc;\n    /**\n     * @type {any}\n     */\n    const opts = {};\n    this.opts = opts;\n    if (!doc.gc) {\n      opts.gc = false;\n    }\n    if (doc.autoLoad) {\n      opts.autoLoad = true;\n    }\n    if (doc.meta !== null) {\n      opts.meta = doc.meta;\n    }\n  }\n\n  /**\n   * @return {number}\n   */\n  getLength () {\n    return 1\n  }\n\n  /**\n   * @return {Array<any>}\n   */\n  getContent () {\n    return [this.doc]\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isCountable () {\n    return true\n  }\n\n  /**\n   * @return {ContentDoc}\n   */\n  copy () {\n    return new ContentDoc(this.doc)\n  }\n\n  /**\n   * @param {number} offset\n   * @return {ContentDoc}\n   */\n  splice (offset) {\n    throw error.methodUnimplemented()\n  }\n\n  /**\n   * @param {ContentDoc} right\n   * @return {boolean}\n   */\n  mergeWith (right) {\n    return false\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {Item} item\n   */\n  integrate (transaction, item) {\n    // this needs to be reflected in doc.destroy as well\n    this.doc._item = item;\n    transaction.subdocsAdded.add(this.doc);\n    if (this.doc.shouldLoad) {\n      transaction.subdocsLoaded.add(this.doc);\n    }\n  }\n\n  /**\n   * @param {Transaction} transaction\n   */\n  delete (transaction) {\n    if (transaction.subdocsAdded.has(this.doc)) {\n      transaction.subdocsAdded.delete(this.doc);\n    } else {\n      transaction.subdocsRemoved.add(this.doc);\n    }\n  }\n\n  /**\n   * @param {StructStore} store\n   */\n  gc (store) { }\n\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   * @param {number} offset\n   */\n  write (encoder, offset) {\n    encoder.writeString(this.doc.guid);\n    encoder.writeAny(this.opts);\n  }\n\n  /**\n   * @return {number}\n   */\n  getRef () {\n    return 9\n  }\n}\n\n/**\n * @private\n *\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n * @return {ContentDoc}\n */\nconst readContentDoc = decoder => new ContentDoc(new Doc({ guid: decoder.readString(), ...decoder.readAny() }));\n\n/**\n * @private\n */\nclass ContentEmbed {\n  /**\n   * @param {Object} embed\n   */\n  constructor (embed) {\n    this.embed = embed;\n  }\n\n  /**\n   * @return {number}\n   */\n  getLength () {\n    return 1\n  }\n\n  /**\n   * @return {Array<any>}\n   */\n  getContent () {\n    return [this.embed]\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isCountable () {\n    return true\n  }\n\n  /**\n   * @return {ContentEmbed}\n   */\n  copy () {\n    return new ContentEmbed(this.embed)\n  }\n\n  /**\n   * @param {number} offset\n   * @return {ContentEmbed}\n   */\n  splice (offset) {\n    throw error.methodUnimplemented()\n  }\n\n  /**\n   * @param {ContentEmbed} right\n   * @return {boolean}\n   */\n  mergeWith (right) {\n    return false\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {Item} item\n   */\n  integrate (transaction, item) {}\n  /**\n   * @param {Transaction} transaction\n   */\n  delete (transaction) {}\n  /**\n   * @param {StructStore} store\n   */\n  gc (store) {}\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   * @param {number} offset\n   */\n  write (encoder, offset) {\n    encoder.writeJSON(this.embed);\n  }\n\n  /**\n   * @return {number}\n   */\n  getRef () {\n    return 5\n  }\n}\n\n/**\n * @private\n *\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n * @return {ContentEmbed}\n */\nconst readContentEmbed = decoder => new ContentEmbed(decoder.readJSON());\n\n/**\n * @private\n */\nclass ContentFormat {\n  /**\n   * @param {string} key\n   * @param {Object} value\n   */\n  constructor (key, value) {\n    this.key = key;\n    this.value = value;\n  }\n\n  /**\n   * @return {number}\n   */\n  getLength () {\n    return 1\n  }\n\n  /**\n   * @return {Array<any>}\n   */\n  getContent () {\n    return []\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isCountable () {\n    return false\n  }\n\n  /**\n   * @return {ContentFormat}\n   */\n  copy () {\n    return new ContentFormat(this.key, this.value)\n  }\n\n  /**\n   * @param {number} offset\n   * @return {ContentFormat}\n   */\n  splice (offset) {\n    throw error.methodUnimplemented()\n  }\n\n  /**\n   * @param {ContentFormat} right\n   * @return {boolean}\n   */\n  mergeWith (right) {\n    return false\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {Item} item\n   */\n  integrate (transaction, item) {\n    // @todo searchmarker are currently unsupported for rich text documents\n    /** @type {AbstractType<any>} */ (item.parent)._searchMarker = null;\n  }\n\n  /**\n   * @param {Transaction} transaction\n   */\n  delete (transaction) {}\n  /**\n   * @param {StructStore} store\n   */\n  gc (store) {}\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   * @param {number} offset\n   */\n  write (encoder, offset) {\n    encoder.writeKey(this.key);\n    encoder.writeJSON(this.value);\n  }\n\n  /**\n   * @return {number}\n   */\n  getRef () {\n    return 6\n  }\n}\n\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n * @return {ContentFormat}\n */\nconst readContentFormat = decoder => new ContentFormat(decoder.readString(), decoder.readJSON());\n\n/**\n * @private\n */\nclass ContentJSON {\n  /**\n   * @param {Array<any>} arr\n   */\n  constructor (arr) {\n    /**\n     * @type {Array<any>}\n     */\n    this.arr = arr;\n  }\n\n  /**\n   * @return {number}\n   */\n  getLength () {\n    return this.arr.length\n  }\n\n  /**\n   * @return {Array<any>}\n   */\n  getContent () {\n    return this.arr\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isCountable () {\n    return true\n  }\n\n  /**\n   * @return {ContentJSON}\n   */\n  copy () {\n    return new ContentJSON(this.arr)\n  }\n\n  /**\n   * @param {number} offset\n   * @return {ContentJSON}\n   */\n  splice (offset) {\n    const right = new ContentJSON(this.arr.slice(offset));\n    this.arr = this.arr.slice(0, offset);\n    return right\n  }\n\n  /**\n   * @param {ContentJSON} right\n   * @return {boolean}\n   */\n  mergeWith (right) {\n    this.arr = this.arr.concat(right.arr);\n    return true\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {Item} item\n   */\n  integrate (transaction, item) {}\n  /**\n   * @param {Transaction} transaction\n   */\n  delete (transaction) {}\n  /**\n   * @param {StructStore} store\n   */\n  gc (store) {}\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   * @param {number} offset\n   */\n  write (encoder, offset) {\n    const len = this.arr.length;\n    encoder.writeLen(len - offset);\n    for (let i = offset; i < len; i++) {\n      const c = this.arr[i];\n      encoder.writeString(c === undefined ? 'undefined' : JSON.stringify(c));\n    }\n  }\n\n  /**\n   * @return {number}\n   */\n  getRef () {\n    return 2\n  }\n}\n\n/**\n * @private\n *\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n * @return {ContentJSON}\n */\nconst readContentJSON = decoder => {\n  const len = decoder.readLen();\n  const cs = [];\n  for (let i = 0; i < len; i++) {\n    const c = decoder.readString();\n    if (c === 'undefined') {\n      cs.push(undefined);\n    } else {\n      cs.push(JSON.parse(c));\n    }\n  }\n  return new ContentJSON(cs)\n};\n\nclass ContentAny {\n  /**\n   * @param {Array<any>} arr\n   */\n  constructor (arr) {\n    /**\n     * @type {Array<any>}\n     */\n    this.arr = arr;\n  }\n\n  /**\n   * @return {number}\n   */\n  getLength () {\n    return this.arr.length\n  }\n\n  /**\n   * @return {Array<any>}\n   */\n  getContent () {\n    return this.arr\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isCountable () {\n    return true\n  }\n\n  /**\n   * @return {ContentAny}\n   */\n  copy () {\n    return new ContentAny(this.arr)\n  }\n\n  /**\n   * @param {number} offset\n   * @return {ContentAny}\n   */\n  splice (offset) {\n    const right = new ContentAny(this.arr.slice(offset));\n    this.arr = this.arr.slice(0, offset);\n    return right\n  }\n\n  /**\n   * @param {ContentAny} right\n   * @return {boolean}\n   */\n  mergeWith (right) {\n    this.arr = this.arr.concat(right.arr);\n    return true\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {Item} item\n   */\n  integrate (transaction, item) {}\n  /**\n   * @param {Transaction} transaction\n   */\n  delete (transaction) {}\n  /**\n   * @param {StructStore} store\n   */\n  gc (store) {}\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   * @param {number} offset\n   */\n  write (encoder, offset) {\n    const len = this.arr.length;\n    encoder.writeLen(len - offset);\n    for (let i = offset; i < len; i++) {\n      const c = this.arr[i];\n      encoder.writeAny(c);\n    }\n  }\n\n  /**\n   * @return {number}\n   */\n  getRef () {\n    return 8\n  }\n}\n\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n * @return {ContentAny}\n */\nconst readContentAny = decoder => {\n  const len = decoder.readLen();\n  const cs = [];\n  for (let i = 0; i < len; i++) {\n    cs.push(decoder.readAny());\n  }\n  return new ContentAny(cs)\n};\n\n/**\n * @private\n */\nclass ContentString {\n  /**\n   * @param {string} str\n   */\n  constructor (str) {\n    /**\n     * @type {string}\n     */\n    this.str = str;\n  }\n\n  /**\n   * @return {number}\n   */\n  getLength () {\n    return this.str.length\n  }\n\n  /**\n   * @return {Array<any>}\n   */\n  getContent () {\n    return this.str.split('')\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isCountable () {\n    return true\n  }\n\n  /**\n   * @return {ContentString}\n   */\n  copy () {\n    return new ContentString(this.str)\n  }\n\n  /**\n   * @param {number} offset\n   * @return {ContentString}\n   */\n  splice (offset) {\n    const right = new ContentString(this.str.slice(offset));\n    this.str = this.str.slice(0, offset);\n\n    // Prevent encoding invalid documents because of splitting of surrogate pairs: https://github.com/yjs/yjs/issues/248\n    const firstCharCode = this.str.charCodeAt(offset - 1);\n    if (firstCharCode >= 0xD800 && firstCharCode <= 0xDBFF) {\n      // Last character of the left split is the start of a surrogate utf16/ucs2 pair.\n      // We don't support splitting of surrogate pairs because this may lead to invalid documents.\n      // Replace the invalid character with a unicode replacement character (� / U+FFFD)\n      this.str = this.str.slice(0, offset - 1) + '�';\n      // replace right as well\n      right.str = '�' + right.str.slice(1);\n    }\n    return right\n  }\n\n  /**\n   * @param {ContentString} right\n   * @return {boolean}\n   */\n  mergeWith (right) {\n    this.str += right.str;\n    return true\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {Item} item\n   */\n  integrate (transaction, item) {}\n  /**\n   * @param {Transaction} transaction\n   */\n  delete (transaction) {}\n  /**\n   * @param {StructStore} store\n   */\n  gc (store) {}\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   * @param {number} offset\n   */\n  write (encoder, offset) {\n    encoder.writeString(offset === 0 ? this.str : this.str.slice(offset));\n  }\n\n  /**\n   * @return {number}\n   */\n  getRef () {\n    return 4\n  }\n}\n\n/**\n * @private\n *\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n * @return {ContentString}\n */\nconst readContentString = decoder => new ContentString(decoder.readString());\n\n/**\n * @type {Array<function(UpdateDecoderV1 | UpdateDecoderV2):AbstractType<any>>}\n * @private\n */\nconst typeRefs = [\n  readYArray,\n  readYMap,\n  readYText,\n  readYXmlElement,\n  readYXmlFragment,\n  readYXmlHook,\n  readYXmlText\n];\n\nconst YArrayRefID = 0;\nconst YMapRefID = 1;\nconst YTextRefID = 2;\nconst YXmlElementRefID = 3;\nconst YXmlFragmentRefID = 4;\nconst YXmlHookRefID = 5;\nconst YXmlTextRefID = 6;\n\n/**\n * @private\n */\nclass ContentType {\n  /**\n   * @param {AbstractType<YEvent>} type\n   */\n  constructor (type) {\n    /**\n     * @type {AbstractType<any>}\n     */\n    this.type = type;\n  }\n\n  /**\n   * @return {number}\n   */\n  getLength () {\n    return 1\n  }\n\n  /**\n   * @return {Array<any>}\n   */\n  getContent () {\n    return [this.type]\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isCountable () {\n    return true\n  }\n\n  /**\n   * @return {ContentType}\n   */\n  copy () {\n    return new ContentType(this.type._copy())\n  }\n\n  /**\n   * @param {number} offset\n   * @return {ContentType}\n   */\n  splice (offset) {\n    throw error.methodUnimplemented()\n  }\n\n  /**\n   * @param {ContentType} right\n   * @return {boolean}\n   */\n  mergeWith (right) {\n    return false\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {Item} item\n   */\n  integrate (transaction, item) {\n    this.type._integrate(transaction.doc, item);\n  }\n\n  /**\n   * @param {Transaction} transaction\n   */\n  delete (transaction) {\n    let item = this.type._start;\n    while (item !== null) {\n      if (!item.deleted) {\n        item.delete(transaction);\n      } else {\n        // Whis will be gc'd later and we want to merge it if possible\n        // We try to merge all deleted items after each transaction,\n        // but we have no knowledge about that this needs to be merged\n        // since it is not in transaction.ds. Hence we add it to transaction._mergeStructs\n        transaction._mergeStructs.push(item);\n      }\n      item = item.right;\n    }\n    this.type._map.forEach(item => {\n      if (!item.deleted) {\n        item.delete(transaction);\n      } else {\n        // same as above\n        transaction._mergeStructs.push(item);\n      }\n    });\n    transaction.changed.delete(this.type);\n  }\n\n  /**\n   * @param {StructStore} store\n   */\n  gc (store) {\n    let item = this.type._start;\n    while (item !== null) {\n      item.gc(store, true);\n      item = item.right;\n    }\n    this.type._start = null;\n    this.type._map.forEach(/** @param {Item | null} item */ (item) => {\n      while (item !== null) {\n        item.gc(store, true);\n        item = item.left;\n      }\n    });\n    this.type._map = new Map();\n  }\n\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   * @param {number} offset\n   */\n  write (encoder, offset) {\n    this.type._write(encoder);\n  }\n\n  /**\n   * @return {number}\n   */\n  getRef () {\n    return 7\n  }\n}\n\n/**\n * @private\n *\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n * @return {ContentType}\n */\nconst readContentType = decoder => new ContentType(typeRefs[decoder.readTypeRef()](decoder));\n\n/**\n * @todo This should return several items\n *\n * @param {StructStore} store\n * @param {ID} id\n * @return {{item:Item, diff:number}}\n */\nconst followRedone = (store, id) => {\n  /**\n   * @type {ID|null}\n   */\n  let nextID = id;\n  let diff = 0;\n  let item;\n  do {\n    if (diff > 0) {\n      nextID = createID(nextID.client, nextID.clock + diff);\n    }\n    item = getItem(store, nextID);\n    diff = nextID.clock - item.id.clock;\n    nextID = item.redone;\n  } while (nextID !== null && item instanceof Item)\n  return {\n    item, diff\n  }\n};\n\n/**\n * Make sure that neither item nor any of its parents is ever deleted.\n *\n * This property does not persist when storing it into a database or when\n * sending it to other peers\n *\n * @param {Item|null} item\n * @param {boolean} keep\n */\nconst keepItem = (item, keep) => {\n  while (item !== null && item.keep !== keep) {\n    item.keep = keep;\n    item = /** @type {AbstractType<any>} */ (item.parent)._item;\n  }\n};\n\n/**\n * Split leftItem into two items\n * @param {Transaction} transaction\n * @param {Item} leftItem\n * @param {number} diff\n * @return {Item}\n *\n * @function\n * @private\n */\nconst splitItem = (transaction, leftItem, diff) => {\n  // create rightItem\n  const { client, clock } = leftItem.id;\n  const rightItem = new Item(\n    createID(client, clock + diff),\n    leftItem,\n    createID(client, clock + diff - 1),\n    leftItem.right,\n    leftItem.rightOrigin,\n    leftItem.parent,\n    leftItem.parentSub,\n    leftItem.content.splice(diff)\n  );\n  if (leftItem.deleted) {\n    rightItem.markDeleted();\n  }\n  if (leftItem.keep) {\n    rightItem.keep = true;\n  }\n  if (leftItem.redone !== null) {\n    rightItem.redone = createID(leftItem.redone.client, leftItem.redone.clock + diff);\n  }\n  // update left (do not set leftItem.rightOrigin as it will lead to problems when syncing)\n  leftItem.right = rightItem;\n  // update right\n  if (rightItem.right !== null) {\n    rightItem.right.left = rightItem;\n  }\n  // right is more specific.\n  transaction._mergeStructs.push(rightItem);\n  // update parent._map\n  if (rightItem.parentSub !== null && rightItem.right === null) {\n    /** @type {AbstractType<any>} */ (rightItem.parent)._map.set(rightItem.parentSub, rightItem);\n  }\n  leftItem.length = diff;\n  return rightItem\n};\n\n/**\n * Redoes the effect of this operation.\n *\n * @param {Transaction} transaction The Yjs instance.\n * @param {Item} item\n * @param {Set<Item>} redoitems\n *\n * @return {Item|null}\n *\n * @private\n */\nconst redoItem = (transaction, item, redoitems) => {\n  const doc = transaction.doc;\n  const store = doc.store;\n  const ownClientID = doc.clientID;\n  const redone = item.redone;\n  if (redone !== null) {\n    return getItemCleanStart(transaction, redone)\n  }\n  let parentItem = /** @type {AbstractType<any>} */ (item.parent)._item;\n  /**\n   * @type {Item|null}\n   */\n  let left;\n  /**\n   * @type {Item|null}\n   */\n  let right;\n  if (item.parentSub === null) {\n    // Is an array item. Insert at the old position\n    left = item.left;\n    right = item;\n  } else {\n    // Is a map item. Insert as current value\n    left = item;\n    while (left.right !== null) {\n      left = left.right;\n      if (left.id.client !== ownClientID) {\n        // It is not possible to redo this item because it conflicts with a\n        // change from another client\n        return null\n      }\n    }\n    if (left.right !== null) {\n      left = /** @type {Item} */ (/** @type {AbstractType<any>} */ (item.parent)._map.get(item.parentSub));\n    }\n    right = null;\n  }\n  // make sure that parent is redone\n  if (parentItem !== null && parentItem.deleted === true && parentItem.redone === null) {\n    // try to undo parent if it will be undone anyway\n    if (!redoitems.has(parentItem) || redoItem(transaction, parentItem, redoitems) === null) {\n      return null\n    }\n  }\n  if (parentItem !== null && parentItem.redone !== null) {\n    while (parentItem.redone !== null) {\n      parentItem = getItemCleanStart(transaction, parentItem.redone);\n    }\n    // find next cloned_redo items\n    while (left !== null) {\n      /**\n       * @type {Item|null}\n       */\n      let leftTrace = left;\n      // trace redone until parent matches\n      while (leftTrace !== null && /** @type {AbstractType<any>} */ (leftTrace.parent)._item !== parentItem) {\n        leftTrace = leftTrace.redone === null ? null : getItemCleanStart(transaction, leftTrace.redone);\n      }\n      if (leftTrace !== null && /** @type {AbstractType<any>} */ (leftTrace.parent)._item === parentItem) {\n        left = leftTrace;\n        break\n      }\n      left = left.left;\n    }\n    while (right !== null) {\n      /**\n       * @type {Item|null}\n       */\n      let rightTrace = right;\n      // trace redone until parent matches\n      while (rightTrace !== null && /** @type {AbstractType<any>} */ (rightTrace.parent)._item !== parentItem) {\n        rightTrace = rightTrace.redone === null ? null : getItemCleanStart(transaction, rightTrace.redone);\n      }\n      if (rightTrace !== null && /** @type {AbstractType<any>} */ (rightTrace.parent)._item === parentItem) {\n        right = rightTrace;\n        break\n      }\n      right = right.right;\n    }\n  }\n  const nextClock = getState(store, ownClientID);\n  const nextId = createID(ownClientID, nextClock);\n  const redoneItem = new Item(\n    nextId,\n    left, left && left.lastId,\n    right, right && right.id,\n    parentItem === null ? item.parent : /** @type {ContentType} */ (parentItem.content).type,\n    item.parentSub,\n    item.content.copy()\n  );\n  item.redone = nextId;\n  keepItem(redoneItem, true);\n  redoneItem.integrate(transaction, 0);\n  return redoneItem\n};\n\n/**\n * Abstract class that represents any content.\n */\nclass Item extends AbstractStruct {\n  /**\n   * @param {ID} id\n   * @param {Item | null} left\n   * @param {ID | null} origin\n   * @param {Item | null} right\n   * @param {ID | null} rightOrigin\n   * @param {AbstractType<any>|ID|null} parent Is a type if integrated, is null if it is possible to copy parent from left or right, is ID before integration to search for it.\n   * @param {string | null} parentSub\n   * @param {AbstractContent} content\n   */\n  constructor (id, left, origin, right, rightOrigin, parent, parentSub, content) {\n    super(id, content.getLength());\n    /**\n     * The item that was originally to the left of this item.\n     * @type {ID | null}\n     */\n    this.origin = origin;\n    /**\n     * The item that is currently to the left of this item.\n     * @type {Item | null}\n     */\n    this.left = left;\n    /**\n     * The item that is currently to the right of this item.\n     * @type {Item | null}\n     */\n    this.right = right;\n    /**\n     * The item that was originally to the right of this item.\n     * @type {ID | null}\n     */\n    this.rightOrigin = rightOrigin;\n    /**\n     * @type {AbstractType<any>|ID|null}\n     */\n    this.parent = parent;\n    /**\n     * If the parent refers to this item with some kind of key (e.g. YMap, the\n     * key is specified here. The key is then used to refer to the list in which\n     * to insert this item. If `parentSub = null` type._start is the list in\n     * which to insert to. Otherwise it is `parent._map`.\n     * @type {String | null}\n     */\n    this.parentSub = parentSub;\n    /**\n     * If this type's effect is reundone this type refers to the type that undid\n     * this operation.\n     * @type {ID | null}\n     */\n    this.redone = null;\n    /**\n     * @type {AbstractContent}\n     */\n    this.content = content;\n    /**\n     * bit1: keep\n     * bit2: countable\n     * bit3: deleted\n     * bit4: mark - mark node as fast-search-marker\n     * @type {number} byte\n     */\n    this.info = this.content.isCountable() ? binary.BIT2 : 0;\n  }\n\n  /**\n   * This is used to mark the item as an indexed fast-search marker\n   *\n   * @type {boolean}\n   */\n  set marker (isMarked) {\n    if (((this.info & binary.BIT4) > 0) !== isMarked) {\n      this.info ^= binary.BIT4;\n    }\n  }\n\n  get marker () {\n    return (this.info & binary.BIT4) > 0\n  }\n\n  /**\n   * If true, do not garbage collect this Item.\n   */\n  get keep () {\n    return (this.info & binary.BIT1) > 0\n  }\n\n  set keep (doKeep) {\n    if (this.keep !== doKeep) {\n      this.info ^= binary.BIT1;\n    }\n  }\n\n  get countable () {\n    return (this.info & binary.BIT2) > 0\n  }\n\n  /**\n   * Whether this item was deleted or not.\n   * @type {Boolean}\n   */\n  get deleted () {\n    return (this.info & binary.BIT3) > 0\n  }\n\n  set deleted (doDelete) {\n    if (this.deleted !== doDelete) {\n      this.info ^= binary.BIT3;\n    }\n  }\n\n  markDeleted () {\n    this.info |= binary.BIT3;\n  }\n\n  /**\n   * Return the creator clientID of the missing op or define missing items and return null.\n   *\n   * @param {Transaction} transaction\n   * @param {StructStore} store\n   * @return {null | number}\n   */\n  getMissing (transaction, store) {\n    if (this.origin && this.origin.client !== this.id.client && this.origin.clock >= getState(store, this.origin.client)) {\n      return this.origin.client\n    }\n    if (this.rightOrigin && this.rightOrigin.client !== this.id.client && this.rightOrigin.clock >= getState(store, this.rightOrigin.client)) {\n      return this.rightOrigin.client\n    }\n    if (this.parent && this.parent.constructor === ID && this.id.client !== this.parent.client && this.parent.clock >= getState(store, this.parent.client)) {\n      return this.parent.client\n    }\n\n    // We have all missing ids, now find the items\n\n    if (this.origin) {\n      this.left = getItemCleanEnd(transaction, store, this.origin);\n      this.origin = this.left.lastId;\n    }\n    if (this.rightOrigin) {\n      this.right = getItemCleanStart(transaction, this.rightOrigin);\n      this.rightOrigin = this.right.id;\n    }\n    if ((this.left && this.left.constructor === GC) || (this.right && this.right.constructor === GC)) {\n      this.parent = null;\n    }\n    // only set parent if this shouldn't be garbage collected\n    if (!this.parent) {\n      if (this.left && this.left.constructor === Item) {\n        this.parent = this.left.parent;\n        this.parentSub = this.left.parentSub;\n      }\n      if (this.right && this.right.constructor === Item) {\n        this.parent = this.right.parent;\n        this.parentSub = this.right.parentSub;\n      }\n    } else if (this.parent.constructor === ID) {\n      const parentItem = getItem(store, this.parent);\n      if (parentItem.constructor === GC) {\n        this.parent = null;\n      } else {\n        this.parent = /** @type {ContentType} */ (parentItem.content).type;\n      }\n    }\n    return null\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {number} offset\n   */\n  integrate (transaction, offset) {\n    if (offset > 0) {\n      this.id.clock += offset;\n      this.left = getItemCleanEnd(transaction, transaction.doc.store, createID(this.id.client, this.id.clock - 1));\n      this.origin = this.left.lastId;\n      this.content = this.content.splice(offset);\n      this.length -= offset;\n    }\n\n    if (this.parent) {\n      if ((!this.left && (!this.right || this.right.left !== null)) || (this.left && this.left.right !== this.right)) {\n        /**\n         * @type {Item|null}\n         */\n        let left = this.left;\n\n        /**\n         * @type {Item|null}\n         */\n        let o;\n        // set o to the first conflicting item\n        if (left !== null) {\n          o = left.right;\n        } else if (this.parentSub !== null) {\n          o = /** @type {AbstractType<any>} */ (this.parent)._map.get(this.parentSub) || null;\n          while (o !== null && o.left !== null) {\n            o = o.left;\n          }\n        } else {\n          o = /** @type {AbstractType<any>} */ (this.parent)._start;\n        }\n        // TODO: use something like DeleteSet here (a tree implementation would be best)\n        // @todo use global set definitions\n        /**\n         * @type {Set<Item>}\n         */\n        const conflictingItems = new Set();\n        /**\n         * @type {Set<Item>}\n         */\n        const itemsBeforeOrigin = new Set();\n        // Let c in conflictingItems, b in itemsBeforeOrigin\n        // ***{origin}bbbb{this}{c,b}{c,b}{o}***\n        // Note that conflictingItems is a subset of itemsBeforeOrigin\n        while (o !== null && o !== this.right) {\n          itemsBeforeOrigin.add(o);\n          conflictingItems.add(o);\n          if (compareIDs(this.origin, o.origin)) {\n            // case 1\n            if (o.id.client < this.id.client) {\n              left = o;\n              conflictingItems.clear();\n            } else if (compareIDs(this.rightOrigin, o.rightOrigin)) {\n              // this and o are conflicting and point to the same integration points. The id decides which item comes first.\n              // Since this is to the left of o, we can break here\n              break\n            } // else, o might be integrated before an item that this conflicts with. If so, we will find it in the next iterations\n          } else if (o.origin !== null && itemsBeforeOrigin.has(getItem(transaction.doc.store, o.origin))) { // use getItem instead of getItemCleanEnd because we don't want / need to split items.\n            // case 2\n            if (!conflictingItems.has(getItem(transaction.doc.store, o.origin))) {\n              left = o;\n              conflictingItems.clear();\n            }\n          } else {\n            break\n          }\n          o = o.right;\n        }\n        this.left = left;\n      }\n      // reconnect left/right + update parent map/start if necessary\n      if (this.left !== null) {\n        const right = this.left.right;\n        this.right = right;\n        this.left.right = this;\n      } else {\n        let r;\n        if (this.parentSub !== null) {\n          r = /** @type {AbstractType<any>} */ (this.parent)._map.get(this.parentSub) || null;\n          while (r !== null && r.left !== null) {\n            r = r.left;\n          }\n        } else {\n          r = /** @type {AbstractType<any>} */ (this.parent)._start\n          ;/** @type {AbstractType<any>} */ (this.parent)._start = this;\n        }\n        this.right = r;\n      }\n      if (this.right !== null) {\n        this.right.left = this;\n      } else if (this.parentSub !== null) {\n        // set as current parent value if right === null and this is parentSub\n        /** @type {AbstractType<any>} */ (this.parent)._map.set(this.parentSub, this);\n        if (this.left !== null) {\n          // this is the current attribute value of parent. delete right\n          this.left.delete(transaction);\n        }\n      }\n      // adjust length of parent\n      if (this.parentSub === null && this.countable && !this.deleted) {\n        /** @type {AbstractType<any>} */ (this.parent)._length += this.length;\n      }\n      addStruct(transaction.doc.store, this);\n      this.content.integrate(transaction, this);\n      // add parent to transaction.changed\n      addChangedTypeToTransaction(transaction, /** @type {AbstractType<any>} */ (this.parent), this.parentSub);\n      if ((/** @type {AbstractType<any>} */ (this.parent)._item !== null && /** @type {AbstractType<any>} */ (this.parent)._item.deleted) || (this.parentSub !== null && this.right !== null)) {\n        // delete if parent is deleted or if this is not the current attribute value of parent\n        this.delete(transaction);\n      }\n    } else {\n      // parent is not defined. Integrate GC struct instead\n      new GC(this.id, this.length).integrate(transaction, 0);\n    }\n  }\n\n  /**\n   * Returns the next non-deleted item\n   */\n  get next () {\n    let n = this.right;\n    while (n !== null && n.deleted) {\n      n = n.right;\n    }\n    return n\n  }\n\n  /**\n   * Returns the previous non-deleted item\n   */\n  get prev () {\n    let n = this.left;\n    while (n !== null && n.deleted) {\n      n = n.left;\n    }\n    return n\n  }\n\n  /**\n   * Computes the last content address of this Item.\n   */\n  get lastId () {\n    // allocating ids is pretty costly because of the amount of ids created, so we try to reuse whenever possible\n    return this.length === 1 ? this.id : createID(this.id.client, this.id.clock + this.length - 1)\n  }\n\n  /**\n   * Try to merge two items\n   *\n   * @param {Item} right\n   * @return {boolean}\n   */\n  mergeWith (right) {\n    if (\n      this.constructor === right.constructor &&\n      compareIDs(right.origin, this.lastId) &&\n      this.right === right &&\n      compareIDs(this.rightOrigin, right.rightOrigin) &&\n      this.id.client === right.id.client &&\n      this.id.clock + this.length === right.id.clock &&\n      this.deleted === right.deleted &&\n      this.redone === null &&\n      right.redone === null &&\n      this.content.constructor === right.content.constructor &&\n      this.content.mergeWith(right.content)\n    ) {\n      const searchMarker = /** @type {AbstractType<any>} */ (this.parent)._searchMarker;\n      if (searchMarker) {\n        searchMarker.forEach(marker => {\n          if (marker.p === right) {\n            // right is going to be \"forgotten\" so we need to update the marker\n            marker.p = this;\n            // adjust marker index\n            if (!this.deleted && this.countable) {\n              marker.index -= this.length;\n            }\n          }\n        });\n      }\n      if (right.keep) {\n        this.keep = true;\n      }\n      this.right = right.right;\n      if (this.right !== null) {\n        this.right.left = this;\n      }\n      this.length += right.length;\n      return true\n    }\n    return false\n  }\n\n  /**\n   * Mark this Item as deleted.\n   *\n   * @param {Transaction} transaction\n   */\n  delete (transaction) {\n    if (!this.deleted) {\n      const parent = /** @type {AbstractType<any>} */ (this.parent);\n      // adjust the length of parent\n      if (this.countable && this.parentSub === null) {\n        parent._length -= this.length;\n      }\n      this.markDeleted();\n      addToDeleteSet(transaction.deleteSet, this.id.client, this.id.clock, this.length);\n      addChangedTypeToTransaction(transaction, parent, this.parentSub);\n      this.content.delete(transaction);\n    }\n  }\n\n  /**\n   * @param {StructStore} store\n   * @param {boolean} parentGCd\n   */\n  gc (store, parentGCd) {\n    if (!this.deleted) {\n      throw error.unexpectedCase()\n    }\n    this.content.gc(store);\n    if (parentGCd) {\n      replaceStruct(store, this, new GC(this.id, this.length));\n    } else {\n      this.content = new ContentDeleted(this.length);\n    }\n  }\n\n  /**\n   * Transform the properties of this type to binary and write it to an\n   * BinaryEncoder.\n   *\n   * This is called when this Item is sent to a remote peer.\n   *\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder The encoder to write data to.\n   * @param {number} offset\n   */\n  write (encoder, offset) {\n    const origin = offset > 0 ? createID(this.id.client, this.id.clock + offset - 1) : this.origin;\n    const rightOrigin = this.rightOrigin;\n    const parentSub = this.parentSub;\n    const info = (this.content.getRef() & binary.BITS5) |\n      (origin === null ? 0 : binary.BIT8) | // origin is defined\n      (rightOrigin === null ? 0 : binary.BIT7) | // right origin is defined\n      (parentSub === null ? 0 : binary.BIT6); // parentSub is non-null\n    encoder.writeInfo(info);\n    if (origin !== null) {\n      encoder.writeLeftID(origin);\n    }\n    if (rightOrigin !== null) {\n      encoder.writeRightID(rightOrigin);\n    }\n    if (origin === null && rightOrigin === null) {\n      const parent = /** @type {AbstractType<any>} */ (this.parent);\n      if (parent._item !== undefined) {\n        const parentItem = parent._item;\n        if (parentItem === null) {\n          // parent type on y._map\n          // find the correct key\n          const ykey = findRootTypeKey(parent);\n          encoder.writeParentInfo(true); // write parentYKey\n          encoder.writeString(ykey);\n        } else {\n          encoder.writeParentInfo(false); // write parent id\n          encoder.writeLeftID(parentItem.id);\n        }\n      } else if (parent.constructor === String) { // this edge case was added by differential updates\n        encoder.writeParentInfo(true); // write parentYKey\n        encoder.writeString(parent);\n      } else if (parent.constructor === ID) {\n        encoder.writeParentInfo(false); // write parent id\n        encoder.writeLeftID(parent);\n      } else {\n        error.unexpectedCase();\n      }\n      if (parentSub !== null) {\n        encoder.writeString(parentSub);\n      }\n    }\n    this.content.write(encoder, offset);\n  }\n}\n\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n * @param {number} info\n */\nconst readItemContent = (decoder, info) => contentRefs[info & binary.BITS5](decoder);\n\n/**\n * A lookup map for reading Item content.\n *\n * @type {Array<function(UpdateDecoderV1 | UpdateDecoderV2):AbstractContent>}\n */\nconst contentRefs = [\n  () => { error.unexpectedCase(); }, // GC is not ItemContent\n  readContentDeleted, // 1\n  readContentJSON, // 2\n  readContentBinary, // 3\n  readContentString, // 4\n  readContentEmbed, // 5\n  readContentFormat, // 6\n  readContentType, // 7\n  readContentAny, // 8\n  readContentDoc, // 9\n  () => { error.unexpectedCase(); } // 10 - Skip is not ItemContent\n];\n\nconst structSkipRefNumber = 10;\n\n/**\n * @private\n */\nclass Skip extends AbstractStruct {\n  get deleted () {\n    return true\n  }\n\n  delete () {}\n\n  /**\n   * @param {Skip} right\n   * @return {boolean}\n   */\n  mergeWith (right) {\n    if (this.constructor !== right.constructor) {\n      return false\n    }\n    this.length += right.length;\n    return true\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {number} offset\n   */\n  integrate (transaction, offset) {\n    // skip structs cannot be integrated\n    error.unexpectedCase();\n  }\n\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   * @param {number} offset\n   */\n  write (encoder, offset) {\n    encoder.writeInfo(structSkipRefNumber);\n    // write as VarUint because Skips can't make use of predictable length-encoding\n    encoding.writeVarUint(encoder.restEncoder, this.length - offset);\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {StructStore} store\n   * @return {null | number}\n   */\n  getMissing (transaction, store) {\n    return null\n  }\n}\n\nexport { AbstractConnector, AbstractStruct, AbstractType, YArray as Array, ContentAny, ContentBinary, ContentDeleted, ContentEmbed, ContentFormat, ContentJSON, ContentString, ContentType, Doc, GC, ID, Item, YMap as Map, PermanentUserData, RelativePosition, Snapshot, YText as Text, Transaction, UndoManager, YXmlElement as XmlElement, YXmlFragment as XmlFragment, YXmlHook as XmlHook, YXmlText as XmlText, YArrayEvent, YEvent, YMapEvent, YTextEvent, YXmlEvent, applyUpdate, applyUpdateV2, compareIDs, compareRelativePositions, createAbsolutePositionFromRelativePosition, createDeleteSet, createDeleteSetFromStructStore, createDocFromSnapshot, createID, createRelativePositionFromJSON, createRelativePositionFromTypeIndex, createSnapshot, decodeRelativePosition, decodeSnapshot, decodeSnapshotV2, decodeStateVector, diffUpdate, diffUpdateV2, emptySnapshot, encodeRelativePosition, encodeSnapshot, encodeSnapshotV2, encodeStateAsUpdate, encodeStateAsUpdateV2, encodeStateVector, encodeStateVectorFromUpdate, encodeStateVectorFromUpdateV2, equalSnapshots, findRootTypeKey, getItem, getState, getTypeChildren, isDeleted, isParentOf, iterateDeletedStructs, logType, logUpdate, logUpdateV2, mergeUpdates, mergeUpdatesV2, parseUpdateMeta, parseUpdateMetaV2, readUpdate, readUpdateV2, relativePositionToJSON, snapshot, transact, tryGc, typeListToArraySnapshot, typeMapGetSnapshot };\n//# sourceMappingURL=yjs.mjs.map\n","/**\n * @since 2021-08-09\n * @author vivaxy\n */\nexport const DATA_TYPES = {\n  // utils\n  DOC: 'Doc',\n\n  // types\n  ABSTRACT_TYPE: 'AbstractType',\n  Y_ARRAY: 'YArray',\n  Y_MAP: 'YMap',\n  Y_TEXT: 'YText',\n  Y_XML_ELEMENT: 'YXmlElement',\n  Y_XML_FRAGMENT: 'YXmlFragment',\n  Y_XML_TEXT: 'YXmlText',\n\n  // structs\n  ABSTRACT_STRUCT: 'AbstractStruct',\n  GC: 'GC',\n  ITEM: 'Item',\n  Skip: 'Skip',\n\n  // contents\n  CONTENT_ANY: 'ContentAny',\n  CONTENT_BINARY: 'ContentBinary',\n  CONTENT_DELETED: 'ContentDeleted',\n  CONTENT_DOC: 'ContentDoc',\n  CONTENT_EMBED: 'ContentEmbed',\n  CONTENT_FORMAT: 'ContentFormat',\n  CONTENT_JSON: 'ContentJSON',\n  CONTENT_STRING: 'ContentString',\n  CONTENT_TYPE: 'ContentType',\n};\n\nfunction deletedItemToJSON(item) {\n  if ((item.info & 4) > 0) {\n    return {\n      deleted: true,\n    };\n  }\n  return {};\n}\n\nfunction typeMapToJSON(type, Y) {\n  const map = {};\n  for (const [key, value] of type._map) {\n    map[key] = toJSON(value, Y);\n  }\n  return map;\n}\n\nfunction typeArrayToJSON(type, Y) {\n  const array = [];\n  let item = type._start;\n  while (item !== null) {\n    array.push(toJSON(item, Y));\n    item = item.right;\n  }\n  return array;\n}\n\nconst handlers = {\n  [DATA_TYPES.DOC](doc, Y) {\n    const result = {\n      share: {},\n      store: {\n        clients: {},\n        pendingDs: null,\n        pendingStructs: null,\n      },\n    };\n    for (const [key, value] of doc.share) {\n      result.share[key] = toJSON(value, Y);\n    }\n    for (const [clientID, items] of doc.store.clients) {\n      result.store.clients[clientID] = items.map((item) => toJSON(item, Y));\n    }\n    return result;\n  },\n  [DATA_TYPES.Y_ARRAY](yArray, Y) {\n    return { array: typeArrayToJSON(yArray, Y) };\n  },\n  [DATA_TYPES.Y_MAP](yMap, Y) {\n    return { map: typeMapToJSON(yMap, Y) };\n  },\n  [DATA_TYPES.Y_TEXT](yText, Y) {\n    return { text: typeArrayToJSON(yText, Y) };\n  },\n  [DATA_TYPES.Y_XML_ELEMENT](yXmlElement, Y) {\n    return {\n      nodeName: yXmlElement.nodeName,\n      attributes: typeMapToJSON(yXmlElement, Y),\n      children: typeArrayToJSON(yXmlElement, Y),\n    };\n  },\n  [DATA_TYPES.Y_XML_FRAGMENT](yXmlFragment, Y) {\n    return { children: typeArrayToJSON(yXmlFragment, Y) };\n  },\n  [DATA_TYPES.Y_XML_TEXT](yXmlText, Y) {\n    return { xmlText: typeArrayToJSON(yXmlText, Y) };\n  },\n  [DATA_TYPES.GC](gc) {\n    return {\n      client: gc.id.client,\n      clock: gc.id.clock,\n      length: gc.length,\n    };\n  },\n  [DATA_TYPES.ITEM](item, Y) {\n    return {\n      client: item.id.client,\n      clock: item.id.clock,\n      ...deletedItemToJSON(item),\n      content: toJSON(item.content, Y),\n    };\n  },\n  [DATA_TYPES.CONTENT_ANY](contentAny) {\n    return { value: contentAny.arr };\n  },\n  [DATA_TYPES.CONTENT_BINARY](contentBinary) {\n    return { binary: contentBinary.content };\n  },\n  [DATA_TYPES.CONTENT_DELETED](contentDeleted) {\n    return { length: contentDeleted.len };\n  },\n  [DATA_TYPES.CONTENT_DOC](contentDoc) {\n    return { doc: contentDoc.doc };\n  },\n  [DATA_TYPES.CONTENT_EMBED](contentEmbed) {\n    return { embed: contentEmbed.embed };\n  },\n  [DATA_TYPES.CONTENT_FORMAT](contentFormat) {\n    return { key: contentFormat.key, value: contentFormat.value };\n  },\n  [DATA_TYPES.CONTENT_JSON](contentJSON) {\n    return { json: contentJSON.arr };\n  },\n  [DATA_TYPES.CONTENT_STRING](contentString) {\n    return { string: contentString.str };\n  },\n  [DATA_TYPES.CONTENT_TYPE](contentType, Y) {\n    return { value: toJSON(contentType.type, Y) };\n  },\n};\n\nfunction getDataType(value, Y) {\n  switch (value.constructor) {\n    // utils\n    case Y.Doc:\n      return DATA_TYPES.DOC;\n    // types\n    case Y.Array:\n      return DATA_TYPES.Y_ARRAY;\n    case Y.Map:\n      return DATA_TYPES.Y_MAP;\n    case Y.Text:\n      return DATA_TYPES.Y_TEXT;\n    case Y.XmlElement:\n      return DATA_TYPES.Y_XML_ELEMENT;\n    case Y.XmlFragment:\n      return DATA_TYPES.Y_XML_FRAGMENT;\n    case Y.XmlText:\n      return DATA_TYPES.Y_XML_TEXT;\n    case Y.AbstractType:\n      return DATA_TYPES.ABSTRACT_TYPE;\n    // structs\n    case Y.Item:\n      return DATA_TYPES.ITEM;\n    case Y.GC:\n      return DATA_TYPES.GC;\n    case Y.Skip:\n      return DATA_TYPES.Skip;\n    case Y.AbstractStruct:\n      return DATA_TYPES.ABSTRACT_STRUCT;\n    // contents\n    case Y.ContentAny:\n      return DATA_TYPES.CONTENT_ANY;\n    case Y.ContentBinary:\n      return DATA_TYPES.CONTENT_BINARY;\n    case Y.ContentDeleted:\n      return DATA_TYPES.CONTENT_DELETED;\n    // Skip CONTENT_DOC\n    case Y.ContentEmbed:\n      return DATA_TYPES.CONTENT_EMBED;\n    case Y.ContentFormat:\n      return DATA_TYPES.CONTENT_FORMAT;\n    case Y.ContentJSON:\n      return DATA_TYPES.CONTENT_JSON;\n    case Y.ContentString:\n      return DATA_TYPES.CONTENT_STRING;\n    case Y.ContentType:\n      return DATA_TYPES.CONTENT_TYPE;\n    default:\n      return null;\n  }\n}\n\nexport default function toJSON(value, Y) {\n  console.assert(Y, 'pass Y');\n  const type = getDataType(value, Y);\n  const handler = handlers[type];\n  if (!handler) {\n    return {\n      type: type,\n      error: `Unexpected type ${type}`,\n    };\n  }\n  const json = handler(value, Y);\n  console.assert(json.type === undefined, 'should not include type');\n  return {\n    type: type,\n    ...json,\n  };\n}\n","/**\n * @since 2021-06-24\n * @author vivaxy\n */\nimport * as Y from 'yjs';\nimport { toJSON, DATA_TYPES } from '../data-visualization/src/data-viewer';\n\nconst TEXT_KEY = 'text';\n\nconst errors = {\n  unexpectedType(type) {\n    return new Error('Unexpected type: ' + type);\n  },\n};\n\nfunction printText(doc, message = '') {\n  const xmlText = doc.get(TEXT_KEY, Y.XmlText);\n  const json = toJSON(xmlText, Y);\n  console.log(\n    message,\n    json.xmlText\n      .map(function (item) {\n        if (item.content.type === DATA_TYPES.CONTENT_FORMAT) {\n          if (item.content.value === null) {\n            return `</${item.content.key}>`;\n          }\n          const attrs = Object.keys(item.content.value)\n            .map(function (key) {\n              return `${key}=\"${item.content.value[key]}\"`;\n            })\n            .join(' ');\n          return `<${item.content.key} ${attrs}>`;\n        }\n        if (item.content.type === DATA_TYPES.CONTENT_STRING) {\n          return `${item.content.string}`;\n        }\n        if (item.content.type === DATA_TYPES.CONTENT_DELETED) {\n          return `<ContentDeleted />`;\n        }\n        throw errors.unexpectedType(item.content.type);\n      })\n      .join(' -> '),\n  );\n}\n\nfunction localConflict() {\n  const doc = new Y.Doc();\n\n  const xmlText = doc.get(TEXT_KEY, Y.XmlText);\n  xmlText.applyDelta([{ insert: 'ABC' }]);\n  xmlText.applyDelta([\n    { retain: 2, attributes: { color: { color: 'red' } } },\n    { retain: 1 },\n  ]);\n  xmlText.applyDelta([\n    { retain: 1 },\n    { retain: 2, attributes: { color: { color: 'blue' } } },\n  ]);\n  printText(doc);\n  // actual is <color color=\"red\"> -> A -> <color color=\"blue\"> -> B -> <ContentDeleted /> -> C -> </color>\n  // should be <color color=\"red\"> -> A -> <color color=\"blue\"> -> B -> </color> -> C -> </color>\n}\n\nfunction remoteConflict() {\n  const doc1 = new Y.Doc();\n  const xmlText1 = doc1.get(TEXT_KEY, Y.XmlText);\n  xmlText1.insert(0, 'ABC');\n  printText(doc1, 'doc1:');\n  // ABC\n\n  const doc2 = new Y.Doc();\n  const xmlText2 = doc2.get(TEXT_KEY, Y.XmlText);\n  Y.applyUpdate(doc2, Y.encodeStateAsUpdate(doc1));\n\n  xmlText1.applyDelta([\n    { retain: 2, attributes: { color: { color: 'red' } } },\n    { retain: 1 },\n  ]);\n  // <color color=\"red\" id=\"1_3\"> -> AB -> </color> -> C\n\n  xmlText2.applyDelta([\n    { retain: 1 },\n    { retain: 2, attributes: { color: { color: 'blue' } } },\n  ]);\n  // A -> <color color=\"blue\" id=\"2_0\"> -> BC -> </color>\n\n  Y.applyUpdate(doc1, Y.encodeStateAsUpdate(doc2));\n  printText(doc1, 'doc1:');\n  // actual is <color color=\"red\"> -> A -> <color color=\"blue\"> -> B -> </color> -> C -> </color>\n  // should be <color color=\"red\" id=\"1_3\"> -> A -> <color color=\"blue\" id=\"2_0\"> -> B -> </color id=\"1_3\"> -> C -> </color id=\"2_0\">\n\n  xmlText1.applyDelta([\n    { retain: 1 },\n    { retain: 2, attributes: { color: { color: 'blue' } } },\n  ]);\n  console.log(xmlText1.toString());\n  printText(doc1, 'doc1:');\n}\n\nlocalConflict();\nremoteConflict();\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","create","Map","copy","m","r","forEach","v","k","set","setIfUndefined","map","createT","undefined","Set","last","arr","length","appendTo","dest","src","i","push","from","Array","Observable","constructor","this","_observers","on","name","f","add","once","_f","args","off","observers","delete","size","emit","values","destroy","floor","Math","abs","ceil","min","imul","round","log10","log2","log","sqrt","a","b","max","isNegativeZero","Number","isNaN","pow","sign","n","trimLeftRegex","String","fromCharCode","fromCodePoint","fromCamelCaseRegex","fromCamelCase","s","separator","replace","trimLeft","match","toLowerCase","TextEncoder","utf8TextDecoder","TextDecoder","fatal","ignoreBOM","decode","Uint8Array","_localStorage","setItem","newValue","getItem","usePolyfill","localStorage","e","varStorage","isNode","process","release","test","params","navigator","platform","pargs","argv","currParamName","parg","location","search","slice","split","kv","computeParams","has","hasParam","env","toUpperCase","getVariable","createUint8ArrayViewFromArrayBuffer","buffer","byteOffset","BIT7","BIT8","BITS7","isInteger","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","num","isFinite","Encoder","cpos","cbuf","bufs","createEncoder","toUint8Array","encoder","uint8arr","len","curPos","d","write","bufferLen","writeUint8","writeVarUint","writeVarInt","isNegative","writeVarString","str","encodedString","unescape","encodeURIComponent","codePointAt","writeUint8Array","uint8Array","leftCopyLen","rightCopyLen","subarray","writeVarUint8Array","byteLength","writeOnDataView","verifyLen","dview","DataView","floatTestBed","ArrayBuffer","writeAny","data","setFloat32","getFloat32","writeFloat32","setFloat64","writeFloat64","setBigInt64","writeBigInt64","keys","RleEncoder","writer","super","w","count","flushUintOptRleEncoder","UintOptRleEncoder","flushIntDiffOptRleEncoder","encodedDiff","diff","IntDiffOptRleEncoder","StringEncoder","sarr","lensE","string","join","Decoder","pos","createDecoder","hasContent","decoder","readVarUint8Array","view","readUint8Array","readVarUint","readUint8","Error","readVarInt","readVarString","remainingLen","nextLen","bytes","apply","decodeURIComponent","escape","readFromDataView","dv","readAnyLookupTable","getFloat64","getBigInt64","readAny","RleDecoder","reader","read","UintOptRleDecoder","IntDiffOptRleDecoder","hasCount","StringDecoder","spos","end","res","window","performance","isoCrypto","crypto","cryptoRandomBuffer","buf","getRandomValues","random","uint32","Uint32Array","uuidv4Template","uuidv4","c","toString","methodUnimplemented","unexpectedCase","callAll","fs","Pair","left","right","doc","document","getUnixTime","DOMParser","ELEMENT_NODE","TEXT_NODE","CDATA_SECTION_NODE","COMMENT_NODE","DOCUMENT_NODE","DOCUMENT_TYPE_NODE","DOCUMENT_FRAGMENT_NODE","Date","now","BOLD","UNBOLD","BLUE","GREY","GREEN","RED","PURPLE","ORANGE","UNCOLOR","_browserStyleMap","_nodeStyleMap","computeLoggingArgs","strBuilder","logArgs","arg","style","styles","currentStyle","unshift","print","console","vconsoles","vc","createIterator","next","iterator","iteratorMap","fmap","done","assign","AbstractConnector","ydoc","awareness","DeleteItem","clock","DeleteSet","clients","iterateDeletedStructs","transaction","ds","deletes","clientid","structs","store","del","iterateStructs","isDeleted","id","dis","client","midindex","mid","midclock","findIndexDS","sortAndMergeDeleteSet","dels","j","sort","mergeDeleteSets","dss","merged","dssI","delsLeft","addToDeleteSet","createDeleteSet","createDeleteSetFromStructStore","ss","dsitems","struct","deleted","writeDeleteSet","restEncoder","resetDsCurVal","item","writeDsClock","writeDsLen","readDeleteSet","numClients","restDecoder","numberOfDeletes","dsField","readDsClock","readDsLen","readAndApplyDeleteSet","unappliedDS","state","getState","clockEnd","index","findIndexSS","splice","splitItem","UpdateEncoderV2","generateNewClientId","Doc","guid","gc","gcFilter","meta","autoLoad","clientID","share","StructStore","_transaction","_transactionCleanups","subdocs","_item","shouldLoad","load","transact","subdocsLoaded","getSubdocs","getSubdocGuids","origin","TypeConstructor","AbstractType","type","t","_integrate","Constr","_map","parent","_start","_length","getArray","YArray","getText","YText","getMap","YMap","getXmlFragment","YXmlFragment","toJSON","subdoc","content","opts","subdocsAdded","subdocsRemoved","eventName","DSDecoderV1","UpdateDecoderV1","readLeftID","createID","readRightID","readClient","readInfo","readString","readParentInfo","readTypeRef","readLen","readBuf","newBuf","readJSON","JSON","parse","readKey","DSDecoderV2","dsCurrVal","UpdateDecoderV2","keyClockDecoder","clientDecoder","leftClockDecoder","rightClockDecoder","infoDecoder","stringDecoder","parentInfoDecoder","typeRefDecoder","lenDecoder","ID","keyClock","DSEncoderV1","UpdateEncoderV1","writeLeftID","writeRightID","writeClient","writeInfo","info","writeString","writeParentInfo","isYKey","writeTypeRef","writeLen","any","writeBuf","writeJSON","embed","stringify","writeKey","DSEncoderV2","keyMap","keyClockEncoder","clientEncoder","leftClockEncoder","rightClockEncoder","infoEncoder","stringEncoder","parentInfoEncoder","typeRefEncoder","lenEncoder","writeClientsStructs","_sm","sm","getStateVector","entries","startNewStructs","firstStruct","writeStructs","readUpdateV2","transactionOrigin","structDecoder","local","retry","restStructs","clientsStructRefs","stack","clientsStructRefsIds","getNextStructTarget","nextStructsTarget","refs","pop","curStructsTarget","missingSV","updateMissingSv","mclock","stackHead","addStackToRestSS","unapplicableItems","filter","Skip","offset","missing","getMissing","structRefs","integrate","update","integrateStructs","clientRefs","numOfStateUpdates","numberOfStructs","GC","cantCopyParentInfo","Item","readItemContent","readClientsStructRefs","pending","pendingStructs","mergeUpdatesV2","dsRest","pendingDs","pendingDSUpdate","dsRest2","applyUpdateV2","readUpdate","YDecoder","applyUpdate","encodeStateAsUpdateV2","encodedTargetStateVector","targetStateVector","writeStateAsUpdate","decodeStateVector","updates","diffUpdateV2","mergeUpdates","convertUpdateFormatV2ToV1","encodeStateAsUpdate","readStateVector","ssLength","decodedState","writeStateVector","sv","encodeStateVector","writeDocumentStateVector","encodeStateVectorV2","EventHandler","l","createEventHandler","addEventHandlerListener","eventHandler","removeEventHandlerListener","g","error","callEventHandlerListeners","arg0","arg1","compareIDs","writeID","readID","findRootTypeKey","child","logType","PermanentUserData","storeType","yusers","initUser","user","userDescription","ids","addClientId","observe","event","changes","added","getContent","encodedDs","keysChanged","setUserMapping","users","setTimeout","userOverwrite","_userDescription","yds","deleteSet","getUserByClientId","getUserByDeletedId","RelativePosition","tname","assoc","relativePositionToJSON","rpos","json","createRelativePositionFromJSON","AbsolutePosition","createRelativePosition","typeid","createRelativePositionFromTypeIndex","countable","lastId","encodeRelativePosition","writeRelativePosition","decodeRelativePosition","itemID","readRelativePosition","createAbsolutePositionFromRelativePosition","rightID","typeID","followRedone","ContentType","createAbsolutePosition","compareRelativePositions","Snapshot","equalSnapshots","snap1","snap2","ds1","ds2","sv1","sv2","dsitems1","dsitems2","dsitem1","dsitem2","encodeSnapshotV2","snapshot","encodeSnapshot","decodeSnapshotV2","decodeSnapshot","createSnapshot","emptySnapshot","isVisible","splitSnapshotAffectedStructs","getItemCleanStart","createDocFromSnapshot","originDoc","newDoc","lastStructIndex","lastStruct","addStruct","findIndexCleanStart","getItemCleanEnd","clockStart","Transaction","beforeState","afterState","changed","changedParentTypes","_mergeStructs","writeUpdateMessageFromTransaction","writeStructsFromTransaction","addChangedTypeToTransaction","parentSub","tryToMergeWithLeft","mergeWith","tryGcDeleteSet","deleteItems","di","deleteItem","endDeleteItemClock","si","keep","tryMergeDeleteSet","tryGc","cleanupTransactions","transactionCleanups","mergeStructs","subs","itemtype","_callObserver","events","target","currentTarget","event1","event2","path","_dEH","beforeClock","firstChangePos","replacedStructPos","loaded","removed","initialCall","StackItem","deletions","insertions","popStackItem","undoManager","eventType","result","_tr","scope","stackItem","itemsToRedo","itemsToDelete","performedChange","redone","some","redoItem","deleteFilter","subProps","_searchMarker","UndoManager","typeScope","captureTimeout","trackedOrigins","undoStack","redoStack","undoing","redoing","lastChange","stopCapturing","endClock","startClock","lastOp","keepItem","clear","clearItem","undo","redo","LazyStructReader","filterSkips","gen","lazyStructReaderGenerator","curr","logUpdate","logUpdateV2","updateDecoder","lazyDecoder","LazyStructWriter","currClient","written","clientStructs","encodeStateVectorFromUpdateV2","YEncoder","stopCounting","currClock","enc","append","encodeStateVectorFromUpdate","parseUpdateMetaV2","to","parseUpdateMeta","sliceStruct","leftItem","rightOrigin","updateDecoders","lazyStructDecoders","currWrite","updateEncoder","lazyStructEncoder","dec","dec1","dec2","clockDiff","currDecoder","firstClient","iterated","writeStructToLazyStructWriter","finishLazyStructWriting","lazyStructWriter","svClock","diffUpdate","flushLazyStructWriter","lazyWriter","partStructs","convertUpdateFormat","YEvent","_changes","_keys","_delta","getPathTo","action","oldValue","adds","prev","delta","packOp","insert","concat","retain","globalSearchMarkerTimestamp","ArraySearchMarker","p","marker","timestamp","overwriteMarker","findMarker","yarray","reduce","pindex","refreshMarkerTimestamp","searchMarker","pm","markPosition","updateMarkerChanges","getTypeChildren","callTypeObservers","changedType","_eH","y","_copy","clone","_write","parentSubs","observeDeep","unobserve","unobserveDeep","typeListSlice","start","cs","typeListToArray","typeListToArraySnapshot","typeListForEach","typeListMap","typeListCreateIterator","currentContent","currentContentIndex","typeListGet","typeListInsertGenericsAfter","referenceItem","ownClientId","jsonContent","packJsonContent","ContentAny","Boolean","ContentBinary","ContentDoc","lengthExceeded","typeListInsertGenerics","startIndex","typeListDelete","startLength","typeMapDelete","typeMapSet","typeMapGet","val","typeMapGetAll","typeMapHas","typeMapGetSnapshot","createMapIterator","entry","YArrayEvent","_prelimContent","items","toArray","el","YArrayRefID","YMapEvent","ymap","YMapRefID","equalAttrs","hasProperty","ItemTextListPosition","currentAttributes","forward","ContentEmbed","ContentString","ContentFormat","updateCurrentAttributes","findNextPosition","findPosition","insertNegatedAttributes","currPos","negatedAttributes","nextFormat","format","minimizeAttributeChanges","attributes","insertAttributes","currentVal","insertText","text","getLength","formatText","attr","newlines","cleanupFormattingGap","startAttributes","endAttributes","cleanups","deleteText","startAttrs","YTextEvent","ytext","childListChanged","sub","oldAttributes","deleteLen","addOp","op","curVal","_pending","applyDelta","toDelta","foundFormattingItem","afterClock","cleanupYTextFormatting","attrs","cleanupContextlessFormattingGap","sanitize","ins","prevSnapshot","computeYChange","ops","packStr","addAttributes","cur","insertEmbed","removeAttribute","attributeName","setAttribute","attributeValue","getAttribute","getAttributes","YTextRefID","YXmlTreeWalker","root","_filter","_root","_currentNode","_firstCall","YXmlElement","first","_first","createTreeWalker","querySelector","query","element","nodeName","querySelectorAll","YXmlEvent","xml","toDOM","_document","hooks","binding","fragment","createDocumentFragment","_createAssociation","xmlType","insertBefore","insertAfter","ref","refItem","pc","findIndex","YXmlFragmentRefID","_prelimAttrs","stringBuilder","keysLen","toLocaleLowerCase","hasAttribute","dom","createElement","yxml","appendChild","YXmlElementRefID","attributesChanged","YXmlHook","hookName","hook","createDom","YXmlHookRefID","YXmlText","createTextNode","nestedNodes","node","YXmlTextRefID","AbstractStruct","encodingRef","isCountable","getRef","ContentDeleted","markDeleted","ContentJSON","firstCharCode","charCodeAt","typeRefs","nextID","rightItem","redoitems","ownClientID","parentItem","leftTrace","rightTrace","nextClock","nextId","redoneItem","isMarked","doKeep","doDelete","conflictingItems","itemsBeforeOrigin","parentGCd","newStruct","replaceStruct","ykey","contentRefs","DATA_TYPES","deletedItemToJSON","typeMapToJSON","Y","typeArrayToJSON","array","handlers","yArray","yMap","yText","yXmlElement","children","yXmlFragment","yXmlText","xmlText","contentAny","contentBinary","binary","contentDeleted","contentDoc","contentEmbed","contentFormat","contentJSON","contentString","contentType","assert","Text","XmlElement","XmlFragment","XmlText","getDataType","handler","TEXT_KEY","errors","printText","message","color","localConflict","doc1","xmlText1","doc2","xmlText2","remoteConflict"],"sourceRoot":""}
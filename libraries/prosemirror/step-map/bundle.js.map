{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://step-map/./node_modules/orderedmap/index.es.js","webpack://step-map/./node_modules/prosemirror-model/dist/index.es.js","webpack://step-map/./node_modules/prosemirror-transform/dist/index.es.js","webpack://step-map/./index.js"],"sourcesContent":["// ::- Persistent data structure representing an ordered mapping from\n// strings to values, with some convenient update methods.\nfunction OrderedMap(content) {\n  this.content = content;\n}\n\nOrderedMap.prototype = {\n  constructor: OrderedMap,\n\n  find: function(key) {\n    for (var i = 0; i < this.content.length; i += 2)\n      if (this.content[i] === key) return i\n    return -1\n  },\n\n  // :: (string) → ?any\n  // Retrieve the value stored under `key`, or return undefined when\n  // no such key exists.\n  get: function(key) {\n    var found = this.find(key);\n    return found == -1 ? undefined : this.content[found + 1]\n  },\n\n  // :: (string, any, ?string) → OrderedMap\n  // Create a new map by replacing the value of `key` with a new\n  // value, or adding a binding to the end of the map. If `newKey` is\n  // given, the key of the binding will be replaced with that key.\n  update: function(key, value, newKey) {\n    var self = newKey && newKey != key ? this.remove(newKey) : this;\n    var found = self.find(key), content = self.content.slice();\n    if (found == -1) {\n      content.push(newKey || key, value);\n    } else {\n      content[found + 1] = value;\n      if (newKey) content[found] = newKey;\n    }\n    return new OrderedMap(content)\n  },\n\n  // :: (string) → OrderedMap\n  // Return a map with the given key removed, if it existed.\n  remove: function(key) {\n    var found = this.find(key);\n    if (found == -1) return this\n    var content = this.content.slice();\n    content.splice(found, 2);\n    return new OrderedMap(content)\n  },\n\n  // :: (string, any) → OrderedMap\n  // Add a new key to the start of the map.\n  addToStart: function(key, value) {\n    return new OrderedMap([key, value].concat(this.remove(key).content))\n  },\n\n  // :: (string, any) → OrderedMap\n  // Add a new key to the end of the map.\n  addToEnd: function(key, value) {\n    var content = this.remove(key).content.slice();\n    content.push(key, value);\n    return new OrderedMap(content)\n  },\n\n  // :: (string, string, any) → OrderedMap\n  // Add a key after the given key. If `place` is not found, the new\n  // key is added to the end.\n  addBefore: function(place, key, value) {\n    var without = this.remove(key), content = without.content.slice();\n    var found = without.find(place);\n    content.splice(found == -1 ? content.length : found, 0, key, value);\n    return new OrderedMap(content)\n  },\n\n  // :: ((key: string, value: any))\n  // Call the given function for each key/value pair in the map, in\n  // order.\n  forEach: function(f) {\n    for (var i = 0; i < this.content.length; i += 2)\n      f(this.content[i], this.content[i + 1]);\n  },\n\n  // :: (union<Object, OrderedMap>) → OrderedMap\n  // Create a new map by prepending the keys in this map that don't\n  // appear in `map` before the keys in `map`.\n  prepend: function(map) {\n    map = OrderedMap.from(map);\n    if (!map.size) return this\n    return new OrderedMap(map.content.concat(this.subtract(map).content))\n  },\n\n  // :: (union<Object, OrderedMap>) → OrderedMap\n  // Create a new map by appending the keys in this map that don't\n  // appear in `map` after the keys in `map`.\n  append: function(map) {\n    map = OrderedMap.from(map);\n    if (!map.size) return this\n    return new OrderedMap(this.subtract(map).content.concat(map.content))\n  },\n\n  // :: (union<Object, OrderedMap>) → OrderedMap\n  // Create a map containing all the keys in this map that don't\n  // appear in `map`.\n  subtract: function(map) {\n    var result = this;\n    map = OrderedMap.from(map);\n    for (var i = 0; i < map.content.length; i += 2)\n      result = result.remove(map.content[i]);\n    return result\n  },\n\n  // :: number\n  // The amount of keys in this map.\n  get size() {\n    return this.content.length >> 1\n  }\n};\n\n// :: (?union<Object, OrderedMap>) → OrderedMap\n// Return a map with the given content. If null, create an empty\n// map. If given an ordered map, return that map itself. If given an\n// object, create a map from the object's properties.\nOrderedMap.from = function(value) {\n  if (value instanceof OrderedMap) return value\n  var content = [];\n  if (value) for (var prop in value) content.push(prop, value[prop]);\n  return new OrderedMap(content)\n};\n\nvar orderedmap = OrderedMap;\n\nexport default orderedmap;\n","import OrderedMap from 'orderedmap';\n\nfunction findDiffStart(a, b, pos) {\n  for (var i = 0;; i++) {\n    if (i == a.childCount || i == b.childCount)\n      { return a.childCount == b.childCount ? null : pos }\n\n    var childA = a.child(i), childB = b.child(i);\n    if (childA == childB) { pos += childA.nodeSize; continue }\n\n    if (!childA.sameMarkup(childB)) { return pos }\n\n    if (childA.isText && childA.text != childB.text) {\n      for (var j = 0; childA.text[j] == childB.text[j]; j++)\n        { pos++; }\n      return pos\n    }\n    if (childA.content.size || childB.content.size) {\n      var inner = findDiffStart(childA.content, childB.content, pos + 1);\n      if (inner != null) { return inner }\n    }\n    pos += childA.nodeSize;\n  }\n}\n\nfunction findDiffEnd(a, b, posA, posB) {\n  for (var iA = a.childCount, iB = b.childCount;;) {\n    if (iA == 0 || iB == 0)\n      { return iA == iB ? null : {a: posA, b: posB} }\n\n    var childA = a.child(--iA), childB = b.child(--iB), size = childA.nodeSize;\n    if (childA == childB) {\n      posA -= size; posB -= size;\n      continue\n    }\n\n    if (!childA.sameMarkup(childB)) { return {a: posA, b: posB} }\n\n    if (childA.isText && childA.text != childB.text) {\n      var same = 0, minSize = Math.min(childA.text.length, childB.text.length);\n      while (same < minSize && childA.text[childA.text.length - same - 1] == childB.text[childB.text.length - same - 1]) {\n        same++; posA--; posB--;\n      }\n      return {a: posA, b: posB}\n    }\n    if (childA.content.size || childB.content.size) {\n      var inner = findDiffEnd(childA.content, childB.content, posA - 1, posB - 1);\n      if (inner) { return inner }\n    }\n    posA -= size; posB -= size;\n  }\n}\n\n// ::- A fragment represents a node's collection of child nodes.\n//\n// Like nodes, fragments are persistent data structures, and you\n// should not mutate them or their content. Rather, you create new\n// instances whenever needed. The API tries to make this easy.\nvar Fragment = function Fragment(content, size) {\n  this.content = content;\n  // :: number\n  // The size of the fragment, which is the total of the size of its\n  // content nodes.\n  this.size = size || 0;\n  if (size == null) { for (var i = 0; i < content.length; i++)\n    { this.size += content[i].nodeSize; } }\n};\n\nvar prototypeAccessors = { firstChild: { configurable: true },lastChild: { configurable: true },childCount: { configurable: true } };\n\n// :: (number, number, (node: Node, start: number, parent: Node, index: number) → ?bool, ?number)\n// Invoke a callback for all descendant nodes between the given two\n// positions (relative to start of this fragment). Doesn't descend\n// into a node when the callback returns `false`.\nFragment.prototype.nodesBetween = function nodesBetween (from, to, f, nodeStart, parent) {\n    if ( nodeStart === void 0 ) nodeStart = 0;\n\n  for (var i = 0, pos = 0; pos < to; i++) {\n    var child = this.content[i], end = pos + child.nodeSize;\n    if (end > from && f(child, nodeStart + pos, parent, i) !== false && child.content.size) {\n      var start = pos + 1;\n      child.nodesBetween(Math.max(0, from - start),\n                         Math.min(child.content.size, to - start),\n                         f, nodeStart + start);\n    }\n    pos = end;\n  }\n};\n\n// :: ((node: Node, pos: number, parent: Node) → ?bool)\n// Call the given callback for every descendant node. The callback\n// may return `false` to prevent traversal of a given node's children.\nFragment.prototype.descendants = function descendants (f) {\n  this.nodesBetween(0, this.size, f);\n};\n\n// :: (number, number, ?string, ?string) → string\n// Extract the text between `from` and `to`. See the same method on\n// [`Node`](#model.Node.textBetween).\nFragment.prototype.textBetween = function textBetween (from, to, blockSeparator, leafText) {\n  var text = \"\", separated = true;\n  this.nodesBetween(from, to, function (node, pos) {\n    if (node.isText) {\n      text += node.text.slice(Math.max(from, pos) - pos, to - pos);\n      separated = !blockSeparator;\n    } else if (node.isLeaf && leafText) {\n      text += leafText;\n      separated = !blockSeparator;\n    } else if (!separated && node.isBlock) {\n      text += blockSeparator;\n      separated = true;\n    }\n  }, 0);\n  return text\n};\n\n// :: (Fragment) → Fragment\n// Create a new fragment containing the combined content of this\n// fragment and the other.\nFragment.prototype.append = function append (other) {\n  if (!other.size) { return this }\n  if (!this.size) { return other }\n  var last = this.lastChild, first = other.firstChild, content = this.content.slice(), i = 0;\n  if (last.isText && last.sameMarkup(first)) {\n    content[content.length - 1] = last.withText(last.text + first.text);\n    i = 1;\n  }\n  for (; i < other.content.length; i++) { content.push(other.content[i]); }\n  return new Fragment(content, this.size + other.size)\n};\n\n// :: (number, ?number) → Fragment\n// Cut out the sub-fragment between the two given positions.\nFragment.prototype.cut = function cut (from, to) {\n  if (to == null) { to = this.size; }\n  if (from == 0 && to == this.size) { return this }\n  var result = [], size = 0;\n  if (to > from) { for (var i = 0, pos = 0; pos < to; i++) {\n    var child = this.content[i], end = pos + child.nodeSize;\n    if (end > from) {\n      if (pos < from || end > to) {\n        if (child.isText)\n          { child = child.cut(Math.max(0, from - pos), Math.min(child.text.length, to - pos)); }\n        else\n          { child = child.cut(Math.max(0, from - pos - 1), Math.min(child.content.size, to - pos - 1)); }\n      }\n      result.push(child);\n      size += child.nodeSize;\n    }\n    pos = end;\n  } }\n  return new Fragment(result, size)\n};\n\nFragment.prototype.cutByIndex = function cutByIndex (from, to) {\n  if (from == to) { return Fragment.empty }\n  if (from == 0 && to == this.content.length) { return this }\n  return new Fragment(this.content.slice(from, to))\n};\n\n// :: (number, Node) → Fragment\n// Create a new fragment in which the node at the given index is\n// replaced by the given node.\nFragment.prototype.replaceChild = function replaceChild (index, node) {\n  var current = this.content[index];\n  if (current == node) { return this }\n  var copy = this.content.slice();\n  var size = this.size + node.nodeSize - current.nodeSize;\n  copy[index] = node;\n  return new Fragment(copy, size)\n};\n\n// : (Node) → Fragment\n// Create a new fragment by prepending the given node to this\n// fragment.\nFragment.prototype.addToStart = function addToStart (node) {\n  return new Fragment([node].concat(this.content), this.size + node.nodeSize)\n};\n\n// : (Node) → Fragment\n// Create a new fragment by appending the given node to this\n// fragment.\nFragment.prototype.addToEnd = function addToEnd (node) {\n  return new Fragment(this.content.concat(node), this.size + node.nodeSize)\n};\n\n// :: (Fragment) → bool\n// Compare this fragment to another one.\nFragment.prototype.eq = function eq (other) {\n  if (this.content.length != other.content.length) { return false }\n  for (var i = 0; i < this.content.length; i++)\n    { if (!this.content[i].eq(other.content[i])) { return false } }\n  return true\n};\n\n// :: ?Node\n// The first child of the fragment, or `null` if it is empty.\nprototypeAccessors.firstChild.get = function () { return this.content.length ? this.content[0] : null };\n\n// :: ?Node\n// The last child of the fragment, or `null` if it is empty.\nprototypeAccessors.lastChild.get = function () { return this.content.length ? this.content[this.content.length - 1] : null };\n\n// :: number\n// The number of child nodes in this fragment.\nprototypeAccessors.childCount.get = function () { return this.content.length };\n\n// :: (number) → Node\n// Get the child node at the given index. Raise an error when the\n// index is out of range.\nFragment.prototype.child = function child (index) {\n  var found = this.content[index];\n  if (!found) { throw new RangeError(\"Index \" + index + \" out of range for \" + this) }\n  return found\n};\n\n// :: (number) → ?Node\n// Get the child node at the given index, if it exists.\nFragment.prototype.maybeChild = function maybeChild (index) {\n  return this.content[index]\n};\n\n// :: ((node: Node, offset: number, index: number))\n// Call `f` for every child node, passing the node, its offset\n// into this parent node, and its index.\nFragment.prototype.forEach = function forEach (f) {\n  for (var i = 0, p = 0; i < this.content.length; i++) {\n    var child = this.content[i];\n    f(child, p, i);\n    p += child.nodeSize;\n  }\n};\n\n// :: (Fragment) → ?number\n// Find the first position at which this fragment and another\n// fragment differ, or `null` if they are the same.\nFragment.prototype.findDiffStart = function findDiffStart$1 (other, pos) {\n    if ( pos === void 0 ) pos = 0;\n\n  return findDiffStart(this, other, pos)\n};\n\n// :: (Fragment) → ?{a: number, b: number}\n// Find the first position, searching from the end, at which this\n// fragment and the given fragment differ, or `null` if they are the\n// same. Since this position will not be the same in both nodes, an\n// object with two separate positions is returned.\nFragment.prototype.findDiffEnd = function findDiffEnd$1 (other, pos, otherPos) {\n    if ( pos === void 0 ) pos = this.size;\n    if ( otherPos === void 0 ) otherPos = other.size;\n\n  return findDiffEnd(this, other, pos, otherPos)\n};\n\n// : (number, ?number) → {index: number, offset: number}\n// Find the index and inner offset corresponding to a given relative\n// position in this fragment. The result object will be reused\n// (overwritten) the next time the function is called. (Not public.)\nFragment.prototype.findIndex = function findIndex (pos, round) {\n    if ( round === void 0 ) round = -1;\n\n  if (pos == 0) { return retIndex(0, pos) }\n  if (pos == this.size) { return retIndex(this.content.length, pos) }\n  if (pos > this.size || pos < 0) { throw new RangeError((\"Position \" + pos + \" outside of fragment (\" + (this) + \")\")) }\n  for (var i = 0, curPos = 0;; i++) {\n    var cur = this.child(i), end = curPos + cur.nodeSize;\n    if (end >= pos) {\n      if (end == pos || round > 0) { return retIndex(i + 1, end) }\n      return retIndex(i, curPos)\n    }\n    curPos = end;\n  }\n};\n\n// :: () → string\n// Return a debugging string that describes this fragment.\nFragment.prototype.toString = function toString () { return \"<\" + this.toStringInner() + \">\" };\n\nFragment.prototype.toStringInner = function toStringInner () { return this.content.join(\", \") };\n\n// :: () → ?Object\n// Create a JSON-serializeable representation of this fragment.\nFragment.prototype.toJSON = function toJSON () {\n  return this.content.length ? this.content.map(function (n) { return n.toJSON(); }) : null\n};\n\n// :: (Schema, ?Object) → Fragment\n// Deserialize a fragment from its JSON representation.\nFragment.fromJSON = function fromJSON (schema, value) {\n  if (!value) { return Fragment.empty }\n  if (!Array.isArray(value)) { throw new RangeError(\"Invalid input for Fragment.fromJSON\") }\n  return new Fragment(value.map(schema.nodeFromJSON))\n};\n\n// :: ([Node]) → Fragment\n// Build a fragment from an array of nodes. Ensures that adjacent\n// text nodes with the same marks are joined together.\nFragment.fromArray = function fromArray (array) {\n  if (!array.length) { return Fragment.empty }\n  var joined, size = 0;\n  for (var i = 0; i < array.length; i++) {\n    var node = array[i];\n    size += node.nodeSize;\n    if (i && node.isText && array[i - 1].sameMarkup(node)) {\n      if (!joined) { joined = array.slice(0, i); }\n      joined[joined.length - 1] = node.withText(joined[joined.length - 1].text + node.text);\n    } else if (joined) {\n      joined.push(node);\n    }\n  }\n  return new Fragment(joined || array, size)\n};\n\n// :: (?union<Fragment, Node, [Node]>) → Fragment\n// Create a fragment from something that can be interpreted as a set\n// of nodes. For `null`, it returns the empty fragment. For a\n// fragment, the fragment itself. For a node or array of nodes, a\n// fragment containing those nodes.\nFragment.from = function from (nodes) {\n  if (!nodes) { return Fragment.empty }\n  if (nodes instanceof Fragment) { return nodes }\n  if (Array.isArray(nodes)) { return this.fromArray(nodes) }\n  if (nodes.attrs) { return new Fragment([nodes], nodes.nodeSize) }\n  throw new RangeError(\"Can not convert \" + nodes + \" to a Fragment\" +\n                       (nodes.nodesBetween ? \" (looks like multiple versions of prosemirror-model were loaded)\" : \"\"))\n};\n\nObject.defineProperties( Fragment.prototype, prototypeAccessors );\n\nvar found = {index: 0, offset: 0};\nfunction retIndex(index, offset) {\n  found.index = index;\n  found.offset = offset;\n  return found\n}\n\n// :: Fragment\n// An empty fragment. Intended to be reused whenever a node doesn't\n// contain anything (rather than allocating a new empty fragment for\n// each leaf node).\nFragment.empty = new Fragment([], 0);\n\nfunction compareDeep(a, b) {\n  if (a === b) { return true }\n  if (!(a && typeof a == \"object\") ||\n      !(b && typeof b == \"object\")) { return false }\n  var array = Array.isArray(a);\n  if (Array.isArray(b) != array) { return false }\n  if (array) {\n    if (a.length != b.length) { return false }\n    for (var i = 0; i < a.length; i++) { if (!compareDeep(a[i], b[i])) { return false } }\n  } else {\n    for (var p in a) { if (!(p in b) || !compareDeep(a[p], b[p])) { return false } }\n    for (var p$1 in b) { if (!(p$1 in a)) { return false } }\n  }\n  return true\n}\n\n// ::- A mark is a piece of information that can be attached to a node,\n// such as it being emphasized, in code font, or a link. It has a type\n// and optionally a set of attributes that provide further information\n// (such as the target of the link). Marks are created through a\n// `Schema`, which controls which types exist and which\n// attributes they have.\nvar Mark = function Mark(type, attrs) {\n  // :: MarkType\n  // The type of this mark.\n  this.type = type;\n  // :: Object\n  // The attributes associated with this mark.\n  this.attrs = attrs;\n};\n\n// :: ([Mark]) → [Mark]\n// Given a set of marks, create a new set which contains this one as\n// well, in the right position. If this mark is already in the set,\n// the set itself is returned. If any marks that are set to be\n// [exclusive](#model.MarkSpec.excludes) with this mark are present,\n// those are replaced by this one.\nMark.prototype.addToSet = function addToSet (set) {\n  var copy, placed = false;\n  for (var i = 0; i < set.length; i++) {\n    var other = set[i];\n    if (this.eq(other)) { return set }\n    if (this.type.excludes(other.type)) {\n      if (!copy) { copy = set.slice(0, i); }\n    } else if (other.type.excludes(this.type)) {\n      return set\n    } else {\n      if (!placed && other.type.rank > this.type.rank) {\n        if (!copy) { copy = set.slice(0, i); }\n        copy.push(this);\n        placed = true;\n      }\n      if (copy) { copy.push(other); }\n    }\n  }\n  if (!copy) { copy = set.slice(); }\n  if (!placed) { copy.push(this); }\n  return copy\n};\n\n// :: ([Mark]) → [Mark]\n// Remove this mark from the given set, returning a new set. If this\n// mark is not in the set, the set itself is returned.\nMark.prototype.removeFromSet = function removeFromSet (set) {\n  for (var i = 0; i < set.length; i++)\n    { if (this.eq(set[i]))\n      { return set.slice(0, i).concat(set.slice(i + 1)) } }\n  return set\n};\n\n// :: ([Mark]) → bool\n// Test whether this mark is in the given set of marks.\nMark.prototype.isInSet = function isInSet (set) {\n  for (var i = 0; i < set.length; i++)\n    { if (this.eq(set[i])) { return true } }\n  return false\n};\n\n// :: (Mark) → bool\n// Test whether this mark has the same type and attributes as\n// another mark.\nMark.prototype.eq = function eq (other) {\n  return this == other ||\n    (this.type == other.type && compareDeep(this.attrs, other.attrs))\n};\n\n// :: () → Object\n// Convert this mark to a JSON-serializeable representation.\nMark.prototype.toJSON = function toJSON () {\n  var obj = {type: this.type.name};\n  for (var _ in this.attrs) {\n    obj.attrs = this.attrs;\n    break\n  }\n  return obj\n};\n\n// :: (Schema, Object) → Mark\nMark.fromJSON = function fromJSON (schema, json) {\n  if (!json) { throw new RangeError(\"Invalid input for Mark.fromJSON\") }\n  var type = schema.marks[json.type];\n  if (!type) { throw new RangeError((\"There is no mark type \" + (json.type) + \" in this schema\")) }\n  return type.create(json.attrs)\n};\n\n// :: ([Mark], [Mark]) → bool\n// Test whether two sets of marks are identical.\nMark.sameSet = function sameSet (a, b) {\n  if (a == b) { return true }\n  if (a.length != b.length) { return false }\n  for (var i = 0; i < a.length; i++)\n    { if (!a[i].eq(b[i])) { return false } }\n  return true\n};\n\n// :: (?union<Mark, [Mark]>) → [Mark]\n// Create a properly sorted mark set from null, a single mark, or an\n// unsorted array of marks.\nMark.setFrom = function setFrom (marks) {\n  if (!marks || marks.length == 0) { return Mark.none }\n  if (marks instanceof Mark) { return [marks] }\n  var copy = marks.slice();\n  copy.sort(function (a, b) { return a.type.rank - b.type.rank; });\n  return copy\n};\n\n// :: [Mark] The empty set of marks.\nMark.none = [];\n\n// ReplaceError:: class extends Error\n// Error type raised by [`Node.replace`](#model.Node.replace) when\n// given an invalid replacement.\n\nfunction ReplaceError(message) {\n  var err = Error.call(this, message);\n  err.__proto__ = ReplaceError.prototype;\n  return err\n}\n\nReplaceError.prototype = Object.create(Error.prototype);\nReplaceError.prototype.constructor = ReplaceError;\nReplaceError.prototype.name = \"ReplaceError\";\n\n// ::- A slice represents a piece cut out of a larger document. It\n// stores not only a fragment, but also the depth up to which nodes on\n// both side are ‘open’ (cut through).\nvar Slice = function Slice(content, openStart, openEnd) {\n  // :: Fragment The slice's content.\n  this.content = content;\n  // :: number The open depth at the start.\n  this.openStart = openStart;\n  // :: number The open depth at the end.\n  this.openEnd = openEnd;\n};\n\nvar prototypeAccessors$1 = { size: { configurable: true } };\n\n// :: number\n// The size this slice would add when inserted into a document.\nprototypeAccessors$1.size.get = function () {\n  return this.content.size - this.openStart - this.openEnd\n};\n\nSlice.prototype.insertAt = function insertAt (pos, fragment) {\n  var content = insertInto(this.content, pos + this.openStart, fragment, null);\n  return content && new Slice(content, this.openStart, this.openEnd)\n};\n\nSlice.prototype.removeBetween = function removeBetween (from, to) {\n  return new Slice(removeRange(this.content, from + this.openStart, to + this.openStart), this.openStart, this.openEnd)\n};\n\n// :: (Slice) → bool\n// Tests whether this slice is equal to another slice.\nSlice.prototype.eq = function eq (other) {\n  return this.content.eq(other.content) && this.openStart == other.openStart && this.openEnd == other.openEnd\n};\n\nSlice.prototype.toString = function toString () {\n  return this.content + \"(\" + this.openStart + \",\" + this.openEnd + \")\"\n};\n\n// :: () → ?Object\n// Convert a slice to a JSON-serializable representation.\nSlice.prototype.toJSON = function toJSON () {\n  if (!this.content.size) { return null }\n  var json = {content: this.content.toJSON()};\n  if (this.openStart > 0) { json.openStart = this.openStart; }\n  if (this.openEnd > 0) { json.openEnd = this.openEnd; }\n  return json\n};\n\n// :: (Schema, ?Object) → Slice\n// Deserialize a slice from its JSON representation.\nSlice.fromJSON = function fromJSON (schema, json) {\n  if (!json) { return Slice.empty }\n  var openStart = json.openStart || 0, openEnd = json.openEnd || 0;\n  if (typeof openStart != \"number\" || typeof openEnd != \"number\")\n    { throw new RangeError(\"Invalid input for Slice.fromJSON\") }\n  return new Slice(Fragment.fromJSON(schema, json.content), openStart, openEnd)\n};\n\n// :: (Fragment, ?bool) → Slice\n// Create a slice from a fragment by taking the maximum possible\n// open value on both side of the fragment.\nSlice.maxOpen = function maxOpen (fragment, openIsolating) {\n    if ( openIsolating === void 0 ) openIsolating=true;\n\n  var openStart = 0, openEnd = 0;\n  for (var n = fragment.firstChild; n && !n.isLeaf && (openIsolating || !n.type.spec.isolating); n = n.firstChild) { openStart++; }\n  for (var n$1 = fragment.lastChild; n$1 && !n$1.isLeaf && (openIsolating || !n$1.type.spec.isolating); n$1 = n$1.lastChild) { openEnd++; }\n  return new Slice(fragment, openStart, openEnd)\n};\n\nObject.defineProperties( Slice.prototype, prototypeAccessors$1 );\n\nfunction removeRange(content, from, to) {\n  var ref = content.findIndex(from);\n  var index = ref.index;\n  var offset = ref.offset;\n  var child = content.maybeChild(index);\n  var ref$1 = content.findIndex(to);\n  var indexTo = ref$1.index;\n  var offsetTo = ref$1.offset;\n  if (offset == from || child.isText) {\n    if (offsetTo != to && !content.child(indexTo).isText) { throw new RangeError(\"Removing non-flat range\") }\n    return content.cut(0, from).append(content.cut(to))\n  }\n  if (index != indexTo) { throw new RangeError(\"Removing non-flat range\") }\n  return content.replaceChild(index, child.copy(removeRange(child.content, from - offset - 1, to - offset - 1)))\n}\n\nfunction insertInto(content, dist, insert, parent) {\n  var ref = content.findIndex(dist);\n  var index = ref.index;\n  var offset = ref.offset;\n  var child = content.maybeChild(index);\n  if (offset == dist || child.isText) {\n    if (parent && !parent.canReplace(index, index, insert)) { return null }\n    return content.cut(0, dist).append(insert).append(content.cut(dist))\n  }\n  var inner = insertInto(child.content, dist - offset - 1, insert);\n  return inner && content.replaceChild(index, child.copy(inner))\n}\n\n// :: Slice\n// The empty slice.\nSlice.empty = new Slice(Fragment.empty, 0, 0);\n\nfunction replace($from, $to, slice) {\n  if (slice.openStart > $from.depth)\n    { throw new ReplaceError(\"Inserted content deeper than insertion position\") }\n  if ($from.depth - slice.openStart != $to.depth - slice.openEnd)\n    { throw new ReplaceError(\"Inconsistent open depths\") }\n  return replaceOuter($from, $to, slice, 0)\n}\n\nfunction replaceOuter($from, $to, slice, depth) {\n  var index = $from.index(depth), node = $from.node(depth);\n  if (index == $to.index(depth) && depth < $from.depth - slice.openStart) {\n    var inner = replaceOuter($from, $to, slice, depth + 1);\n    return node.copy(node.content.replaceChild(index, inner))\n  } else if (!slice.content.size) {\n    return close(node, replaceTwoWay($from, $to, depth))\n  } else if (!slice.openStart && !slice.openEnd && $from.depth == depth && $to.depth == depth) { // Simple, flat case\n    var parent = $from.parent, content = parent.content;\n    return close(parent, content.cut(0, $from.parentOffset).append(slice.content).append(content.cut($to.parentOffset)))\n  } else {\n    var ref = prepareSliceForReplace(slice, $from);\n    var start = ref.start;\n    var end = ref.end;\n    return close(node, replaceThreeWay($from, start, end, $to, depth))\n  }\n}\n\nfunction checkJoin(main, sub) {\n  if (!sub.type.compatibleContent(main.type))\n    { throw new ReplaceError(\"Cannot join \" + sub.type.name + \" onto \" + main.type.name) }\n}\n\nfunction joinable($before, $after, depth) {\n  var node = $before.node(depth);\n  checkJoin(node, $after.node(depth));\n  return node\n}\n\nfunction addNode(child, target) {\n  var last = target.length - 1;\n  if (last >= 0 && child.isText && child.sameMarkup(target[last]))\n    { target[last] = child.withText(target[last].text + child.text); }\n  else\n    { target.push(child); }\n}\n\nfunction addRange($start, $end, depth, target) {\n  var node = ($end || $start).node(depth);\n  var startIndex = 0, endIndex = $end ? $end.index(depth) : node.childCount;\n  if ($start) {\n    startIndex = $start.index(depth);\n    if ($start.depth > depth) {\n      startIndex++;\n    } else if ($start.textOffset) {\n      addNode($start.nodeAfter, target);\n      startIndex++;\n    }\n  }\n  for (var i = startIndex; i < endIndex; i++) { addNode(node.child(i), target); }\n  if ($end && $end.depth == depth && $end.textOffset)\n    { addNode($end.nodeBefore, target); }\n}\n\nfunction close(node, content) {\n  if (!node.type.validContent(content))\n    { throw new ReplaceError(\"Invalid content for node \" + node.type.name) }\n  return node.copy(content)\n}\n\nfunction replaceThreeWay($from, $start, $end, $to, depth) {\n  var openStart = $from.depth > depth && joinable($from, $start, depth + 1);\n  var openEnd = $to.depth > depth && joinable($end, $to, depth + 1);\n\n  var content = [];\n  addRange(null, $from, depth, content);\n  if (openStart && openEnd && $start.index(depth) == $end.index(depth)) {\n    checkJoin(openStart, openEnd);\n    addNode(close(openStart, replaceThreeWay($from, $start, $end, $to, depth + 1)), content);\n  } else {\n    if (openStart)\n      { addNode(close(openStart, replaceTwoWay($from, $start, depth + 1)), content); }\n    addRange($start, $end, depth, content);\n    if (openEnd)\n      { addNode(close(openEnd, replaceTwoWay($end, $to, depth + 1)), content); }\n  }\n  addRange($to, null, depth, content);\n  return new Fragment(content)\n}\n\nfunction replaceTwoWay($from, $to, depth) {\n  var content = [];\n  addRange(null, $from, depth, content);\n  if ($from.depth > depth) {\n    var type = joinable($from, $to, depth + 1);\n    addNode(close(type, replaceTwoWay($from, $to, depth + 1)), content);\n  }\n  addRange($to, null, depth, content);\n  return new Fragment(content)\n}\n\nfunction prepareSliceForReplace(slice, $along) {\n  var extra = $along.depth - slice.openStart, parent = $along.node(extra);\n  var node = parent.copy(slice.content);\n  for (var i = extra - 1; i >= 0; i--)\n    { node = $along.node(i).copy(Fragment.from(node)); }\n  return {start: node.resolveNoCache(slice.openStart + extra),\n          end: node.resolveNoCache(node.content.size - slice.openEnd - extra)}\n}\n\n// ::- You can [_resolve_](#model.Node.resolve) a position to get more\n// information about it. Objects of this class represent such a\n// resolved position, providing various pieces of context information,\n// and some helper methods.\n//\n// Throughout this interface, methods that take an optional `depth`\n// parameter will interpret undefined as `this.depth` and negative\n// numbers as `this.depth + value`.\nvar ResolvedPos = function ResolvedPos(pos, path, parentOffset) {\n  // :: number The position that was resolved.\n  this.pos = pos;\n  this.path = path;\n  // :: number\n  // The number of levels the parent node is from the root. If this\n  // position points directly into the root node, it is 0. If it\n  // points into a top-level paragraph, 1, and so on.\n  this.depth = path.length / 3 - 1;\n  // :: number The offset this position has into its parent node.\n  this.parentOffset = parentOffset;\n};\n\nvar prototypeAccessors$2 = { parent: { configurable: true },doc: { configurable: true },textOffset: { configurable: true },nodeAfter: { configurable: true },nodeBefore: { configurable: true } };\n\nResolvedPos.prototype.resolveDepth = function resolveDepth (val) {\n  if (val == null) { return this.depth }\n  if (val < 0) { return this.depth + val }\n  return val\n};\n\n// :: Node\n// The parent node that the position points into. Note that even if\n// a position points into a text node, that node is not considered\n// the parent—text nodes are ‘flat’ in this model, and have no content.\nprototypeAccessors$2.parent.get = function () { return this.node(this.depth) };\n\n// :: Node\n// The root node in which the position was resolved.\nprototypeAccessors$2.doc.get = function () { return this.node(0) };\n\n// :: (?number) → Node\n// The ancestor node at the given level. `p.node(p.depth)` is the\n// same as `p.parent`.\nResolvedPos.prototype.node = function node (depth) { return this.path[this.resolveDepth(depth) * 3] };\n\n// :: (?number) → number\n// The index into the ancestor at the given level. If this points at\n// the 3rd node in the 2nd paragraph on the top level, for example,\n// `p.index(0)` is 1 and `p.index(1)` is 2.\nResolvedPos.prototype.index = function index (depth) { return this.path[this.resolveDepth(depth) * 3 + 1] };\n\n// :: (?number) → number\n// The index pointing after this position into the ancestor at the\n// given level.\nResolvedPos.prototype.indexAfter = function indexAfter (depth) {\n  depth = this.resolveDepth(depth);\n  return this.index(depth) + (depth == this.depth && !this.textOffset ? 0 : 1)\n};\n\n// :: (?number) → number\n// The (absolute) position at the start of the node at the given\n// level.\nResolvedPos.prototype.start = function start (depth) {\n  depth = this.resolveDepth(depth);\n  return depth == 0 ? 0 : this.path[depth * 3 - 1] + 1\n};\n\n// :: (?number) → number\n// The (absolute) position at the end of the node at the given\n// level.\nResolvedPos.prototype.end = function end (depth) {\n  depth = this.resolveDepth(depth);\n  return this.start(depth) + this.node(depth).content.size\n};\n\n// :: (?number) → number\n// The (absolute) position directly before the wrapping node at the\n// given level, or, when `depth` is `this.depth + 1`, the original\n// position.\nResolvedPos.prototype.before = function before (depth) {\n  depth = this.resolveDepth(depth);\n  if (!depth) { throw new RangeError(\"There is no position before the top-level node\") }\n  return depth == this.depth + 1 ? this.pos : this.path[depth * 3 - 1]\n};\n\n// :: (?number) → number\n// The (absolute) position directly after the wrapping node at the\n// given level, or the original position when `depth` is `this.depth + 1`.\nResolvedPos.prototype.after = function after (depth) {\n  depth = this.resolveDepth(depth);\n  if (!depth) { throw new RangeError(\"There is no position after the top-level node\") }\n  return depth == this.depth + 1 ? this.pos : this.path[depth * 3 - 1] + this.path[depth * 3].nodeSize\n};\n\n// :: number\n// When this position points into a text node, this returns the\n// distance between the position and the start of the text node.\n// Will be zero for positions that point between nodes.\nprototypeAccessors$2.textOffset.get = function () { return this.pos - this.path[this.path.length - 1] };\n\n// :: ?Node\n// Get the node directly after the position, if any. If the position\n// points into a text node, only the part of that node after the\n// position is returned.\nprototypeAccessors$2.nodeAfter.get = function () {\n  var parent = this.parent, index = this.index(this.depth);\n  if (index == parent.childCount) { return null }\n  var dOff = this.pos - this.path[this.path.length - 1], child = parent.child(index);\n  return dOff ? parent.child(index).cut(dOff) : child\n};\n\n// :: ?Node\n// Get the node directly before the position, if any. If the\n// position points into a text node, only the part of that node\n// before the position is returned.\nprototypeAccessors$2.nodeBefore.get = function () {\n  var index = this.index(this.depth);\n  var dOff = this.pos - this.path[this.path.length - 1];\n  if (dOff) { return this.parent.child(index).cut(0, dOff) }\n  return index == 0 ? null : this.parent.child(index - 1)\n};\n\n// :: (number, ?number) → number\n// Get the position at the given index in the parent node at the\n// given depth (which defaults to `this.depth`).\nResolvedPos.prototype.posAtIndex = function posAtIndex (index, depth) {\n  depth = this.resolveDepth(depth);\n  var node = this.path[depth * 3], pos = depth == 0 ? 0 : this.path[depth * 3 - 1] + 1;\n  for (var i = 0; i < index; i++) { pos += node.child(i).nodeSize; }\n  return pos\n};\n\n// :: () → [Mark]\n// Get the marks at this position, factoring in the surrounding\n// marks' [`inclusive`](#model.MarkSpec.inclusive) property. If the\n// position is at the start of a non-empty node, the marks of the\n// node after it (if any) are returned.\nResolvedPos.prototype.marks = function marks () {\n  var parent = this.parent, index = this.index();\n\n  // In an empty parent, return the empty array\n  if (parent.content.size == 0) { return Mark.none }\n\n  // When inside a text node, just return the text node's marks\n  if (this.textOffset) { return parent.child(index).marks }\n\n  var main = parent.maybeChild(index - 1), other = parent.maybeChild(index);\n  // If the `after` flag is true of there is no node before, make\n  // the node after this position the main reference.\n  if (!main) { var tmp = main; main = other; other = tmp; }\n\n  // Use all marks in the main node, except those that have\n  // `inclusive` set to false and are not present in the other node.\n  var marks = main.marks;\n  for (var i = 0; i < marks.length; i++)\n    { if (marks[i].type.spec.inclusive === false && (!other || !marks[i].isInSet(other.marks)))\n      { marks = marks[i--].removeFromSet(marks); } }\n\n  return marks\n};\n\n// :: (ResolvedPos) → ?[Mark]\n// Get the marks after the current position, if any, except those\n// that are non-inclusive and not present at position `$end`. This\n// is mostly useful for getting the set of marks to preserve after a\n// deletion. Will return `null` if this position is at the end of\n// its parent node or its parent node isn't a textblock (in which\n// case no marks should be preserved).\nResolvedPos.prototype.marksAcross = function marksAcross ($end) {\n  var after = this.parent.maybeChild(this.index());\n  if (!after || !after.isInline) { return null }\n\n  var marks = after.marks, next = $end.parent.maybeChild($end.index());\n  for (var i = 0; i < marks.length; i++)\n    { if (marks[i].type.spec.inclusive === false && (!next || !marks[i].isInSet(next.marks)))\n      { marks = marks[i--].removeFromSet(marks); } }\n  return marks\n};\n\n// :: (number) → number\n// The depth up to which this position and the given (non-resolved)\n// position share the same parent nodes.\nResolvedPos.prototype.sharedDepth = function sharedDepth (pos) {\n  for (var depth = this.depth; depth > 0; depth--)\n    { if (this.start(depth) <= pos && this.end(depth) >= pos) { return depth } }\n  return 0\n};\n\n// :: (?ResolvedPos, ?(Node) → bool) → ?NodeRange\n// Returns a range based on the place where this position and the\n// given position diverge around block content. If both point into\n// the same textblock, for example, a range around that textblock\n// will be returned. If they point into different blocks, the range\n// around those blocks in their shared ancestor is returned. You can\n// pass in an optional predicate that will be called with a parent\n// node to see if a range into that parent is acceptable.\nResolvedPos.prototype.blockRange = function blockRange (other, pred) {\n    if ( other === void 0 ) other = this;\n\n  if (other.pos < this.pos) { return other.blockRange(this) }\n  for (var d = this.depth - (this.parent.inlineContent || this.pos == other.pos ? 1 : 0); d >= 0; d--)\n    { if (other.pos <= this.end(d) && (!pred || pred(this.node(d))))\n      { return new NodeRange(this, other, d) } }\n};\n\n// :: (ResolvedPos) → bool\n// Query whether the given position shares the same parent node.\nResolvedPos.prototype.sameParent = function sameParent (other) {\n  return this.pos - this.parentOffset == other.pos - other.parentOffset\n};\n\n// :: (ResolvedPos) → ResolvedPos\n// Return the greater of this and the given position.\nResolvedPos.prototype.max = function max (other) {\n  return other.pos > this.pos ? other : this\n};\n\n// :: (ResolvedPos) → ResolvedPos\n// Return the smaller of this and the given position.\nResolvedPos.prototype.min = function min (other) {\n  return other.pos < this.pos ? other : this\n};\n\nResolvedPos.prototype.toString = function toString () {\n  var str = \"\";\n  for (var i = 1; i <= this.depth; i++)\n    { str += (str ? \"/\" : \"\") + this.node(i).type.name + \"_\" + this.index(i - 1); }\n  return str + \":\" + this.parentOffset\n};\n\nResolvedPos.resolve = function resolve (doc, pos) {\n  if (!(pos >= 0 && pos <= doc.content.size)) { throw new RangeError(\"Position \" + pos + \" out of range\") }\n  var path = [];\n  var start = 0, parentOffset = pos;\n  for (var node = doc;;) {\n    var ref = node.content.findIndex(parentOffset);\n      var index = ref.index;\n      var offset = ref.offset;\n    var rem = parentOffset - offset;\n    path.push(node, index, start + offset);\n    if (!rem) { break }\n    node = node.child(index);\n    if (node.isText) { break }\n    parentOffset = rem - 1;\n    start += offset + 1;\n  }\n  return new ResolvedPos(pos, path, parentOffset)\n};\n\nResolvedPos.resolveCached = function resolveCached (doc, pos) {\n  for (var i = 0; i < resolveCache.length; i++) {\n    var cached = resolveCache[i];\n    if (cached.pos == pos && cached.doc == doc) { return cached }\n  }\n  var result = resolveCache[resolveCachePos] = ResolvedPos.resolve(doc, pos);\n  resolveCachePos = (resolveCachePos + 1) % resolveCacheSize;\n  return result\n};\n\nObject.defineProperties( ResolvedPos.prototype, prototypeAccessors$2 );\n\nvar resolveCache = [], resolveCachePos = 0, resolveCacheSize = 12;\n\n// ::- Represents a flat range of content, i.e. one that starts and\n// ends in the same node.\nvar NodeRange = function NodeRange($from, $to, depth) {\n  // :: ResolvedPos A resolved position along the start of the\n  // content. May have a `depth` greater than this object's `depth`\n  // property, since these are the positions that were used to\n  // compute the range, not re-resolved positions directly at its\n  // boundaries.\n  this.$from = $from;\n  // :: ResolvedPos A position along the end of the content. See\n  // caveat for [`$from`](#model.NodeRange.$from).\n  this.$to = $to;\n  // :: number The depth of the node that this range points into.\n  this.depth = depth;\n};\n\nvar prototypeAccessors$1$1 = { start: { configurable: true },end: { configurable: true },parent: { configurable: true },startIndex: { configurable: true },endIndex: { configurable: true } };\n\n// :: number The position at the start of the range.\nprototypeAccessors$1$1.start.get = function () { return this.$from.before(this.depth + 1) };\n// :: number The position at the end of the range.\nprototypeAccessors$1$1.end.get = function () { return this.$to.after(this.depth + 1) };\n\n// :: Node The parent node that the range points into.\nprototypeAccessors$1$1.parent.get = function () { return this.$from.node(this.depth) };\n// :: number The start index of the range in the parent node.\nprototypeAccessors$1$1.startIndex.get = function () { return this.$from.index(this.depth) };\n// :: number The end index of the range in the parent node.\nprototypeAccessors$1$1.endIndex.get = function () { return this.$to.indexAfter(this.depth) };\n\nObject.defineProperties( NodeRange.prototype, prototypeAccessors$1$1 );\n\nvar emptyAttrs = Object.create(null);\n\n// ::- This class represents a node in the tree that makes up a\n// ProseMirror document. So a document is an instance of `Node`, with\n// children that are also instances of `Node`.\n//\n// Nodes are persistent data structures. Instead of changing them, you\n// create new ones with the content you want. Old ones keep pointing\n// at the old document shape. This is made cheaper by sharing\n// structure between the old and new data as much as possible, which a\n// tree shape like this (without back pointers) makes easy.\n//\n// **Do not** directly mutate the properties of a `Node` object. See\n// [the guide](/docs/guide/#doc) for more information.\nvar Node = function Node(type, attrs, content, marks) {\n  // :: NodeType\n  // The type of node that this is.\n  this.type = type;\n\n  // :: Object\n  // An object mapping attribute names to values. The kind of\n  // attributes allowed and required are\n  // [determined](#model.NodeSpec.attrs) by the node type.\n  this.attrs = attrs;\n\n  // :: Fragment\n  // A container holding the node's children.\n  this.content = content || Fragment.empty;\n\n  // :: [Mark]\n  // The marks (things like whether it is emphasized or part of a\n  // link) applied to this node.\n  this.marks = marks || Mark.none;\n};\n\nvar prototypeAccessors$3 = { nodeSize: { configurable: true },childCount: { configurable: true },textContent: { configurable: true },firstChild: { configurable: true },lastChild: { configurable: true },isBlock: { configurable: true },isTextblock: { configurable: true },inlineContent: { configurable: true },isInline: { configurable: true },isText: { configurable: true },isLeaf: { configurable: true },isAtom: { configurable: true } };\n\n// text:: ?string\n// For text nodes, this contains the node's text content.\n\n// :: number\n// The size of this node, as defined by the integer-based [indexing\n// scheme](/docs/guide/#doc.indexing). For text nodes, this is the\n// amount of characters. For other leaf nodes, it is one. For\n// non-leaf nodes, it is the size of the content plus two (the start\n// and end token).\nprototypeAccessors$3.nodeSize.get = function () { return this.isLeaf ? 1 : 2 + this.content.size };\n\n// :: number\n// The number of children that the node has.\nprototypeAccessors$3.childCount.get = function () { return this.content.childCount };\n\n// :: (number) → Node\n// Get the child node at the given index. Raises an error when the\n// index is out of range.\nNode.prototype.child = function child (index) { return this.content.child(index) };\n\n// :: (number) → ?Node\n// Get the child node at the given index, if it exists.\nNode.prototype.maybeChild = function maybeChild (index) { return this.content.maybeChild(index) };\n\n// :: ((node: Node, offset: number, index: number))\n// Call `f` for every child node, passing the node, its offset\n// into this parent node, and its index.\nNode.prototype.forEach = function forEach (f) { this.content.forEach(f); };\n\n// :: (number, number, (node: Node, pos: number, parent: Node, index: number) → ?bool, ?number)\n// Invoke a callback for all descendant nodes recursively between\n// the given two positions that are relative to start of this node's\n// content. The callback is invoked with the node, its\n// parent-relative position, its parent node, and its child index.\n// When the callback returns false for a given node, that node's\n// children will not be recursed over. The last parameter can be\n// used to specify a starting position to count from.\nNode.prototype.nodesBetween = function nodesBetween (from, to, f, startPos) {\n    if ( startPos === void 0 ) startPos = 0;\n\n  this.content.nodesBetween(from, to, f, startPos, this);\n};\n\n// :: ((node: Node, pos: number, parent: Node) → ?bool)\n// Call the given callback for every descendant node. Doesn't\n// descend into a node when the callback returns `false`.\nNode.prototype.descendants = function descendants (f) {\n  this.nodesBetween(0, this.content.size, f);\n};\n\n// :: string\n// Concatenates all the text nodes found in this fragment and its\n// children.\nprototypeAccessors$3.textContent.get = function () { return this.textBetween(0, this.content.size, \"\") };\n\n// :: (number, number, ?string, ?string) → string\n// Get all text between positions `from` and `to`. When\n// `blockSeparator` is given, it will be inserted whenever a new\n// block node is started. When `leafText` is given, it'll be\n// inserted for every non-text leaf node encountered.\nNode.prototype.textBetween = function textBetween (from, to, blockSeparator, leafText) {\n  return this.content.textBetween(from, to, blockSeparator, leafText)\n};\n\n// :: ?Node\n// Returns this node's first child, or `null` if there are no\n// children.\nprototypeAccessors$3.firstChild.get = function () { return this.content.firstChild };\n\n// :: ?Node\n// Returns this node's last child, or `null` if there are no\n// children.\nprototypeAccessors$3.lastChild.get = function () { return this.content.lastChild };\n\n// :: (Node) → bool\n// Test whether two nodes represent the same piece of document.\nNode.prototype.eq = function eq (other) {\n  return this == other || (this.sameMarkup(other) && this.content.eq(other.content))\n};\n\n// :: (Node) → bool\n// Compare the markup (type, attributes, and marks) of this node to\n// those of another. Returns `true` if both have the same markup.\nNode.prototype.sameMarkup = function sameMarkup (other) {\n  return this.hasMarkup(other.type, other.attrs, other.marks)\n};\n\n// :: (NodeType, ?Object, ?[Mark]) → bool\n// Check whether this node's markup correspond to the given type,\n// attributes, and marks.\nNode.prototype.hasMarkup = function hasMarkup (type, attrs, marks) {\n  return this.type == type &&\n    compareDeep(this.attrs, attrs || type.defaultAttrs || emptyAttrs) &&\n    Mark.sameSet(this.marks, marks || Mark.none)\n};\n\n// :: (?Fragment) → Node\n// Create a new node with the same markup as this node, containing\n// the given content (or empty, if no content is given).\nNode.prototype.copy = function copy (content) {\n    if ( content === void 0 ) content = null;\n\n  if (content == this.content) { return this }\n  return new this.constructor(this.type, this.attrs, content, this.marks)\n};\n\n// :: ([Mark]) → Node\n// Create a copy of this node, with the given set of marks instead\n// of the node's own marks.\nNode.prototype.mark = function mark (marks) {\n  return marks == this.marks ? this : new this.constructor(this.type, this.attrs, this.content, marks)\n};\n\n// :: (number, ?number) → Node\n// Create a copy of this node with only the content between the\n// given positions. If `to` is not given, it defaults to the end of\n// the node.\nNode.prototype.cut = function cut (from, to) {\n  if (from == 0 && to == this.content.size) { return this }\n  return this.copy(this.content.cut(from, to))\n};\n\n// :: (number, ?number) → Slice\n// Cut out the part of the document between the given positions, and\n// return it as a `Slice` object.\nNode.prototype.slice = function slice (from, to, includeParents) {\n    if ( to === void 0 ) to = this.content.size;\n    if ( includeParents === void 0 ) includeParents = false;\n\n  if (from == to) { return Slice.empty }\n\n  var $from = this.resolve(from), $to = this.resolve(to);\n  var depth = includeParents ? 0 : $from.sharedDepth(to);\n  var start = $from.start(depth), node = $from.node(depth);\n  var content = node.content.cut($from.pos - start, $to.pos - start);\n  return new Slice(content, $from.depth - depth, $to.depth - depth)\n};\n\n// :: (number, number, Slice) → Node\n// Replace the part of the document between the given positions with\n// the given slice. The slice must 'fit', meaning its open sides\n// must be able to connect to the surrounding content, and its\n// content nodes must be valid children for the node they are placed\n// into. If any of this is violated, an error of type\n// [`ReplaceError`](#model.ReplaceError) is thrown.\nNode.prototype.replace = function replace$1 (from, to, slice) {\n  return replace(this.resolve(from), this.resolve(to), slice)\n};\n\n// :: (number) → ?Node\n// Find the node directly after the given position.\nNode.prototype.nodeAt = function nodeAt (pos) {\n  for (var node = this;;) {\n    var ref = node.content.findIndex(pos);\n      var index = ref.index;\n      var offset = ref.offset;\n    node = node.maybeChild(index);\n    if (!node) { return null }\n    if (offset == pos || node.isText) { return node }\n    pos -= offset + 1;\n  }\n};\n\n// :: (number) → {node: ?Node, index: number, offset: number}\n// Find the (direct) child node after the given offset, if any,\n// and return it along with its index and offset relative to this\n// node.\nNode.prototype.childAfter = function childAfter (pos) {\n  var ref = this.content.findIndex(pos);\n    var index = ref.index;\n    var offset = ref.offset;\n  return {node: this.content.maybeChild(index), index: index, offset: offset}\n};\n\n// :: (number) → {node: ?Node, index: number, offset: number}\n// Find the (direct) child node before the given offset, if any,\n// and return it along with its index and offset relative to this\n// node.\nNode.prototype.childBefore = function childBefore (pos) {\n  if (pos == 0) { return {node: null, index: 0, offset: 0} }\n  var ref = this.content.findIndex(pos);\n    var index = ref.index;\n    var offset = ref.offset;\n  if (offset < pos) { return {node: this.content.child(index), index: index, offset: offset} }\n  var node = this.content.child(index - 1);\n  return {node: node, index: index - 1, offset: offset - node.nodeSize}\n};\n\n// :: (number) → ResolvedPos\n// Resolve the given position in the document, returning an\n// [object](#model.ResolvedPos) with information about its context.\nNode.prototype.resolve = function resolve (pos) { return ResolvedPos.resolveCached(this, pos) };\n\nNode.prototype.resolveNoCache = function resolveNoCache (pos) { return ResolvedPos.resolve(this, pos) };\n\n// :: (number, number, union<Mark, MarkType>) → bool\n// Test whether a given mark or mark type occurs in this document\n// between the two given positions.\nNode.prototype.rangeHasMark = function rangeHasMark (from, to, type) {\n  var found = false;\n  if (to > from) { this.nodesBetween(from, to, function (node) {\n    if (type.isInSet(node.marks)) { found = true; }\n    return !found\n  }); }\n  return found\n};\n\n// :: bool\n// True when this is a block (non-inline node)\nprototypeAccessors$3.isBlock.get = function () { return this.type.isBlock };\n\n// :: bool\n// True when this is a textblock node, a block node with inline\n// content.\nprototypeAccessors$3.isTextblock.get = function () { return this.type.isTextblock };\n\n// :: bool\n// True when this node allows inline content.\nprototypeAccessors$3.inlineContent.get = function () { return this.type.inlineContent };\n\n// :: bool\n// True when this is an inline node (a text node or a node that can\n// appear among text).\nprototypeAccessors$3.isInline.get = function () { return this.type.isInline };\n\n// :: bool\n// True when this is a text node.\nprototypeAccessors$3.isText.get = function () { return this.type.isText };\n\n// :: bool\n// True when this is a leaf node.\nprototypeAccessors$3.isLeaf.get = function () { return this.type.isLeaf };\n\n// :: bool\n// True when this is an atom, i.e. when it does not have directly\n// editable content. This is usually the same as `isLeaf`, but can\n// be configured with the [`atom` property](#model.NodeSpec.atom) on\n// a node's spec (typically used when the node is displayed as an\n// uneditable [node view](#view.NodeView)).\nprototypeAccessors$3.isAtom.get = function () { return this.type.isAtom };\n\n// :: () → string\n// Return a string representation of this node for debugging\n// purposes.\nNode.prototype.toString = function toString () {\n  if (this.type.spec.toDebugString) { return this.type.spec.toDebugString(this) }\n  var name = this.type.name;\n  if (this.content.size)\n    { name += \"(\" + this.content.toStringInner() + \")\"; }\n  return wrapMarks(this.marks, name)\n};\n\n// :: (number) → ContentMatch\n// Get the content match in this node at the given index.\nNode.prototype.contentMatchAt = function contentMatchAt (index) {\n  var match = this.type.contentMatch.matchFragment(this.content, 0, index);\n  if (!match) { throw new Error(\"Called contentMatchAt on a node with invalid content\") }\n  return match\n};\n\n// :: (number, number, ?Fragment, ?number, ?number) → bool\n// Test whether replacing the range between `from` and `to` (by\n// child index) with the given replacement fragment (which defaults\n// to the empty fragment) would leave the node's content valid. You\n// can optionally pass `start` and `end` indices into the\n// replacement fragment.\nNode.prototype.canReplace = function canReplace (from, to, replacement, start, end) {\n    if ( replacement === void 0 ) replacement = Fragment.empty;\n    if ( start === void 0 ) start = 0;\n    if ( end === void 0 ) end = replacement.childCount;\n\n  var one = this.contentMatchAt(from).matchFragment(replacement, start, end);\n  var two = one && one.matchFragment(this.content, to);\n  if (!two || !two.validEnd) { return false }\n  for (var i = start; i < end; i++) { if (!this.type.allowsMarks(replacement.child(i).marks)) { return false } }\n  return true\n};\n\n// :: (number, number, NodeType, ?[Mark]) → bool\n// Test whether replacing the range `from` to `to` (by index) with a\n// node of the given type would leave the node's content valid.\nNode.prototype.canReplaceWith = function canReplaceWith (from, to, type, marks) {\n  if (marks && !this.type.allowsMarks(marks)) { return false }\n  var start = this.contentMatchAt(from).matchType(type);\n  var end = start && start.matchFragment(this.content, to);\n  return end ? end.validEnd : false\n};\n\n// :: (Node) → bool\n// Test whether the given node's content could be appended to this\n// node. If that node is empty, this will only return true if there\n// is at least one node type that can appear in both nodes (to avoid\n// merging completely incompatible nodes).\nNode.prototype.canAppend = function canAppend (other) {\n  if (other.content.size) { return this.canReplace(this.childCount, this.childCount, other.content) }\n  else { return this.type.compatibleContent(other.type) }\n};\n\n// :: ()\n// Check whether this node and its descendants conform to the\n// schema, and raise error when they do not.\nNode.prototype.check = function check () {\n  if (!this.type.validContent(this.content))\n    { throw new RangeError((\"Invalid content for node \" + (this.type.name) + \": \" + (this.content.toString().slice(0, 50)))) }\n  var copy = Mark.none;\n  for (var i = 0; i < this.marks.length; i++) { copy = this.marks[i].addToSet(copy); }\n  if (!Mark.sameSet(copy, this.marks))\n    { throw new RangeError((\"Invalid collection of marks for node \" + (this.type.name) + \": \" + (this.marks.map(function (m) { return m.type.name; })))) }\n  this.content.forEach(function (node) { return node.check(); });\n};\n\n// :: () → Object\n// Return a JSON-serializeable representation of this node.\nNode.prototype.toJSON = function toJSON () {\n  var obj = {type: this.type.name};\n  for (var _ in this.attrs) {\n    obj.attrs = this.attrs;\n    break\n  }\n  if (this.content.size)\n    { obj.content = this.content.toJSON(); }\n  if (this.marks.length)\n    { obj.marks = this.marks.map(function (n) { return n.toJSON(); }); }\n  return obj\n};\n\n// :: (Schema, Object) → Node\n// Deserialize a node from its JSON representation.\nNode.fromJSON = function fromJSON (schema, json) {\n  if (!json) { throw new RangeError(\"Invalid input for Node.fromJSON\") }\n  var marks = null;\n  if (json.marks) {\n    if (!Array.isArray(json.marks)) { throw new RangeError(\"Invalid mark data for Node.fromJSON\") }\n    marks = json.marks.map(schema.markFromJSON);\n  }\n  if (json.type == \"text\") {\n    if (typeof json.text != \"string\") { throw new RangeError(\"Invalid text node in JSON\") }\n    return schema.text(json.text, marks)\n  }\n  var content = Fragment.fromJSON(schema, json.content);\n  return schema.nodeType(json.type).create(json.attrs, content, marks)\n};\n\nObject.defineProperties( Node.prototype, prototypeAccessors$3 );\n\nvar TextNode = /*@__PURE__*/(function (Node) {\n  function TextNode(type, attrs, content, marks) {\n    Node.call(this, type, attrs, null, marks);\n\n    if (!content) { throw new RangeError(\"Empty text nodes are not allowed\") }\n\n    this.text = content;\n  }\n\n  if ( Node ) TextNode.__proto__ = Node;\n  TextNode.prototype = Object.create( Node && Node.prototype );\n  TextNode.prototype.constructor = TextNode;\n\n  var prototypeAccessors$1 = { textContent: { configurable: true },nodeSize: { configurable: true } };\n\n  TextNode.prototype.toString = function toString () {\n    if (this.type.spec.toDebugString) { return this.type.spec.toDebugString(this) }\n    return wrapMarks(this.marks, JSON.stringify(this.text))\n  };\n\n  prototypeAccessors$1.textContent.get = function () { return this.text };\n\n  TextNode.prototype.textBetween = function textBetween (from, to) { return this.text.slice(from, to) };\n\n  prototypeAccessors$1.nodeSize.get = function () { return this.text.length };\n\n  TextNode.prototype.mark = function mark (marks) {\n    return marks == this.marks ? this : new TextNode(this.type, this.attrs, this.text, marks)\n  };\n\n  TextNode.prototype.withText = function withText (text) {\n    if (text == this.text) { return this }\n    return new TextNode(this.type, this.attrs, text, this.marks)\n  };\n\n  TextNode.prototype.cut = function cut (from, to) {\n    if ( from === void 0 ) from = 0;\n    if ( to === void 0 ) to = this.text.length;\n\n    if (from == 0 && to == this.text.length) { return this }\n    return this.withText(this.text.slice(from, to))\n  };\n\n  TextNode.prototype.eq = function eq (other) {\n    return this.sameMarkup(other) && this.text == other.text\n  };\n\n  TextNode.prototype.toJSON = function toJSON () {\n    var base = Node.prototype.toJSON.call(this);\n    base.text = this.text;\n    return base\n  };\n\n  Object.defineProperties( TextNode.prototype, prototypeAccessors$1 );\n\n  return TextNode;\n}(Node));\n\nfunction wrapMarks(marks, str) {\n  for (var i = marks.length - 1; i >= 0; i--)\n    { str = marks[i].type.name + \"(\" + str + \")\"; }\n  return str\n}\n\n// ::- Instances of this class represent a match state of a node\n// type's [content expression](#model.NodeSpec.content), and can be\n// used to find out whether further content matches here, and whether\n// a given position is a valid end of the node.\nvar ContentMatch = function ContentMatch(validEnd) {\n  // :: bool\n  // True when this match state represents a valid end of the node.\n  this.validEnd = validEnd;\n  this.next = [];\n  this.wrapCache = [];\n};\n\nvar prototypeAccessors$4 = { inlineContent: { configurable: true },defaultType: { configurable: true },edgeCount: { configurable: true } };\n\nContentMatch.parse = function parse (string, nodeTypes) {\n  var stream = new TokenStream(string, nodeTypes);\n  if (stream.next == null) { return ContentMatch.empty }\n  var expr = parseExpr(stream);\n  if (stream.next) { stream.err(\"Unexpected trailing text\"); }\n  var match = dfa(nfa(expr));\n  checkForDeadEnds(match, stream);\n  return match\n};\n\n// :: (NodeType) → ?ContentMatch\n// Match a node type, returning a match after that node if\n// successful.\nContentMatch.prototype.matchType = function matchType (type) {\n  for (var i = 0; i < this.next.length; i += 2)\n    { if (this.next[i] == type) { return this.next[i + 1] } }\n  return null\n};\n\n// :: (Fragment, ?number, ?number) → ?ContentMatch\n// Try to match a fragment. Returns the resulting match when\n// successful.\nContentMatch.prototype.matchFragment = function matchFragment (frag, start, end) {\n    if ( start === void 0 ) start = 0;\n    if ( end === void 0 ) end = frag.childCount;\n\n  var cur = this;\n  for (var i = start; cur && i < end; i++)\n    { cur = cur.matchType(frag.child(i).type); }\n  return cur\n};\n\nprototypeAccessors$4.inlineContent.get = function () {\n  var first = this.next[0];\n  return first ? first.isInline : false\n};\n\n// :: ?NodeType\n// Get the first matching node type at this match position that can\n// be generated.\nprototypeAccessors$4.defaultType.get = function () {\n  for (var i = 0; i < this.next.length; i += 2) {\n    var type = this.next[i];\n    if (!(type.isText || type.hasRequiredAttrs())) { return type }\n  }\n};\n\nContentMatch.prototype.compatible = function compatible (other) {\n  for (var i = 0; i < this.next.length; i += 2)\n    { for (var j = 0; j < other.next.length; j += 2)\n      { if (this.next[i] == other.next[j]) { return true } } }\n  return false\n};\n\n// :: (Fragment, bool, ?number) → ?Fragment\n// Try to match the given fragment, and if that fails, see if it can\n// be made to match by inserting nodes in front of it. When\n// successful, return a fragment of inserted nodes (which may be\n// empty if nothing had to be inserted). When `toEnd` is true, only\n// return a fragment if the resulting match goes to the end of the\n// content expression.\nContentMatch.prototype.fillBefore = function fillBefore (after, toEnd, startIndex) {\n    if ( toEnd === void 0 ) toEnd = false;\n    if ( startIndex === void 0 ) startIndex = 0;\n\n  var seen = [this];\n  function search(match, types) {\n    var finished = match.matchFragment(after, startIndex);\n    if (finished && (!toEnd || finished.validEnd))\n      { return Fragment.from(types.map(function (tp) { return tp.createAndFill(); })) }\n\n    for (var i = 0; i < match.next.length; i += 2) {\n      var type = match.next[i], next = match.next[i + 1];\n      if (!(type.isText || type.hasRequiredAttrs()) && seen.indexOf(next) == -1) {\n        seen.push(next);\n        var found = search(next, types.concat(type));\n        if (found) { return found }\n      }\n    }\n  }\n\n  return search(this, [])\n};\n\n// :: (NodeType) → ?[NodeType]\n// Find a set of wrapping node types that would allow a node of the\n// given type to appear at this position. The result may be empty\n// (when it fits directly) and will be null when no such wrapping\n// exists.\nContentMatch.prototype.findWrapping = function findWrapping (target) {\n  for (var i = 0; i < this.wrapCache.length; i += 2)\n    { if (this.wrapCache[i] == target) { return this.wrapCache[i + 1] } }\n  var computed = this.computeWrapping(target);\n  this.wrapCache.push(target, computed);\n  return computed\n};\n\nContentMatch.prototype.computeWrapping = function computeWrapping (target) {\n  var seen = Object.create(null), active = [{match: this, type: null, via: null}];\n  while (active.length) {\n    var current = active.shift(), match = current.match;\n    if (match.matchType(target)) {\n      var result = [];\n      for (var obj = current; obj.type; obj = obj.via)\n        { result.push(obj.type); }\n      return result.reverse()\n    }\n    for (var i = 0; i < match.next.length; i += 2) {\n      var type = match.next[i];\n      if (!type.isLeaf && !type.hasRequiredAttrs() && !(type.name in seen) && (!current.type || match.next[i + 1].validEnd)) {\n        active.push({match: type.contentMatch, type: type, via: current});\n        seen[type.name] = true;\n      }\n    }\n  }\n};\n\n// :: number\n// The number of outgoing edges this node has in the finite\n// automaton that describes the content expression.\nprototypeAccessors$4.edgeCount.get = function () {\n  return this.next.length >> 1\n};\n\n// :: (number) → {type: NodeType, next: ContentMatch}\n// Get the _n_​th outgoing edge from this node in the finite\n// automaton that describes the content expression.\nContentMatch.prototype.edge = function edge (n) {\n  var i = n << 1;\n  if (i >= this.next.length) { throw new RangeError((\"There's no \" + n + \"th edge in this content match\")) }\n  return {type: this.next[i], next: this.next[i + 1]}\n};\n\nContentMatch.prototype.toString = function toString () {\n  var seen = [];\n  function scan(m) {\n    seen.push(m);\n    for (var i = 1; i < m.next.length; i += 2)\n      { if (seen.indexOf(m.next[i]) == -1) { scan(m.next[i]); } }\n  }\n  scan(this);\n  return seen.map(function (m, i) {\n    var out = i + (m.validEnd ? \"*\" : \" \") + \" \";\n    for (var i$1 = 0; i$1 < m.next.length; i$1 += 2)\n      { out += (i$1 ? \", \" : \"\") + m.next[i$1].name + \"->\" + seen.indexOf(m.next[i$1 + 1]); }\n    return out\n  }).join(\"\\n\")\n};\n\nObject.defineProperties( ContentMatch.prototype, prototypeAccessors$4 );\n\nContentMatch.empty = new ContentMatch(true);\n\nvar TokenStream = function TokenStream(string, nodeTypes) {\n  this.string = string;\n  this.nodeTypes = nodeTypes;\n  this.inline = null;\n  this.pos = 0;\n  this.tokens = string.split(/\\s*(?=\\b|\\W|$)/);\n  if (this.tokens[this.tokens.length - 1] == \"\") { this.tokens.pop(); }\n  if (this.tokens[0] == \"\") { this.tokens.shift(); }\n};\n\nvar prototypeAccessors$1$2 = { next: { configurable: true } };\n\nprototypeAccessors$1$2.next.get = function () { return this.tokens[this.pos] };\n\nTokenStream.prototype.eat = function eat (tok) { return this.next == tok && (this.pos++ || true) };\n\nTokenStream.prototype.err = function err (str) { throw new SyntaxError(str + \" (in content expression '\" + this.string + \"')\") };\n\nObject.defineProperties( TokenStream.prototype, prototypeAccessors$1$2 );\n\nfunction parseExpr(stream) {\n  var exprs = [];\n  do { exprs.push(parseExprSeq(stream)); }\n  while (stream.eat(\"|\"))\n  return exprs.length == 1 ? exprs[0] : {type: \"choice\", exprs: exprs}\n}\n\nfunction parseExprSeq(stream) {\n  var exprs = [];\n  do { exprs.push(parseExprSubscript(stream)); }\n  while (stream.next && stream.next != \")\" && stream.next != \"|\")\n  return exprs.length == 1 ? exprs[0] : {type: \"seq\", exprs: exprs}\n}\n\nfunction parseExprSubscript(stream) {\n  var expr = parseExprAtom(stream);\n  for (;;) {\n    if (stream.eat(\"+\"))\n      { expr = {type: \"plus\", expr: expr}; }\n    else if (stream.eat(\"*\"))\n      { expr = {type: \"star\", expr: expr}; }\n    else if (stream.eat(\"?\"))\n      { expr = {type: \"opt\", expr: expr}; }\n    else if (stream.eat(\"{\"))\n      { expr = parseExprRange(stream, expr); }\n    else { break }\n  }\n  return expr\n}\n\nfunction parseNum(stream) {\n  if (/\\D/.test(stream.next)) { stream.err(\"Expected number, got '\" + stream.next + \"'\"); }\n  var result = Number(stream.next);\n  stream.pos++;\n  return result\n}\n\nfunction parseExprRange(stream, expr) {\n  var min = parseNum(stream), max = min;\n  if (stream.eat(\",\")) {\n    if (stream.next != \"}\") { max = parseNum(stream); }\n    else { max = -1; }\n  }\n  if (!stream.eat(\"}\")) { stream.err(\"Unclosed braced range\"); }\n  return {type: \"range\", min: min, max: max, expr: expr}\n}\n\nfunction resolveName(stream, name) {\n  var types = stream.nodeTypes, type = types[name];\n  if (type) { return [type] }\n  var result = [];\n  for (var typeName in types) {\n    var type$1 = types[typeName];\n    if (type$1.groups.indexOf(name) > -1) { result.push(type$1); }\n  }\n  if (result.length == 0) { stream.err(\"No node type or group '\" + name + \"' found\"); }\n  return result\n}\n\nfunction parseExprAtom(stream) {\n  if (stream.eat(\"(\")) {\n    var expr = parseExpr(stream);\n    if (!stream.eat(\")\")) { stream.err(\"Missing closing paren\"); }\n    return expr\n  } else if (!/\\W/.test(stream.next)) {\n    var exprs = resolveName(stream, stream.next).map(function (type) {\n      if (stream.inline == null) { stream.inline = type.isInline; }\n      else if (stream.inline != type.isInline) { stream.err(\"Mixing inline and block content\"); }\n      return {type: \"name\", value: type}\n    });\n    stream.pos++;\n    return exprs.length == 1 ? exprs[0] : {type: \"choice\", exprs: exprs}\n  } else {\n    stream.err(\"Unexpected token '\" + stream.next + \"'\");\n  }\n}\n\n// The code below helps compile a regular-expression-like language\n// into a deterministic finite automaton. For a good introduction to\n// these concepts, see https://swtch.com/~rsc/regexp/regexp1.html\n\n// : (Object) → [[{term: ?any, to: number}]]\n// Construct an NFA from an expression as returned by the parser. The\n// NFA is represented as an array of states, which are themselves\n// arrays of edges, which are `{term, to}` objects. The first state is\n// the entry state and the last node is the success state.\n//\n// Note that unlike typical NFAs, the edge ordering in this one is\n// significant, in that it is used to contruct filler content when\n// necessary.\nfunction nfa(expr) {\n  var nfa = [[]];\n  connect(compile(expr, 0), node());\n  return nfa\n\n  function node() { return nfa.push([]) - 1 }\n  function edge(from, to, term) {\n    var edge = {term: term, to: to};\n    nfa[from].push(edge);\n    return edge\n  }\n  function connect(edges, to) { edges.forEach(function (edge) { return edge.to = to; }); }\n\n  function compile(expr, from) {\n    if (expr.type == \"choice\") {\n      return expr.exprs.reduce(function (out, expr) { return out.concat(compile(expr, from)); }, [])\n    } else if (expr.type == \"seq\") {\n      for (var i = 0;; i++) {\n        var next = compile(expr.exprs[i], from);\n        if (i == expr.exprs.length - 1) { return next }\n        connect(next, from = node());\n      }\n    } else if (expr.type == \"star\") {\n      var loop = node();\n      edge(from, loop);\n      connect(compile(expr.expr, loop), loop);\n      return [edge(loop)]\n    } else if (expr.type == \"plus\") {\n      var loop$1 = node();\n      connect(compile(expr.expr, from), loop$1);\n      connect(compile(expr.expr, loop$1), loop$1);\n      return [edge(loop$1)]\n    } else if (expr.type == \"opt\") {\n      return [edge(from)].concat(compile(expr.expr, from))\n    } else if (expr.type == \"range\") {\n      var cur = from;\n      for (var i$1 = 0; i$1 < expr.min; i$1++) {\n        var next$1 = node();\n        connect(compile(expr.expr, cur), next$1);\n        cur = next$1;\n      }\n      if (expr.max == -1) {\n        connect(compile(expr.expr, cur), cur);\n      } else {\n        for (var i$2 = expr.min; i$2 < expr.max; i$2++) {\n          var next$2 = node();\n          edge(cur, next$2);\n          connect(compile(expr.expr, cur), next$2);\n          cur = next$2;\n        }\n      }\n      return [edge(cur)]\n    } else if (expr.type == \"name\") {\n      return [edge(from, null, expr.value)]\n    }\n  }\n}\n\nfunction cmp(a, b) { return b - a }\n\n// Get the set of nodes reachable by null edges from `node`. Omit\n// nodes with only a single null-out-edge, since they may lead to\n// needless duplicated nodes.\nfunction nullFrom(nfa, node) {\n  var result = [];\n  scan(node);\n  return result.sort(cmp)\n\n  function scan(node) {\n    var edges = nfa[node];\n    if (edges.length == 1 && !edges[0].term) { return scan(edges[0].to) }\n    result.push(node);\n    for (var i = 0; i < edges.length; i++) {\n      var ref = edges[i];\n      var term = ref.term;\n      var to = ref.to;\n      if (!term && result.indexOf(to) == -1) { scan(to); }\n    }\n  }\n}\n\n// : ([[{term: ?any, to: number}]]) → ContentMatch\n// Compiles an NFA as produced by `nfa` into a DFA, modeled as a set\n// of state objects (`ContentMatch` instances) with transitions\n// between them.\nfunction dfa(nfa) {\n  var labeled = Object.create(null);\n  return explore(nullFrom(nfa, 0))\n\n  function explore(states) {\n    var out = [];\n    states.forEach(function (node) {\n      nfa[node].forEach(function (ref) {\n        var term = ref.term;\n        var to = ref.to;\n\n        if (!term) { return }\n        var known = out.indexOf(term), set = known > -1 && out[known + 1];\n        nullFrom(nfa, to).forEach(function (node) {\n          if (!set) { out.push(term, set = []); }\n          if (set.indexOf(node) == -1) { set.push(node); }\n        });\n      });\n    });\n    var state = labeled[states.join(\",\")] = new ContentMatch(states.indexOf(nfa.length - 1) > -1);\n    for (var i = 0; i < out.length; i += 2) {\n      var states$1 = out[i + 1].sort(cmp);\n      state.next.push(out[i], labeled[states$1.join(\",\")] || explore(states$1));\n    }\n    return state\n  }\n}\n\nfunction checkForDeadEnds(match, stream) {\n  for (var i = 0, work = [match]; i < work.length; i++) {\n    var state = work[i], dead = !state.validEnd, nodes = [];\n    for (var j = 0; j < state.next.length; j += 2) {\n      var node = state.next[j], next = state.next[j + 1];\n      nodes.push(node.name);\n      if (dead && !(node.isText || node.hasRequiredAttrs())) { dead = false; }\n      if (work.indexOf(next) == -1) { work.push(next); }\n    }\n    if (dead) { stream.err(\"Only non-generatable nodes (\" + nodes.join(\", \") + \") in a required position (see https://prosemirror.net/docs/guide/#generatable)\"); }\n  }\n}\n\n// For node types where all attrs have a default value (or which don't\n// have any attributes), build up a single reusable default attribute\n// object, and use it for all nodes that don't specify specific\n// attributes.\nfunction defaultAttrs(attrs) {\n  var defaults = Object.create(null);\n  for (var attrName in attrs) {\n    var attr = attrs[attrName];\n    if (!attr.hasDefault) { return null }\n    defaults[attrName] = attr.default;\n  }\n  return defaults\n}\n\nfunction computeAttrs(attrs, value) {\n  var built = Object.create(null);\n  for (var name in attrs) {\n    var given = value && value[name];\n    if (given === undefined) {\n      var attr = attrs[name];\n      if (attr.hasDefault) { given = attr.default; }\n      else { throw new RangeError(\"No value supplied for attribute \" + name) }\n    }\n    built[name] = given;\n  }\n  return built\n}\n\nfunction initAttrs(attrs) {\n  var result = Object.create(null);\n  if (attrs) { for (var name in attrs) { result[name] = new Attribute(attrs[name]); } }\n  return result\n}\n\n// ::- Node types are objects allocated once per `Schema` and used to\n// [tag](#model.Node.type) `Node` instances. They contain information\n// about the node type, such as its name and what kind of node it\n// represents.\nvar NodeType = function NodeType(name, schema, spec) {\n  // :: string\n  // The name the node type has in this schema.\n  this.name = name;\n\n  // :: Schema\n  // A link back to the `Schema` the node type belongs to.\n  this.schema = schema;\n\n  // :: NodeSpec\n  // The spec that this type is based on\n  this.spec = spec;\n\n  this.groups = spec.group ? spec.group.split(\" \") : [];\n  this.attrs = initAttrs(spec.attrs);\n\n  this.defaultAttrs = defaultAttrs(this.attrs);\n\n  // :: ContentMatch\n  // The starting match of the node type's content expression.\n  this.contentMatch = null;\n\n  // : ?[MarkType]\n  // The set of marks allowed in this node. `null` means all marks\n  // are allowed.\n  this.markSet = null;\n\n  // :: bool\n  // True if this node type has inline content.\n  this.inlineContent = null;\n\n  // :: bool\n  // True if this is a block type\n  this.isBlock = !(spec.inline || name == \"text\");\n\n  // :: bool\n  // True if this is the text node type.\n  this.isText = name == \"text\";\n};\n\nvar prototypeAccessors$5 = { isInline: { configurable: true },isTextblock: { configurable: true },isLeaf: { configurable: true },isAtom: { configurable: true } };\n\n// :: bool\n// True if this is an inline type.\nprototypeAccessors$5.isInline.get = function () { return !this.isBlock };\n\n// :: bool\n// True if this is a textblock type, a block that contains inline\n// content.\nprototypeAccessors$5.isTextblock.get = function () { return this.isBlock && this.inlineContent };\n\n// :: bool\n// True for node types that allow no content.\nprototypeAccessors$5.isLeaf.get = function () { return this.contentMatch == ContentMatch.empty };\n\n// :: bool\n// True when this node is an atom, i.e. when it does not have\n// directly editable content.\nprototypeAccessors$5.isAtom.get = function () { return this.isLeaf || this.spec.atom };\n\n// :: () → bool\n// Tells you whether this node type has any required attributes.\nNodeType.prototype.hasRequiredAttrs = function hasRequiredAttrs () {\n  for (var n in this.attrs) { if (this.attrs[n].isRequired) { return true } }\n  return false\n};\n\nNodeType.prototype.compatibleContent = function compatibleContent (other) {\n  return this == other || this.contentMatch.compatible(other.contentMatch)\n};\n\nNodeType.prototype.computeAttrs = function computeAttrs$1 (attrs) {\n  if (!attrs && this.defaultAttrs) { return this.defaultAttrs }\n  else { return computeAttrs(this.attrs, attrs) }\n};\n\n// :: (?Object, ?union<Fragment, Node, [Node]>, ?[Mark]) → Node\n// Create a `Node` of this type. The given attributes are\n// checked and defaulted (you can pass `null` to use the type's\n// defaults entirely, if no required attributes exist). `content`\n// may be a `Fragment`, a node, an array of nodes, or\n// `null`. Similarly `marks` may be `null` to default to the empty\n// set of marks.\nNodeType.prototype.create = function create (attrs, content, marks) {\n  if (this.isText) { throw new Error(\"NodeType.create can't construct text nodes\") }\n  return new Node(this, this.computeAttrs(attrs), Fragment.from(content), Mark.setFrom(marks))\n};\n\n// :: (?Object, ?union<Fragment, Node, [Node]>, ?[Mark]) → Node\n// Like [`create`](#model.NodeType.create), but check the given content\n// against the node type's content restrictions, and throw an error\n// if it doesn't match.\nNodeType.prototype.createChecked = function createChecked (attrs, content, marks) {\n  content = Fragment.from(content);\n  if (!this.validContent(content))\n    { throw new RangeError(\"Invalid content for node \" + this.name) }\n  return new Node(this, this.computeAttrs(attrs), content, Mark.setFrom(marks))\n};\n\n// :: (?Object, ?union<Fragment, Node, [Node]>, ?[Mark]) → ?Node\n// Like [`create`](#model.NodeType.create), but see if it is necessary to\n// add nodes to the start or end of the given fragment to make it\n// fit the node. If no fitting wrapping can be found, return null.\n// Note that, due to the fact that required nodes can always be\n// created, this will always succeed if you pass null or\n// `Fragment.empty` as content.\nNodeType.prototype.createAndFill = function createAndFill (attrs, content, marks) {\n  attrs = this.computeAttrs(attrs);\n  content = Fragment.from(content);\n  if (content.size) {\n    var before = this.contentMatch.fillBefore(content);\n    if (!before) { return null }\n    content = before.append(content);\n  }\n  var after = this.contentMatch.matchFragment(content).fillBefore(Fragment.empty, true);\n  if (!after) { return null }\n  return new Node(this, attrs, content.append(after), Mark.setFrom(marks))\n};\n\n// :: (Fragment) → bool\n// Returns true if the given fragment is valid content for this node\n// type with the given attributes.\nNodeType.prototype.validContent = function validContent (content) {\n  var result = this.contentMatch.matchFragment(content);\n  if (!result || !result.validEnd) { return false }\n  for (var i = 0; i < content.childCount; i++)\n    { if (!this.allowsMarks(content.child(i).marks)) { return false } }\n  return true\n};\n\n// :: (MarkType) → bool\n// Check whether the given mark type is allowed in this node.\nNodeType.prototype.allowsMarkType = function allowsMarkType (markType) {\n  return this.markSet == null || this.markSet.indexOf(markType) > -1\n};\n\n// :: ([Mark]) → bool\n// Test whether the given set of marks are allowed in this node.\nNodeType.prototype.allowsMarks = function allowsMarks (marks) {\n  if (this.markSet == null) { return true }\n  for (var i = 0; i < marks.length; i++) { if (!this.allowsMarkType(marks[i].type)) { return false } }\n  return true\n};\n\n// :: ([Mark]) → [Mark]\n// Removes the marks that are not allowed in this node from the given set.\nNodeType.prototype.allowedMarks = function allowedMarks (marks) {\n  if (this.markSet == null) { return marks }\n  var copy;\n  for (var i = 0; i < marks.length; i++) {\n    if (!this.allowsMarkType(marks[i].type)) {\n      if (!copy) { copy = marks.slice(0, i); }\n    } else if (copy) {\n      copy.push(marks[i]);\n    }\n  }\n  return !copy ? marks : copy.length ? copy : Mark.empty\n};\n\nNodeType.compile = function compile (nodes, schema) {\n  var result = Object.create(null);\n  nodes.forEach(function (name, spec) { return result[name] = new NodeType(name, schema, spec); });\n\n  var topType = schema.spec.topNode || \"doc\";\n  if (!result[topType]) { throw new RangeError(\"Schema is missing its top node type ('\" + topType + \"')\") }\n  if (!result.text) { throw new RangeError(\"Every schema needs a 'text' type\") }\n  for (var _ in result.text.attrs) { throw new RangeError(\"The text node type should not have attributes\") }\n\n  return result\n};\n\nObject.defineProperties( NodeType.prototype, prototypeAccessors$5 );\n\n// Attribute descriptors\n\nvar Attribute = function Attribute(options) {\n  this.hasDefault = Object.prototype.hasOwnProperty.call(options, \"default\");\n  this.default = options.default;\n};\n\nvar prototypeAccessors$1$3 = { isRequired: { configurable: true } };\n\nprototypeAccessors$1$3.isRequired.get = function () {\n  return !this.hasDefault\n};\n\nObject.defineProperties( Attribute.prototype, prototypeAccessors$1$3 );\n\n// Marks\n\n// ::- Like nodes, marks (which are associated with nodes to signify\n// things like emphasis or being part of a link) are\n// [tagged](#model.Mark.type) with type objects, which are\n// instantiated once per `Schema`.\nvar MarkType = function MarkType(name, rank, schema, spec) {\n  // :: string\n  // The name of the mark type.\n  this.name = name;\n\n  // :: Schema\n  // The schema that this mark type instance is part of.\n  this.schema = schema;\n\n  // :: MarkSpec\n  // The spec on which the type is based.\n  this.spec = spec;\n\n  this.attrs = initAttrs(spec.attrs);\n\n  this.rank = rank;\n  this.excluded = null;\n  var defaults = defaultAttrs(this.attrs);\n  this.instance = defaults && new Mark(this, defaults);\n};\n\n// :: (?Object) → Mark\n// Create a mark of this type. `attrs` may be `null` or an object\n// containing only some of the mark's attributes. The others, if\n// they have defaults, will be added.\nMarkType.prototype.create = function create (attrs) {\n  if (!attrs && this.instance) { return this.instance }\n  return new Mark(this, computeAttrs(this.attrs, attrs))\n};\n\nMarkType.compile = function compile (marks, schema) {\n  var result = Object.create(null), rank = 0;\n  marks.forEach(function (name, spec) { return result[name] = new MarkType(name, rank++, schema, spec); });\n  return result\n};\n\n// :: ([Mark]) → [Mark]\n// When there is a mark of this type in the given set, a new set\n// without it is returned. Otherwise, the input set is returned.\nMarkType.prototype.removeFromSet = function removeFromSet (set) {\n  for (var i = 0; i < set.length; i++) { if (set[i].type == this) {\n    set = set.slice(0, i).concat(set.slice(i + 1));\n    i--;\n  } }\n  return set\n};\n\n// :: ([Mark]) → ?Mark\n// Tests whether there is a mark of this type in the given set.\nMarkType.prototype.isInSet = function isInSet (set) {\n  for (var i = 0; i < set.length; i++)\n    { if (set[i].type == this) { return set[i] } }\n};\n\n// :: (MarkType) → bool\n// Queries whether a given mark type is\n// [excluded](#model.MarkSpec.excludes) by this one.\nMarkType.prototype.excludes = function excludes (other) {\n  return this.excluded.indexOf(other) > -1\n};\n\n// SchemaSpec:: interface\n// An object describing a schema, as passed to the [`Schema`](#model.Schema)\n// constructor.\n//\n//   nodes:: union<Object<NodeSpec>, OrderedMap<NodeSpec>>\n//   The node types in this schema. Maps names to\n//   [`NodeSpec`](#model.NodeSpec) objects that describe the node type\n//   associated with that name. Their order is significant—it\n//   determines which [parse rules](#model.NodeSpec.parseDOM) take\n//   precedence by default, and which nodes come first in a given\n//   [group](#model.NodeSpec.group).\n//\n//   marks:: ?union<Object<MarkSpec>, OrderedMap<MarkSpec>>\n//   The mark types that exist in this schema. The order in which they\n//   are provided determines the order in which [mark\n//   sets](#model.Mark.addToSet) are sorted and in which [parse\n//   rules](#model.MarkSpec.parseDOM) are tried.\n//\n//   topNode:: ?string\n//   The name of the default top-level node for the schema. Defaults\n//   to `\"doc\"`.\n\n// NodeSpec:: interface\n//\n//   content:: ?string\n//   The content expression for this node, as described in the [schema\n//   guide](/docs/guide/#schema.content_expressions). When not given,\n//   the node does not allow any content.\n//\n//   marks:: ?string\n//   The marks that are allowed inside of this node. May be a\n//   space-separated string referring to mark names or groups, `\"_\"`\n//   to explicitly allow all marks, or `\"\"` to disallow marks. When\n//   not given, nodes with inline content default to allowing all\n//   marks, other nodes default to not allowing marks.\n//\n//   group:: ?string\n//   The group or space-separated groups to which this node belongs,\n//   which can be referred to in the content expressions for the\n//   schema.\n//\n//   inline:: ?bool\n//   Should be set to true for inline nodes. (Implied for text nodes.)\n//\n//   atom:: ?bool\n//   Can be set to true to indicate that, though this isn't a [leaf\n//   node](#model.NodeType.isLeaf), it doesn't have directly editable\n//   content and should be treated as a single unit in the view.\n//\n//   attrs:: ?Object<AttributeSpec>\n//   The attributes that nodes of this type get.\n//\n//   selectable:: ?bool\n//   Controls whether nodes of this type can be selected as a [node\n//   selection](#state.NodeSelection). Defaults to true for non-text\n//   nodes.\n//\n//   draggable:: ?bool\n//   Determines whether nodes of this type can be dragged without\n//   being selected. Defaults to false.\n//\n//   code:: ?bool\n//   Can be used to indicate that this node contains code, which\n//   causes some commands to behave differently.\n//\n//   defining:: ?bool\n//   Determines whether this node is considered an important parent\n//   node during replace operations (such as paste). Non-defining (the\n//   default) nodes get dropped when their entire content is replaced,\n//   whereas defining nodes persist and wrap the inserted content.\n//   Likewise, in _inserted_ content the defining parents of the\n//   content are preserved when possible. Typically,\n//   non-default-paragraph textblock types, and possibly list items,\n//   are marked as defining.\n//\n//   isolating:: ?bool\n//   When enabled (default is false), the sides of nodes of this type\n//   count as boundaries that regular editing operations, like\n//   backspacing or lifting, won't cross. An example of a node that\n//   should probably have this enabled is a table cell.\n//\n//   toDOM:: ?(node: Node) → DOMOutputSpec\n//   Defines the default way a node of this type should be serialized\n//   to DOM/HTML (as used by\n//   [`DOMSerializer.fromSchema`](#model.DOMSerializer^fromSchema)).\n//   Should return a DOM node or an [array\n//   structure](#model.DOMOutputSpec) that describes one, with an\n//   optional number zero (“hole”) in it to indicate where the node's\n//   content should be inserted.\n//\n//   For text nodes, the default is to create a text DOM node. Though\n//   it is possible to create a serializer where text is rendered\n//   differently, this is not supported inside the editor, so you\n//   shouldn't override that in your text node spec.\n//\n//   parseDOM:: ?[ParseRule]\n//   Associates DOM parser information with this node, which can be\n//   used by [`DOMParser.fromSchema`](#model.DOMParser^fromSchema) to\n//   automatically derive a parser. The `node` field in the rules is\n//   implied (the name of this node will be filled in automatically).\n//   If you supply your own parser, you do not need to also specify\n//   parsing rules in your schema.\n//\n//   toDebugString:: ?(node: Node) -> string\n//   Defines the default way a node of this type should be serialized\n//   to a string representation for debugging (e.g. in error messages).\n\n// MarkSpec:: interface\n//\n//   attrs:: ?Object<AttributeSpec>\n//   The attributes that marks of this type get.\n//\n//   inclusive:: ?bool\n//   Whether this mark should be active when the cursor is positioned\n//   at its end (or at its start when that is also the start of the\n//   parent node). Defaults to true.\n//\n//   excludes:: ?string\n//   Determines which other marks this mark can coexist with. Should\n//   be a space-separated strings naming other marks or groups of marks.\n//   When a mark is [added](#model.Mark.addToSet) to a set, all marks\n//   that it excludes are removed in the process. If the set contains\n//   any mark that excludes the new mark but is not, itself, excluded\n//   by the new mark, the mark can not be added an the set. You can\n//   use the value `\"_\"` to indicate that the mark excludes all\n//   marks in the schema.\n//\n//   Defaults to only being exclusive with marks of the same type. You\n//   can set it to an empty string (or any string not containing the\n//   mark's own name) to allow multiple marks of a given type to\n//   coexist (as long as they have different attributes).\n//\n//   group:: ?string\n//   The group or space-separated groups to which this mark belongs.\n//\n//   spanning:: ?bool\n//   Determines whether marks of this type can span multiple adjacent\n//   nodes when serialized to DOM/HTML. Defaults to true.\n//\n//   toDOM:: ?(mark: Mark, inline: bool) → DOMOutputSpec\n//   Defines the default way marks of this type should be serialized\n//   to DOM/HTML. When the resulting spec contains a hole, that is\n//   where the marked content is placed. Otherwise, it is appended to\n//   the top node.\n//\n//   parseDOM:: ?[ParseRule]\n//   Associates DOM parser information with this mark (see the\n//   corresponding [node spec field](#model.NodeSpec.parseDOM)). The\n//   `mark` field in the rules is implied.\n\n// AttributeSpec:: interface\n//\n// Used to [define](#model.NodeSpec.attrs) attributes on nodes or\n// marks.\n//\n//   default:: ?any\n//   The default value for this attribute, to use when no explicit\n//   value is provided. Attributes that have no default must be\n//   provided whenever a node or mark of a type that has them is\n//   created.\n\n// ::- A document schema. Holds [node](#model.NodeType) and [mark\n// type](#model.MarkType) objects for the nodes and marks that may\n// occur in conforming documents, and provides functionality for\n// creating and deserializing such documents.\nvar Schema = function Schema(spec) {\n  // :: SchemaSpec\n  // The [spec](#model.SchemaSpec) on which the schema is based,\n  // with the added guarantee that its `nodes` and `marks`\n  // properties are\n  // [`OrderedMap`](https://github.com/marijnh/orderedmap) instances\n  // (not raw objects).\n  this.spec = {};\n  for (var prop in spec) { this.spec[prop] = spec[prop]; }\n  this.spec.nodes = OrderedMap.from(spec.nodes);\n  this.spec.marks = OrderedMap.from(spec.marks);\n\n  // :: Object<NodeType>\n  // An object mapping the schema's node names to node type objects.\n  this.nodes = NodeType.compile(this.spec.nodes, this);\n\n  // :: Object<MarkType>\n  // A map from mark names to mark type objects.\n  this.marks = MarkType.compile(this.spec.marks, this);\n\n  var contentExprCache = Object.create(null);\n  for (var prop$1 in this.nodes) {\n    if (prop$1 in this.marks)\n      { throw new RangeError(prop$1 + \" can not be both a node and a mark\") }\n    var type = this.nodes[prop$1], contentExpr = type.spec.content || \"\", markExpr = type.spec.marks;\n    type.contentMatch = contentExprCache[contentExpr] ||\n      (contentExprCache[contentExpr] = ContentMatch.parse(contentExpr, this.nodes));\n    type.inlineContent = type.contentMatch.inlineContent;\n    type.markSet = markExpr == \"_\" ? null :\n      markExpr ? gatherMarks(this, markExpr.split(\" \")) :\n      markExpr == \"\" || !type.inlineContent ? [] : null;\n  }\n  for (var prop$2 in this.marks) {\n    var type$1 = this.marks[prop$2], excl = type$1.spec.excludes;\n    type$1.excluded = excl == null ? [type$1] : excl == \"\" ? [] : gatherMarks(this, excl.split(\" \"));\n  }\n\n  this.nodeFromJSON = this.nodeFromJSON.bind(this);\n  this.markFromJSON = this.markFromJSON.bind(this);\n\n  // :: NodeType\n  // The type of the [default top node](#model.SchemaSpec.topNode)\n  // for this schema.\n  this.topNodeType = this.nodes[this.spec.topNode || \"doc\"];\n\n  // :: Object\n  // An object for storing whatever values modules may want to\n  // compute and cache per schema. (If you want to store something\n  // in it, try to use property names unlikely to clash.)\n  this.cached = Object.create(null);\n  this.cached.wrappings = Object.create(null);\n};\n\n// :: (union<string, NodeType>, ?Object, ?union<Fragment, Node, [Node]>, ?[Mark]) → Node\n// Create a node in this schema. The `type` may be a string or a\n// `NodeType` instance. Attributes will be extended\n// with defaults, `content` may be a `Fragment`,\n// `null`, a `Node`, or an array of nodes.\nSchema.prototype.node = function node (type, attrs, content, marks) {\n  if (typeof type == \"string\")\n    { type = this.nodeType(type); }\n  else if (!(type instanceof NodeType))\n    { throw new RangeError(\"Invalid node type: \" + type) }\n  else if (type.schema != this)\n    { throw new RangeError(\"Node type from different schema used (\" + type.name + \")\") }\n\n  return type.createChecked(attrs, content, marks)\n};\n\n// :: (string, ?[Mark]) → Node\n// Create a text node in the schema. Empty text nodes are not\n// allowed.\nSchema.prototype.text = function text (text$1, marks) {\n  var type = this.nodes.text;\n  return new TextNode(type, type.defaultAttrs, text$1, Mark.setFrom(marks))\n};\n\n// :: (union<string, MarkType>, ?Object) → Mark\n// Create a mark with the given type and attributes.\nSchema.prototype.mark = function mark (type, attrs) {\n  if (typeof type == \"string\") { type = this.marks[type]; }\n  return type.create(attrs)\n};\n\n// :: (Object) → Node\n// Deserialize a node from its JSON representation. This method is\n// bound.\nSchema.prototype.nodeFromJSON = function nodeFromJSON (json) {\n  return Node.fromJSON(this, json)\n};\n\n// :: (Object) → Mark\n// Deserialize a mark from its JSON representation. This method is\n// bound.\nSchema.prototype.markFromJSON = function markFromJSON (json) {\n  return Mark.fromJSON(this, json)\n};\n\nSchema.prototype.nodeType = function nodeType (name) {\n  var found = this.nodes[name];\n  if (!found) { throw new RangeError(\"Unknown node type: \" + name) }\n  return found\n};\n\nfunction gatherMarks(schema, marks) {\n  var found = [];\n  for (var i = 0; i < marks.length; i++) {\n    var name = marks[i], mark = schema.marks[name], ok = mark;\n    if (mark) {\n      found.push(mark);\n    } else {\n      for (var prop in schema.marks) {\n        var mark$1 = schema.marks[prop];\n        if (name == \"_\" || (mark$1.spec.group && mark$1.spec.group.split(\" \").indexOf(name) > -1))\n          { found.push(ok = mark$1); }\n      }\n    }\n    if (!ok) { throw new SyntaxError(\"Unknown mark type: '\" + marks[i] + \"'\") }\n  }\n  return found\n}\n\n// ParseOptions:: interface\n// These are the options recognized by the\n// [`parse`](#model.DOMParser.parse) and\n// [`parseSlice`](#model.DOMParser.parseSlice) methods.\n//\n//   preserveWhitespace:: ?union<bool, \"full\">\n//   By default, whitespace is collapsed as per HTML's rules. Pass\n//   `true` to preserve whitespace, but normalize newlines to\n//   spaces, and `\"full\"` to preserve whitespace entirely.\n//\n//   findPositions:: ?[{node: dom.Node, offset: number}]\n//   When given, the parser will, beside parsing the content,\n//   record the document positions of the given DOM positions. It\n//   will do so by writing to the objects, adding a `pos` property\n//   that holds the document position. DOM positions that are not\n//   in the parsed content will not be written to.\n//\n//   from:: ?number\n//   The child node index to start parsing from.\n//\n//   to:: ?number\n//   The child node index to stop parsing at.\n//\n//   topNode:: ?Node\n//   By default, the content is parsed into the schema's default\n//   [top node type](#model.Schema.topNodeType). You can pass this\n//   option to use the type and attributes from a different node\n//   as the top container.\n//\n//   topMatch:: ?ContentMatch\n//   Provide the starting content match that content parsed into the\n//   top node is matched against.\n//\n//   context:: ?ResolvedPos\n//   A set of additional nodes to count as\n//   [context](#model.ParseRule.context) when parsing, above the\n//   given [top node](#model.ParseOptions.topNode).\n\n// ParseRule:: interface\n// A value that describes how to parse a given DOM node or inline\n// style as a ProseMirror node or mark.\n//\n//   tag:: ?string\n//   A CSS selector describing the kind of DOM elements to match. A\n//   single rule should have _either_ a `tag` or a `style` property.\n//\n//   namespace:: ?string\n//   The namespace to match. This should be used with `tag`.\n//   Nodes are only matched when the namespace matches or this property\n//   is null.\n//\n//   style:: ?string\n//   A CSS property name to match. When given, this rule matches\n//   inline styles that list that property. May also have the form\n//   `\"property=value\"`, in which case the rule only matches if the\n//   property's value exactly matches the given value. (For more\n//   complicated filters, use [`getAttrs`](#model.ParseRule.getAttrs)\n//   and return false to indicate that the match failed.) Rules\n//   matching styles may only produce [marks](#model.ParseRule.mark),\n//   not nodes.\n//\n//   priority:: ?number\n//   Can be used to change the order in which the parse rules in a\n//   schema are tried. Those with higher priority come first. Rules\n//   without a priority are counted as having priority 50. This\n//   property is only meaningful in a schema—when directly\n//   constructing a parser, the order of the rule array is used.\n//\n//   consuming:: ?boolean\n//   By default, when a rule matches an element or style, no further\n//   rules get a chance to match it. By setting this to `false`, you\n//   indicate that even when this rule matches, other rules that come\n//   after it should also run.\n//\n//   context:: ?string\n//   When given, restricts this rule to only match when the current\n//   context—the parent nodes into which the content is being\n//   parsed—matches this expression. Should contain one or more node\n//   names or node group names followed by single or double slashes.\n//   For example `\"paragraph/\"` means the rule only matches when the\n//   parent node is a paragraph, `\"blockquote/paragraph/\"` restricts\n//   it to be in a paragraph that is inside a blockquote, and\n//   `\"section//\"` matches any position inside a section—a double\n//   slash matches any sequence of ancestor nodes. To allow multiple\n//   different contexts, they can be separated by a pipe (`|`)\n//   character, as in `\"blockquote/|list_item/\"`.\n//\n//   node:: ?string\n//   The name of the node type to create when this rule matches. Only\n//   valid for rules with a `tag` property, not for style rules. Each\n//   rule should have one of a `node`, `mark`, or `ignore` property\n//   (except when it appears in a [node](#model.NodeSpec.parseDOM) or\n//   [mark spec](#model.MarkSpec.parseDOM), in which case the `node`\n//   or `mark` property will be derived from its position).\n//\n//   mark:: ?string\n//   The name of the mark type to wrap the matched content in.\n//\n//   ignore:: ?bool\n//   When true, ignore content that matches this rule.\n//\n//   closeParent:: ?bool\n//   When true, finding an element that matches this rule will close\n//   the current node.\n//\n//   skip:: ?bool\n//   When true, ignore the node that matches this rule, but do parse\n//   its content.\n//\n//   attrs:: ?Object\n//   Attributes for the node or mark created by this rule. When\n//   `getAttrs` is provided, it takes precedence.\n//\n//   getAttrs:: ?(union<dom.Node, string>) → ?union<Object, false>\n//   A function used to compute the attributes for the node or mark\n//   created by this rule. Can also be used to describe further\n//   conditions the DOM element or style must match. When it returns\n//   `false`, the rule won't match. When it returns null or undefined,\n//   that is interpreted as an empty/default set of attributes.\n//\n//   Called with a DOM Element for `tag` rules, and with a string (the\n//   style's value) for `style` rules.\n//\n//   contentElement:: ?union<string, (dom.Node) → dom.Node>\n//   For `tag` rules that produce non-leaf nodes or marks, by default\n//   the content of the DOM element is parsed as content of the mark\n//   or node. If the child nodes are in a descendent node, this may be\n//   a CSS selector string that the parser must use to find the actual\n//   content element, or a function that returns the actual content\n//   element to the parser.\n//\n//   getContent:: ?(dom.Node, schema: Schema) → Fragment\n//   Can be used to override the content of a matched node. When\n//   present, instead of parsing the node's child nodes, the result of\n//   this function is used.\n//\n//   preserveWhitespace:: ?union<bool, \"full\">\n//   Controls whether whitespace should be preserved when parsing the\n//   content inside the matched element. `false` means whitespace may\n//   be collapsed, `true` means that whitespace should be preserved\n//   but newlines normalized to spaces, and `\"full\"` means that\n//   newlines should also be preserved.\n\n// ::- A DOM parser represents a strategy for parsing DOM content into\n// a ProseMirror document conforming to a given schema. Its behavior\n// is defined by an array of [rules](#model.ParseRule).\nvar DOMParser = function DOMParser(schema, rules) {\n  var this$1 = this;\n\n  // :: Schema\n  // The schema into which the parser parses.\n  this.schema = schema;\n  // :: [ParseRule]\n  // The set of [parse rules](#model.ParseRule) that the parser\n  // uses, in order of precedence.\n  this.rules = rules;\n  this.tags = [];\n  this.styles = [];\n\n  rules.forEach(function (rule) {\n    if (rule.tag) { this$1.tags.push(rule); }\n    else if (rule.style) { this$1.styles.push(rule); }\n  });\n\n  // Only normalize list elements when lists in the schema can't directly contain themselves\n  this.normalizeLists = !this.tags.some(function (r) {\n    if (!/^(ul|ol)\\b/.test(r.tag) || !r.node) { return false }\n    var node = schema.nodes[r.node];\n    return node.contentMatch.matchType(node)\n  });\n};\n\n// :: (dom.Node, ?ParseOptions) → Node\n// Parse a document from the content of a DOM node.\nDOMParser.prototype.parse = function parse (dom, options) {\n    if ( options === void 0 ) options = {};\n\n  var context = new ParseContext(this, options, false);\n  context.addAll(dom, null, options.from, options.to);\n  return context.finish()\n};\n\n// :: (dom.Node, ?ParseOptions) → Slice\n// Parses the content of the given DOM node, like\n// [`parse`](#model.DOMParser.parse), and takes the same set of\n// options. But unlike that method, which produces a whole node,\n// this one returns a slice that is open at the sides, meaning that\n// the schema constraints aren't applied to the start of nodes to\n// the left of the input and the end of nodes at the end.\nDOMParser.prototype.parseSlice = function parseSlice (dom, options) {\n    if ( options === void 0 ) options = {};\n\n  var context = new ParseContext(this, options, true);\n  context.addAll(dom, null, options.from, options.to);\n  return Slice.maxOpen(context.finish())\n};\n\nDOMParser.prototype.matchTag = function matchTag (dom, context, after) {\n  for (var i = after ? this.tags.indexOf(after) + 1 : 0; i < this.tags.length; i++) {\n    var rule = this.tags[i];\n    if (matches(dom, rule.tag) &&\n        (rule.namespace === undefined || dom.namespaceURI == rule.namespace) &&\n        (!rule.context || context.matchesContext(rule.context))) {\n      if (rule.getAttrs) {\n        var result = rule.getAttrs(dom);\n        if (result === false) { continue }\n        rule.attrs = result;\n      }\n      return rule\n    }\n  }\n};\n\nDOMParser.prototype.matchStyle = function matchStyle (prop, value, context, after) {\n  for (var i = after ? this.styles.indexOf(after) + 1 : 0; i < this.styles.length; i++) {\n    var rule = this.styles[i];\n    if (rule.style.indexOf(prop) != 0 ||\n        rule.context && !context.matchesContext(rule.context) ||\n        // Test that the style string either precisely matches the prop,\n        // or has an '=' sign after the prop, followed by the given\n        // value.\n        rule.style.length > prop.length &&\n        (rule.style.charCodeAt(prop.length) != 61 || rule.style.slice(prop.length + 1) != value))\n      { continue }\n    if (rule.getAttrs) {\n      var result = rule.getAttrs(value);\n      if (result === false) { continue }\n      rule.attrs = result;\n    }\n    return rule\n  }\n};\n\n// : (Schema) → [ParseRule]\nDOMParser.schemaRules = function schemaRules (schema) {\n  var result = [];\n  function insert(rule) {\n    var priority = rule.priority == null ? 50 : rule.priority, i = 0;\n    for (; i < result.length; i++) {\n      var next = result[i], nextPriority = next.priority == null ? 50 : next.priority;\n      if (nextPriority < priority) { break }\n    }\n    result.splice(i, 0, rule);\n  }\n\n  var loop = function ( name ) {\n    var rules = schema.marks[name].spec.parseDOM;\n    if (rules) { rules.forEach(function (rule) {\n      insert(rule = copy(rule));\n      rule.mark = name;\n    }); }\n  };\n\n    for (var name in schema.marks) loop( name );\n  var loop$1 = function ( name ) {\n    var rules$1 = schema.nodes[name$1].spec.parseDOM;\n    if (rules$1) { rules$1.forEach(function (rule) {\n      insert(rule = copy(rule));\n      rule.node = name$1;\n    }); }\n  };\n\n    for (var name$1 in schema.nodes) loop$1();\n  return result\n};\n\n// :: (Schema) → DOMParser\n// Construct a DOM parser using the parsing rules listed in a\n// schema's [node specs](#model.NodeSpec.parseDOM), reordered by\n// [priority](#model.ParseRule.priority).\nDOMParser.fromSchema = function fromSchema (schema) {\n  return schema.cached.domParser ||\n    (schema.cached.domParser = new DOMParser(schema, DOMParser.schemaRules(schema)))\n};\n\n// : Object<bool> The block-level tags in HTML5\nvar blockTags = {\n  address: true, article: true, aside: true, blockquote: true, canvas: true,\n  dd: true, div: true, dl: true, fieldset: true, figcaption: true, figure: true,\n  footer: true, form: true, h1: true, h2: true, h3: true, h4: true, h5: true,\n  h6: true, header: true, hgroup: true, hr: true, li: true, noscript: true, ol: true,\n  output: true, p: true, pre: true, section: true, table: true, tfoot: true, ul: true\n};\n\n// : Object<bool> The tags that we normally ignore.\nvar ignoreTags = {\n  head: true, noscript: true, object: true, script: true, style: true, title: true\n};\n\n// : Object<bool> List tags.\nvar listTags = {ol: true, ul: true};\n\n// Using a bitfield for node context options\nvar OPT_PRESERVE_WS = 1, OPT_PRESERVE_WS_FULL = 2, OPT_OPEN_LEFT = 4;\n\nfunction wsOptionsFor(preserveWhitespace) {\n  return (preserveWhitespace ? OPT_PRESERVE_WS : 0) | (preserveWhitespace === \"full\" ? OPT_PRESERVE_WS_FULL : 0)\n}\n\nvar NodeContext = function NodeContext(type, attrs, marks, pendingMarks, solid, match, options) {\n  this.type = type;\n  this.attrs = attrs;\n  this.solid = solid;\n  this.match = match || (options & OPT_OPEN_LEFT ? null : type.contentMatch);\n  this.options = options;\n  this.content = [];\n  // Marks applied to this node itself\n  this.marks = marks;\n  // Marks applied to its children\n  this.activeMarks = Mark.none;\n  // Marks that can't apply here, but will be used in children if possible\n  this.pendingMarks = pendingMarks;\n  // Nested Marks with same type\n  this.stashMarks = [];\n};\n\nNodeContext.prototype.findWrapping = function findWrapping (node) {\n  if (!this.match) {\n    if (!this.type) { return [] }\n    var fill = this.type.contentMatch.fillBefore(Fragment.from(node));\n    if (fill) {\n      this.match = this.type.contentMatch.matchFragment(fill);\n    } else {\n      var start = this.type.contentMatch, wrap;\n      if (wrap = start.findWrapping(node.type)) {\n        this.match = start;\n        return wrap\n      } else {\n        return null\n      }\n    }\n  }\n  return this.match.findWrapping(node.type)\n};\n\nNodeContext.prototype.finish = function finish (openEnd) {\n  if (!(this.options & OPT_PRESERVE_WS)) { // Strip trailing whitespace\n    var last = this.content[this.content.length - 1], m;\n    if (last && last.isText && (m = /[ \\t\\r\\n\\u000c]+$/.exec(last.text))) {\n      if (last.text.length == m[0].length) { this.content.pop(); }\n      else { this.content[this.content.length - 1] = last.withText(last.text.slice(0, last.text.length - m[0].length)); }\n    }\n  }\n  var content = Fragment.from(this.content);\n  if (!openEnd && this.match)\n    { content = content.append(this.match.fillBefore(Fragment.empty, true)); }\n  return this.type ? this.type.create(this.attrs, content, this.marks) : content\n};\n\nNodeContext.prototype.popFromStashMark = function popFromStashMark (mark) {\n  for (var i = this.stashMarks.length - 1; i >= 0; i--)\n    { if (mark.eq(this.stashMarks[i])) { return this.stashMarks.splice(i, 1)[0] } }\n};\n\nNodeContext.prototype.applyPending = function applyPending (nextType) {\n  for (var i = 0, pending = this.pendingMarks; i < pending.length; i++) {\n    var mark = pending[i];\n    if ((this.type ? this.type.allowsMarkType(mark.type) : markMayApply(mark.type, nextType)) &&\n        !mark.isInSet(this.activeMarks)) {\n      this.activeMarks = mark.addToSet(this.activeMarks);\n      this.pendingMarks = mark.removeFromSet(this.pendingMarks);\n    }\n  }\n};\n\nNodeContext.prototype.inlineContext = function inlineContext (node) {\n  if (this.type) { return this.type.inlineContent }\n  if (this.content.length) { return this.content[0].isInline }\n  return node.parentNode && !blockTags.hasOwnProperty(node.parentNode.nodeName.toLowerCase())\n};\n\nvar ParseContext = function ParseContext(parser, options, open) {\n  // : DOMParser The parser we are using.\n  this.parser = parser;\n  // : Object The options passed to this parse.\n  this.options = options;\n  this.isOpen = open;\n  var topNode = options.topNode, topContext;\n  var topOptions = wsOptionsFor(options.preserveWhitespace) | (open ? OPT_OPEN_LEFT : 0);\n  if (topNode)\n    { topContext = new NodeContext(topNode.type, topNode.attrs, Mark.none, Mark.none, true,\n                                 options.topMatch || topNode.type.contentMatch, topOptions); }\n  else if (open)\n    { topContext = new NodeContext(null, null, Mark.none, Mark.none, true, null, topOptions); }\n  else\n    { topContext = new NodeContext(parser.schema.topNodeType, null, Mark.none, Mark.none, true, null, topOptions); }\n  this.nodes = [topContext];\n  // : [Mark] The current set of marks\n  this.open = 0;\n  this.find = options.findPositions;\n  this.needsBlock = false;\n};\n\nvar prototypeAccessors$6 = { top: { configurable: true },currentPos: { configurable: true } };\n\nprototypeAccessors$6.top.get = function () {\n  return this.nodes[this.open]\n};\n\n// : (dom.Node)\n// Add a DOM node to the content. Text is inserted as text node,\n// otherwise, the node is passed to `addElement` or, if it has a\n// `style` attribute, `addElementWithStyles`.\nParseContext.prototype.addDOM = function addDOM (dom) {\n  if (dom.nodeType == 3) {\n    this.addTextNode(dom);\n  } else if (dom.nodeType == 1) {\n    var style = dom.getAttribute(\"style\");\n    var marks = style ? this.readStyles(parseStyles(style)) : null, top = this.top;\n    if (marks != null) { for (var i = 0; i < marks.length; i++) { this.addPendingMark(marks[i]); } }\n    this.addElement(dom);\n    if (marks != null) { for (var i$1 = 0; i$1 < marks.length; i$1++) { this.removePendingMark(marks[i$1], top); } }\n  }\n};\n\nParseContext.prototype.addTextNode = function addTextNode (dom) {\n  var value = dom.nodeValue;\n  var top = this.top;\n  if (top.options & OPT_PRESERVE_WS_FULL ||\n      top.inlineContext(dom) ||\n      /[^ \\t\\r\\n\\u000c]/.test(value)) {\n    if (!(top.options & OPT_PRESERVE_WS)) {\n      value = value.replace(/[ \\t\\r\\n\\u000c]+/g, \" \");\n      // If this starts with whitespace, and there is no node before it, or\n      // a hard break, or a text node that ends with whitespace, strip the\n      // leading space.\n      if (/^[ \\t\\r\\n\\u000c]/.test(value) && this.open == this.nodes.length - 1) {\n        var nodeBefore = top.content[top.content.length - 1];\n        var domNodeBefore = dom.previousSibling;\n        if (!nodeBefore ||\n            (domNodeBefore && domNodeBefore.nodeName == 'BR') ||\n            (nodeBefore.isText && /[ \\t\\r\\n\\u000c]$/.test(nodeBefore.text)))\n          { value = value.slice(1); }\n      }\n    } else if (!(top.options & OPT_PRESERVE_WS_FULL)) {\n      value = value.replace(/\\r?\\n|\\r/g, \" \");\n    } else {\n      value = value.replace(/\\r\\n?/g, \"\\n\");\n    }\n    if (value) { this.insertNode(this.parser.schema.text(value)); }\n    this.findInText(dom);\n  } else {\n    this.findInside(dom);\n  }\n};\n\n// : (dom.Element, ?ParseRule)\n// Try to find a handler for the given tag and use that to parse. If\n// none is found, the element's content nodes are added directly.\nParseContext.prototype.addElement = function addElement (dom, matchAfter) {\n  var name = dom.nodeName.toLowerCase(), ruleID;\n  if (listTags.hasOwnProperty(name) && this.parser.normalizeLists) { normalizeList(dom); }\n  var rule = (this.options.ruleFromNode && this.options.ruleFromNode(dom)) ||\n      (ruleID = this.parser.matchTag(dom, this, matchAfter));\n  if (rule ? rule.ignore : ignoreTags.hasOwnProperty(name)) {\n    this.findInside(dom);\n    this.ignoreFallback(dom);\n  } else if (!rule || rule.skip || rule.closeParent) {\n    if (rule && rule.closeParent) { this.open = Math.max(0, this.open - 1); }\n    else if (rule && rule.skip.nodeType) { dom = rule.skip; }\n    var sync, top = this.top, oldNeedsBlock = this.needsBlock;\n    if (blockTags.hasOwnProperty(name)) {\n      sync = true;\n      if (!top.type) { this.needsBlock = true; }\n    } else if (!dom.firstChild) {\n      this.leafFallback(dom);\n      return\n    }\n    this.addAll(dom);\n    if (sync) { this.sync(top); }\n    this.needsBlock = oldNeedsBlock;\n  } else {\n    this.addElementByRule(dom, rule, rule.consuming === false ? ruleID : null);\n  }\n};\n\n// Called for leaf DOM nodes that would otherwise be ignored\nParseContext.prototype.leafFallback = function leafFallback (dom) {\n  if (dom.nodeName == \"BR\" && this.top.type && this.top.type.inlineContent)\n    { this.addTextNode(dom.ownerDocument.createTextNode(\"\\n\")); }\n};\n\n// Called for ignored nodes\nParseContext.prototype.ignoreFallback = function ignoreFallback (dom) {\n  // Ignored BR nodes should at least create an inline context\n  if (dom.nodeName == \"BR\" && (!this.top.type || !this.top.type.inlineContent))\n    { this.findPlace(this.parser.schema.text(\"-\")); }\n};\n\n// Run any style parser associated with the node's styles. Either\n// return an array of marks, or null to indicate some of the styles\n// had a rule with `ignore` set.\nParseContext.prototype.readStyles = function readStyles (styles) {\n  var marks = Mark.none;\n  style: for (var i = 0; i < styles.length; i += 2) {\n    for (var after = null;;) {\n      var rule = this.parser.matchStyle(styles[i], styles[i + 1], this, after);\n      if (!rule) { continue style }\n      if (rule.ignore) { return null }\n      marks = this.parser.schema.marks[rule.mark].create(rule.attrs).addToSet(marks);\n      if (rule.consuming === false) { after = rule; }\n      else { break }\n    }\n  }\n  return marks\n};\n\n// : (dom.Element, ParseRule) → bool\n// Look up a handler for the given node. If none are found, return\n// false. Otherwise, apply it, use its return value to drive the way\n// the node's content is wrapped, and return true.\nParseContext.prototype.addElementByRule = function addElementByRule (dom, rule, continueAfter) {\n    var this$1 = this;\n\n  var sync, nodeType, markType, mark;\n  if (rule.node) {\n    nodeType = this.parser.schema.nodes[rule.node];\n    if (!nodeType.isLeaf) {\n      sync = this.enter(nodeType, rule.attrs, rule.preserveWhitespace);\n    } else if (!this.insertNode(nodeType.create(rule.attrs))) {\n      this.leafFallback(dom);\n    }\n  } else {\n    markType = this.parser.schema.marks[rule.mark];\n    mark = markType.create(rule.attrs);\n    this.addPendingMark(mark);\n  }\n  var startIn = this.top;\n\n  if (nodeType && nodeType.isLeaf) {\n    this.findInside(dom);\n  } else if (continueAfter) {\n    this.addElement(dom, continueAfter);\n  } else if (rule.getContent) {\n    this.findInside(dom);\n    rule.getContent(dom, this.parser.schema).forEach(function (node) { return this$1.insertNode(node); });\n  } else {\n    var contentDOM = rule.contentElement;\n    if (typeof contentDOM == \"string\") { contentDOM = dom.querySelector(contentDOM); }\n    else if (typeof contentDOM == \"function\") { contentDOM = contentDOM(dom); }\n    if (!contentDOM) { contentDOM = dom; }\n    this.findAround(dom, contentDOM, true);\n    this.addAll(contentDOM, sync);\n  }\n  if (sync) { this.sync(startIn); this.open--; }\n  if (mark) { this.removePendingMark(mark, startIn); }\n};\n\n// : (dom.Node, ?NodeBuilder, ?number, ?number)\n// Add all child nodes between `startIndex` and `endIndex` (or the\n// whole node, if not given). If `sync` is passed, use it to\n// synchronize after every block element.\nParseContext.prototype.addAll = function addAll (parent, sync, startIndex, endIndex) {\n  var index = startIndex || 0;\n  for (var dom = startIndex ? parent.childNodes[startIndex] : parent.firstChild,\n           end = endIndex == null ? null : parent.childNodes[endIndex];\n       dom != end; dom = dom.nextSibling, ++index) {\n    this.findAtPoint(parent, index);\n    this.addDOM(dom);\n    if (sync && blockTags.hasOwnProperty(dom.nodeName.toLowerCase()))\n      { this.sync(sync); }\n  }\n  this.findAtPoint(parent, index);\n};\n\n// Try to find a way to fit the given node type into the current\n// context. May add intermediate wrappers and/or leave non-solid\n// nodes that we're in.\nParseContext.prototype.findPlace = function findPlace (node) {\n  var route, sync;\n  for (var depth = this.open; depth >= 0; depth--) {\n    var cx = this.nodes[depth];\n    var found = cx.findWrapping(node);\n    if (found && (!route || route.length > found.length)) {\n      route = found;\n      sync = cx;\n      if (!found.length) { break }\n    }\n    if (cx.solid) { break }\n  }\n  if (!route) { return false }\n  this.sync(sync);\n  for (var i = 0; i < route.length; i++)\n    { this.enterInner(route[i], null, false); }\n  return true\n};\n\n// : (Node) → ?Node\n// Try to insert the given node, adjusting the context when needed.\nParseContext.prototype.insertNode = function insertNode (node) {\n  if (node.isInline && this.needsBlock && !this.top.type) {\n    var block = this.textblockFromContext();\n    if (block) { this.enterInner(block); }\n  }\n  if (this.findPlace(node)) {\n    this.closeExtra();\n    var top = this.top;\n    top.applyPending(node.type);\n    if (top.match) { top.match = top.match.matchType(node.type); }\n    var marks = top.activeMarks;\n    for (var i = 0; i < node.marks.length; i++)\n      { if (!top.type || top.type.allowsMarkType(node.marks[i].type))\n        { marks = node.marks[i].addToSet(marks); } }\n    top.content.push(node.mark(marks));\n    return true\n  }\n  return false\n};\n\n// : (NodeType, ?Object) → bool\n// Try to start a node of the given type, adjusting the context when\n// necessary.\nParseContext.prototype.enter = function enter (type, attrs, preserveWS) {\n  var ok = this.findPlace(type.create(attrs));\n  if (ok) { this.enterInner(type, attrs, true, preserveWS); }\n  return ok\n};\n\n// Open a node of the given type\nParseContext.prototype.enterInner = function enterInner (type, attrs, solid, preserveWS) {\n  this.closeExtra();\n  var top = this.top;\n  top.applyPending(type);\n  top.match = top.match && top.match.matchType(type, attrs);\n  var options = preserveWS == null ? top.options & ~OPT_OPEN_LEFT : wsOptionsFor(preserveWS);\n  if ((top.options & OPT_OPEN_LEFT) && top.content.length == 0) { options |= OPT_OPEN_LEFT; }\n  this.nodes.push(new NodeContext(type, attrs, top.activeMarks, top.pendingMarks, solid, null, options));\n  this.open++;\n};\n\n// Make sure all nodes above this.open are finished and added to\n// their parents\nParseContext.prototype.closeExtra = function closeExtra (openEnd) {\n  var i = this.nodes.length - 1;\n  if (i > this.open) {\n    for (; i > this.open; i--) { this.nodes[i - 1].content.push(this.nodes[i].finish(openEnd)); }\n    this.nodes.length = this.open + 1;\n  }\n};\n\nParseContext.prototype.finish = function finish () {\n  this.open = 0;\n  this.closeExtra(this.isOpen);\n  return this.nodes[0].finish(this.isOpen || this.options.topOpen)\n};\n\nParseContext.prototype.sync = function sync (to) {\n  for (var i = this.open; i >= 0; i--) { if (this.nodes[i] == to) {\n    this.open = i;\n    return\n  } }\n};\n\nprototypeAccessors$6.currentPos.get = function () {\n  this.closeExtra();\n  var pos = 0;\n  for (var i = this.open; i >= 0; i--) {\n    var content = this.nodes[i].content;\n    for (var j = content.length - 1; j >= 0; j--)\n      { pos += content[j].nodeSize; }\n    if (i) { pos++; }\n  }\n  return pos\n};\n\nParseContext.prototype.findAtPoint = function findAtPoint (parent, offset) {\n  if (this.find) { for (var i = 0; i < this.find.length; i++) {\n    if (this.find[i].node == parent && this.find[i].offset == offset)\n      { this.find[i].pos = this.currentPos; }\n  } }\n};\n\nParseContext.prototype.findInside = function findInside (parent) {\n  if (this.find) { for (var i = 0; i < this.find.length; i++) {\n    if (this.find[i].pos == null && parent.nodeType == 1 && parent.contains(this.find[i].node))\n      { this.find[i].pos = this.currentPos; }\n  } }\n};\n\nParseContext.prototype.findAround = function findAround (parent, content, before) {\n  if (parent != content && this.find) { for (var i = 0; i < this.find.length; i++) {\n    if (this.find[i].pos == null && parent.nodeType == 1 && parent.contains(this.find[i].node)) {\n      var pos = content.compareDocumentPosition(this.find[i].node);\n      if (pos & (before ? 2 : 4))\n        { this.find[i].pos = this.currentPos; }\n    }\n  } }\n};\n\nParseContext.prototype.findInText = function findInText (textNode) {\n  if (this.find) { for (var i = 0; i < this.find.length; i++) {\n    if (this.find[i].node == textNode)\n      { this.find[i].pos = this.currentPos - (textNode.nodeValue.length - this.find[i].offset); }\n  } }\n};\n\n// : (string) → bool\n// Determines whether the given [context\n// string](#ParseRule.context) matches this context.\nParseContext.prototype.matchesContext = function matchesContext (context) {\n    var this$1 = this;\n\n  if (context.indexOf(\"|\") > -1)\n    { return context.split(/\\s*\\|\\s*/).some(this.matchesContext, this) }\n\n  var parts = context.split(\"/\");\n  var option = this.options.context;\n  var useRoot = !this.isOpen && (!option || option.parent.type == this.nodes[0].type);\n  var minDepth = -(option ? option.depth + 1 : 0) + (useRoot ? 0 : 1);\n  var match = function (i, depth) {\n    for (; i >= 0; i--) {\n      var part = parts[i];\n      if (part == \"\") {\n        if (i == parts.length - 1 || i == 0) { continue }\n        for (; depth >= minDepth; depth--)\n          { if (match(i - 1, depth)) { return true } }\n        return false\n      } else {\n        var next = depth > 0 || (depth == 0 && useRoot) ? this$1.nodes[depth].type\n            : option && depth >= minDepth ? option.node(depth - minDepth).type\n            : null;\n        if (!next || (next.name != part && next.groups.indexOf(part) == -1))\n          { return false }\n        depth--;\n      }\n    }\n    return true\n  };\n  return match(parts.length - 1, this.open)\n};\n\nParseContext.prototype.textblockFromContext = function textblockFromContext () {\n  var $context = this.options.context;\n  if ($context) { for (var d = $context.depth; d >= 0; d--) {\n    var deflt = $context.node(d).contentMatchAt($context.indexAfter(d)).defaultType;\n    if (deflt && deflt.isTextblock && deflt.defaultAttrs) { return deflt }\n  } }\n  for (var name in this.parser.schema.nodes) {\n    var type = this.parser.schema.nodes[name];\n    if (type.isTextblock && type.defaultAttrs) { return type }\n  }\n};\n\nParseContext.prototype.addPendingMark = function addPendingMark (mark) {\n  var found = findSameMarkInSet(mark, this.top.pendingMarks);\n  if (found) { this.top.stashMarks.push(found); }\n  this.top.pendingMarks = mark.addToSet(this.top.pendingMarks);\n};\n\nParseContext.prototype.removePendingMark = function removePendingMark (mark, upto) {\n  for (var depth = this.open; depth >= 0; depth--) {\n    var level = this.nodes[depth];\n    var found = level.pendingMarks.lastIndexOf(mark);\n    if (found > -1) {\n      level.pendingMarks = mark.removeFromSet(level.pendingMarks);\n    } else {\n      level.activeMarks = mark.removeFromSet(level.activeMarks);\n      var stashMark = level.popFromStashMark(mark);\n      if (stashMark && level.type && level.type.allowsMarkType(stashMark.type))\n        { level.activeMarks = stashMark.addToSet(level.activeMarks); }\n    }\n    if (level == upto) { break }\n  }\n};\n\nObject.defineProperties( ParseContext.prototype, prototypeAccessors$6 );\n\n// Kludge to work around directly nested list nodes produced by some\n// tools and allowed by browsers to mean that the nested list is\n// actually part of the list item above it.\nfunction normalizeList(dom) {\n  for (var child = dom.firstChild, prevItem = null; child; child = child.nextSibling) {\n    var name = child.nodeType == 1 ? child.nodeName.toLowerCase() : null;\n    if (name && listTags.hasOwnProperty(name) && prevItem) {\n      prevItem.appendChild(child);\n      child = prevItem;\n    } else if (name == \"li\") {\n      prevItem = child;\n    } else if (name) {\n      prevItem = null;\n    }\n  }\n}\n\n// Apply a CSS selector.\nfunction matches(dom, selector) {\n  return (dom.matches || dom.msMatchesSelector || dom.webkitMatchesSelector || dom.mozMatchesSelector).call(dom, selector)\n}\n\n// : (string) → [string]\n// Tokenize a style attribute into property/value pairs.\nfunction parseStyles(style) {\n  var re = /\\s*([\\w-]+)\\s*:\\s*([^;]+)/g, m, result = [];\n  while (m = re.exec(style)) { result.push(m[1], m[2].trim()); }\n  return result\n}\n\nfunction copy(obj) {\n  var copy = {};\n  for (var prop in obj) { copy[prop] = obj[prop]; }\n  return copy\n}\n\n// Used when finding a mark at the top level of a fragment parse.\n// Checks whether it would be reasonable to apply a given mark type to\n// a given node, by looking at the way the mark occurs in the schema.\nfunction markMayApply(markType, nodeType) {\n  var nodes = nodeType.schema.nodes;\n  var loop = function ( name ) {\n    var parent = nodes[name];\n    if (!parent.allowsMarkType(markType)) { return }\n    var seen = [], scan = function (match) {\n      seen.push(match);\n      for (var i = 0; i < match.edgeCount; i++) {\n        var ref = match.edge(i);\n        var type = ref.type;\n        var next = ref.next;\n        if (type == nodeType) { return true }\n        if (seen.indexOf(next) < 0 && scan(next)) { return true }\n      }\n    };\n    if (scan(parent.contentMatch)) { return { v: true } }\n  };\n\n  for (var name in nodes) {\n    var returned = loop( name );\n\n    if ( returned ) return returned.v;\n  }\n}\n\nfunction findSameMarkInSet(mark, set) {\n  for (var i = 0; i < set.length; i++) {\n    if (mark.eq(set[i])) { return set[i] }\n  }\n}\n\n// DOMOutputSpec:: interface\n// A description of a DOM structure. Can be either a string, which is\n// interpreted as a text node, a DOM node, which is interpreted as\n// itself, a `{dom: Node, contentDOM: ?Node}` object, or an array.\n//\n// An array describes a DOM element. The first value in the array\n// should be a string—the name of the DOM element, optionally prefixed\n// by a namespace URL and a space. If the second element is plain\n// object, it is interpreted as a set of attributes for the element.\n// Any elements after that (including the 2nd if it's not an attribute\n// object) are interpreted as children of the DOM elements, and must\n// either be valid `DOMOutputSpec` values, or the number zero.\n//\n// The number zero (pronounced “hole”) is used to indicate the place\n// where a node's child nodes should be inserted. If it occurs in an\n// output spec, it should be the only child element in its parent\n// node.\n\n// ::- A DOM serializer knows how to convert ProseMirror nodes and\n// marks of various types to DOM nodes.\nvar DOMSerializer = function DOMSerializer(nodes, marks) {\n  // :: Object<(node: Node) → DOMOutputSpec>\n  // The node serialization functions.\n  this.nodes = nodes || {};\n  // :: Object<?(mark: Mark, inline: bool) → DOMOutputSpec>\n  // The mark serialization functions.\n  this.marks = marks || {};\n};\n\n// :: (Fragment, ?Object) → dom.DocumentFragment\n// Serialize the content of this fragment to a DOM fragment. When\n// not in the browser, the `document` option, containing a DOM\n// document, should be passed so that the serializer can create\n// nodes.\nDOMSerializer.prototype.serializeFragment = function serializeFragment (fragment, options, target) {\n    var this$1 = this;\n    if ( options === void 0 ) options = {};\n\n  if (!target) { target = doc(options).createDocumentFragment(); }\n\n  var top = target, active = null;\n  fragment.forEach(function (node) {\n    if (active || node.marks.length) {\n      if (!active) { active = []; }\n      var keep = 0, rendered = 0;\n      while (keep < active.length && rendered < node.marks.length) {\n        var next = node.marks[rendered];\n        if (!this$1.marks[next.type.name]) { rendered++; continue }\n        if (!next.eq(active[keep]) || next.type.spec.spanning === false) { break }\n        keep += 2; rendered++;\n      }\n      while (keep < active.length) {\n        top = active.pop();\n        active.pop();\n      }\n      while (rendered < node.marks.length) {\n        var add = node.marks[rendered++];\n        var markDOM = this$1.serializeMark(add, node.isInline, options);\n        if (markDOM) {\n          active.push(add, top);\n          top.appendChild(markDOM.dom);\n          top = markDOM.contentDOM || markDOM.dom;\n        }\n      }\n    }\n    top.appendChild(this$1.serializeNodeInner(node, options));\n  });\n\n  return target\n};\n\nDOMSerializer.prototype.serializeNodeInner = function serializeNodeInner (node, options) {\n    if ( options === void 0 ) options = {};\n\n  var ref =\n      DOMSerializer.renderSpec(doc(options), this.nodes[node.type.name](node));\n    var dom = ref.dom;\n    var contentDOM = ref.contentDOM;\n  if (contentDOM) {\n    if (node.isLeaf)\n      { throw new RangeError(\"Content hole not allowed in a leaf node spec\") }\n    if (options.onContent)\n      { options.onContent(node, contentDOM, options); }\n    else\n      { this.serializeFragment(node.content, options, contentDOM); }\n  }\n  return dom\n};\n\n// :: (Node, ?Object) → dom.Node\n// Serialize this node to a DOM node. This can be useful when you\n// need to serialize a part of a document, as opposed to the whole\n// document. To serialize a whole document, use\n// [`serializeFragment`](#model.DOMSerializer.serializeFragment) on\n// its [content](#model.Node.content).\nDOMSerializer.prototype.serializeNode = function serializeNode (node, options) {\n    if ( options === void 0 ) options = {};\n\n  var dom = this.serializeNodeInner(node, options);\n  for (var i = node.marks.length - 1; i >= 0; i--) {\n    var wrap = this.serializeMark(node.marks[i], node.isInline, options);\n    if (wrap) {\n(wrap.contentDOM || wrap.dom).appendChild(dom);\n      dom = wrap.dom;\n    }\n  }\n  return dom\n};\n\nDOMSerializer.prototype.serializeMark = function serializeMark (mark, inline, options) {\n    if ( options === void 0 ) options = {};\n\n  var toDOM = this.marks[mark.type.name];\n  return toDOM && DOMSerializer.renderSpec(doc(options), toDOM(mark, inline))\n};\n\n// :: (dom.Document, DOMOutputSpec) → {dom: dom.Node, contentDOM: ?dom.Node}\n// Render an [output spec](#model.DOMOutputSpec) to a DOM node. If\n// the spec has a hole (zero) in it, `contentDOM` will point at the\n// node with the hole.\nDOMSerializer.renderSpec = function renderSpec (doc, structure, xmlNS) {\n    if ( xmlNS === void 0 ) xmlNS = null;\n\n  if (typeof structure == \"string\")\n    { return {dom: doc.createTextNode(structure)} }\n  if (structure.nodeType != null)\n    { return {dom: structure} }\n  if (structure.dom && structure.dom.nodeType != null)\n    { return structure }\n  var tagName = structure[0], space = tagName.indexOf(\" \");\n  if (space > 0) {\n    xmlNS = tagName.slice(0, space);\n    tagName = tagName.slice(space + 1);\n  }\n  var contentDOM = null, dom = xmlNS ? doc.createElementNS(xmlNS, tagName) : doc.createElement(tagName);\n  var attrs = structure[1], start = 1;\n  if (attrs && typeof attrs == \"object\" && attrs.nodeType == null && !Array.isArray(attrs)) {\n    start = 2;\n    for (var name in attrs) { if (attrs[name] != null) {\n      var space$1 = name.indexOf(\" \");\n      if (space$1 > 0) { dom.setAttributeNS(name.slice(0, space$1), name.slice(space$1 + 1), attrs[name]); }\n      else { dom.setAttribute(name, attrs[name]); }\n    } }\n  }\n  for (var i = start; i < structure.length; i++) {\n    var child = structure[i];\n    if (child === 0) {\n      if (i < structure.length - 1 || i > start)\n        { throw new RangeError(\"Content hole must be the only child of its parent node\") }\n      return {dom: dom, contentDOM: dom}\n    } else {\n      var ref = DOMSerializer.renderSpec(doc, child, xmlNS);\n        var inner = ref.dom;\n        var innerContent = ref.contentDOM;\n      dom.appendChild(inner);\n      if (innerContent) {\n        if (contentDOM) { throw new RangeError(\"Multiple content holes\") }\n        contentDOM = innerContent;\n      }\n    }\n  }\n  return {dom: dom, contentDOM: contentDOM}\n};\n\n// :: (Schema) → DOMSerializer\n// Build a serializer using the [`toDOM`](#model.NodeSpec.toDOM)\n// properties in a schema's node and mark specs.\nDOMSerializer.fromSchema = function fromSchema (schema) {\n  return schema.cached.domSerializer ||\n    (schema.cached.domSerializer = new DOMSerializer(this.nodesFromSchema(schema), this.marksFromSchema(schema)))\n};\n\n// : (Schema) → Object<(node: Node) → DOMOutputSpec>\n// Gather the serializers in a schema's node specs into an object.\n// This can be useful as a base to build a custom serializer from.\nDOMSerializer.nodesFromSchema = function nodesFromSchema (schema) {\n  var result = gatherToDOM(schema.nodes);\n  if (!result.text) { result.text = function (node) { return node.text; }; }\n  return result\n};\n\n// : (Schema) → Object<(mark: Mark) → DOMOutputSpec>\n// Gather the serializers in a schema's mark specs into an object.\nDOMSerializer.marksFromSchema = function marksFromSchema (schema) {\n  return gatherToDOM(schema.marks)\n};\n\nfunction gatherToDOM(obj) {\n  var result = {};\n  for (var name in obj) {\n    var toDOM = obj[name].spec.toDOM;\n    if (toDOM) { result[name] = toDOM; }\n  }\n  return result\n}\n\nfunction doc(options) {\n  // declare global: window\n  return options.document || window.document\n}\n\nexport { ContentMatch, DOMParser, DOMSerializer, Fragment, Mark, MarkType, Node, NodeRange, NodeType, ReplaceError, ResolvedPos, Schema, Slice };\n//# sourceMappingURL=index.es.js.map\n","import { ReplaceError, Slice, Fragment, MarkType } from 'prosemirror-model';\n\n// Mappable:: interface\n// There are several things that positions can be mapped through.\n// Such objects conform to this interface.\n//\n//   map:: (pos: number, assoc: ?number) → number\n//   Map a position through this object. When given, `assoc` (should\n//   be -1 or 1, defaults to 1) determines with which side the\n//   position is associated, which determines in which direction to\n//   move when a chunk of content is inserted at the mapped position.\n//\n//   mapResult:: (pos: number, assoc: ?number) → MapResult\n//   Map a position, and return an object containing additional\n//   information about the mapping. The result's `deleted` field tells\n//   you whether the position was deleted (completely enclosed in a\n//   replaced range) during the mapping. When content on only one side\n//   is deleted, the position itself is only considered deleted when\n//   `assoc` points in the direction of the deleted content.\n\n// Recovery values encode a range index and an offset. They are\n// represented as numbers, because tons of them will be created when\n// mapping, for example, a large number of decorations. The number's\n// lower 16 bits provide the index, the remaining bits the offset.\n//\n// Note: We intentionally don't use bit shift operators to en- and\n// decode these, since those clip to 32 bits, which we might in rare\n// cases want to overflow. A 64-bit float can represent 48-bit\n// integers precisely.\n\nvar lower16 = 0xffff;\nvar factor16 = Math.pow(2, 16);\n\nfunction makeRecover(index, offset) { return index + offset * factor16 }\nfunction recoverIndex(value) { return value & lower16 }\nfunction recoverOffset(value) { return (value - (value & lower16)) / factor16 }\n\n// ::- An object representing a mapped position with extra\n// information.\nvar MapResult = function MapResult(pos, deleted, recover) {\n  if ( deleted === void 0 ) deleted = false;\n  if ( recover === void 0 ) recover = null;\n\n  // :: number The mapped version of the position.\n  this.pos = pos;\n  // :: bool Tells you whether the position was deleted, that is,\n  // whether the step removed its surroundings from the document.\n  this.deleted = deleted;\n  this.recover = recover;\n};\n\n// :: class extends Mappable\n// A map describing the deletions and insertions made by a step, which\n// can be used to find the correspondence between positions in the\n// pre-step version of a document and the same position in the\n// post-step version.\nvar StepMap = function StepMap(ranges, inverted) {\n  if ( inverted === void 0 ) inverted = false;\n\n  this.ranges = ranges;\n  this.inverted = inverted;\n};\n\nStepMap.prototype.recover = function recover (value) {\n  var diff = 0, index = recoverIndex(value);\n  if (!this.inverted) { for (var i = 0; i < index; i++)\n    { diff += this.ranges[i * 3 + 2] - this.ranges[i * 3 + 1]; } }\n  return this.ranges[index * 3] + diff + recoverOffset(value)\n};\n\n// : (number, ?number) → MapResult\nStepMap.prototype.mapResult = function mapResult (pos, assoc) {\n  if ( assoc === void 0 ) assoc = 1;\n return this._map(pos, assoc, false) };\n\n// : (number, ?number) → number\nStepMap.prototype.map = function map (pos, assoc) {\n  if ( assoc === void 0 ) assoc = 1;\n return this._map(pos, assoc, true) };\n\nStepMap.prototype._map = function _map (pos, assoc, simple) {\n  var diff = 0, oldIndex = this.inverted ? 2 : 1, newIndex = this.inverted ? 1 : 2;\n  for (var i = 0; i < this.ranges.length; i += 3) {\n    var start = this.ranges[i] - (this.inverted ? diff : 0);\n    if (start > pos) { break }\n    var oldSize = this.ranges[i + oldIndex], newSize = this.ranges[i + newIndex], end = start + oldSize;\n    if (pos <= end) {\n      var side = !oldSize ? assoc : pos == start ? -1 : pos == end ? 1 : assoc;\n      var result = start + diff + (side < 0 ? 0 : newSize);\n      if (simple) { return result }\n      var recover = pos == (assoc < 0 ? start : end) ? null : makeRecover(i / 3, pos - start);\n      return new MapResult(result, assoc < 0 ? pos != start : pos != end, recover)\n    }\n    diff += newSize - oldSize;\n  }\n  return simple ? pos + diff : new MapResult(pos + diff)\n};\n\nStepMap.prototype.touches = function touches (pos, recover) {\n  var diff = 0, index = recoverIndex(recover);\n  var oldIndex = this.inverted ? 2 : 1, newIndex = this.inverted ? 1 : 2;\n  for (var i = 0; i < this.ranges.length; i += 3) {\n    var start = this.ranges[i] - (this.inverted ? diff : 0);\n    if (start > pos) { break }\n    var oldSize = this.ranges[i + oldIndex], end = start + oldSize;\n    if (pos <= end && i == index * 3) { return true }\n    diff += this.ranges[i + newIndex] - oldSize;\n  }\n  return false\n};\n\n// :: ((oldStart: number, oldEnd: number, newStart: number, newEnd: number))\n// Calls the given function on each of the changed ranges included in\n// this map.\nStepMap.prototype.forEach = function forEach (f) {\n  var oldIndex = this.inverted ? 2 : 1, newIndex = this.inverted ? 1 : 2;\n  for (var i = 0, diff = 0; i < this.ranges.length; i += 3) {\n    var start = this.ranges[i], oldStart = start - (this.inverted ? diff : 0), newStart = start + (this.inverted ? 0 : diff);\n    var oldSize = this.ranges[i + oldIndex], newSize = this.ranges[i + newIndex];\n    f(oldStart, oldStart + oldSize, newStart, newStart + newSize);\n    diff += newSize - oldSize;\n  }\n};\n\n// :: () → StepMap\n// Create an inverted version of this map. The result can be used to\n// map positions in the post-step document to the pre-step document.\nStepMap.prototype.invert = function invert () {\n  return new StepMap(this.ranges, !this.inverted)\n};\n\nStepMap.prototype.toString = function toString () {\n  return (this.inverted ? \"-\" : \"\") + JSON.stringify(this.ranges)\n};\n\n// :: (n: number) → StepMap\n// Create a map that moves all positions by offset `n` (which may be\n// negative). This can be useful when applying steps meant for a\n// sub-document to a larger document, or vice-versa.\nStepMap.offset = function offset (n) {\n  return n == 0 ? StepMap.empty : new StepMap(n < 0 ? [0, -n, 0] : [0, 0, n])\n};\n\nStepMap.empty = new StepMap([]);\n\n// :: class extends Mappable\n// A mapping represents a pipeline of zero or more [step\n// maps](#transform.StepMap). It has special provisions for losslessly\n// handling mapping positions through a series of steps in which some\n// steps are inverted versions of earlier steps. (This comes up when\n// ‘[rebasing](/docs/guide/#transform.rebasing)’ steps for\n// collaboration or history management.)\nvar Mapping = function Mapping(maps, mirror, from, to) {\n  // :: [StepMap]\n  // The step maps in this mapping.\n  this.maps = maps || [];\n  // :: number\n  // The starting position in the `maps` array, used when `map` or\n  // `mapResult` is called.\n  this.from = from || 0;\n  // :: number\n  // The end position in the `maps` array.\n  this.to = to == null ? this.maps.length : to;\n  this.mirror = mirror;\n};\n\n// :: (?number, ?number) → Mapping\n// Create a mapping that maps only through a part of this one.\nMapping.prototype.slice = function slice (from, to) {\n    if ( from === void 0 ) from = 0;\n    if ( to === void 0 ) to = this.maps.length;\n\n  return new Mapping(this.maps, this.mirror, from, to)\n};\n\nMapping.prototype.copy = function copy () {\n  return new Mapping(this.maps.slice(), this.mirror && this.mirror.slice(), this.from, this.to)\n};\n\n// :: (StepMap, ?number)\n// Add a step map to the end of this mapping. If `mirrors` is\n// given, it should be the index of the step map that is the mirror\n// image of this one.\nMapping.prototype.appendMap = function appendMap (map, mirrors) {\n  this.to = this.maps.push(map);\n  if (mirrors != null) { this.setMirror(this.maps.length - 1, mirrors); }\n};\n\n// :: (Mapping)\n// Add all the step maps in a given mapping to this one (preserving\n// mirroring information).\nMapping.prototype.appendMapping = function appendMapping (mapping) {\n  for (var i = 0, startSize = this.maps.length; i < mapping.maps.length; i++) {\n    var mirr = mapping.getMirror(i);\n    this.appendMap(mapping.maps[i], mirr != null && mirr < i ? startSize + mirr : null);\n  }\n};\n\n// :: (number) → ?number\n// Finds the offset of the step map that mirrors the map at the\n// given offset, in this mapping (as per the second argument to\n// `appendMap`).\nMapping.prototype.getMirror = function getMirror (n) {\n  if (this.mirror) { for (var i = 0; i < this.mirror.length; i++)\n    { if (this.mirror[i] == n) { return this.mirror[i + (i % 2 ? -1 : 1)] } } }\n};\n\nMapping.prototype.setMirror = function setMirror (n, m) {\n  if (!this.mirror) { this.mirror = []; }\n  this.mirror.push(n, m);\n};\n\n// :: (Mapping)\n// Append the inverse of the given mapping to this one.\nMapping.prototype.appendMappingInverted = function appendMappingInverted (mapping) {\n  for (var i = mapping.maps.length - 1, totalSize = this.maps.length + mapping.maps.length; i >= 0; i--) {\n    var mirr = mapping.getMirror(i);\n    this.appendMap(mapping.maps[i].invert(), mirr != null && mirr > i ? totalSize - mirr - 1 : null);\n  }\n};\n\n// :: () → Mapping\n// Create an inverted version of this mapping.\nMapping.prototype.invert = function invert () {\n  var inverse = new Mapping;\n  inverse.appendMappingInverted(this);\n  return inverse\n};\n\n// : (number, ?number) → number\n// Map a position through this mapping.\nMapping.prototype.map = function map (pos, assoc) {\n    if ( assoc === void 0 ) assoc = 1;\n\n  if (this.mirror) { return this._map(pos, assoc, true) }\n  for (var i = this.from; i < this.to; i++)\n    { pos = this.maps[i].map(pos, assoc); }\n  return pos\n};\n\n// : (number, ?number) → MapResult\n// Map a position through this mapping, returning a mapping\n// result.\nMapping.prototype.mapResult = function mapResult (pos, assoc) {\n  if ( assoc === void 0 ) assoc = 1;\n return this._map(pos, assoc, false) };\n\nMapping.prototype._map = function _map (pos, assoc, simple) {\n  var deleted = false;\n\n  for (var i = this.from; i < this.to; i++) {\n    var map = this.maps[i], result = map.mapResult(pos, assoc);\n    if (result.recover != null) {\n      var corr = this.getMirror(i);\n      if (corr != null && corr > i && corr < this.to) {\n        i = corr;\n        pos = this.maps[corr].recover(result.recover);\n        continue\n      }\n    }\n\n    if (result.deleted) { deleted = true; }\n    pos = result.pos;\n  }\n\n  return simple ? pos : new MapResult(pos, deleted)\n};\n\nfunction TransformError(message) {\n  var err = Error.call(this, message);\n  err.__proto__ = TransformError.prototype;\n  return err\n}\n\nTransformError.prototype = Object.create(Error.prototype);\nTransformError.prototype.constructor = TransformError;\nTransformError.prototype.name = \"TransformError\";\n\n// ::- Abstraction to build up and track an array of\n// [steps](#transform.Step) representing a document transformation.\n//\n// Most transforming methods return the `Transform` object itself, so\n// that they can be chained.\nvar Transform = function Transform(doc) {\n  // :: Node\n  // The current document (the result of applying the steps in the\n  // transform).\n  this.doc = doc;\n  // :: [Step]\n  // The steps in this transform.\n  this.steps = [];\n  // :: [Node]\n  // The documents before each of the steps.\n  this.docs = [];\n  // :: Mapping\n  // A mapping with the maps for each of the steps in this transform.\n  this.mapping = new Mapping;\n};\n\nvar prototypeAccessors = { before: { configurable: true },docChanged: { configurable: true } };\n\n// :: Node The starting document.\nprototypeAccessors.before.get = function () { return this.docs.length ? this.docs[0] : this.doc };\n\n// :: (step: Step) → this\n// Apply a new step in this transform, saving the result. Throws an\n// error when the step fails.\nTransform.prototype.step = function step (object) {\n  var result = this.maybeStep(object);\n  if (result.failed) { throw new TransformError(result.failed) }\n  return this\n};\n\n// :: (Step) → StepResult\n// Try to apply a step in this transformation, ignoring it if it\n// fails. Returns the step result.\nTransform.prototype.maybeStep = function maybeStep (step) {\n  var result = step.apply(this.doc);\n  if (!result.failed) { this.addStep(step, result.doc); }\n  return result\n};\n\n// :: bool\n// True when the document has been changed (when there are any\n// steps).\nprototypeAccessors.docChanged.get = function () {\n  return this.steps.length > 0\n};\n\nTransform.prototype.addStep = function addStep (step, doc) {\n  this.docs.push(this.doc);\n  this.steps.push(step);\n  this.mapping.appendMap(step.getMap());\n  this.doc = doc;\n};\n\nObject.defineProperties( Transform.prototype, prototypeAccessors );\n\nfunction mustOverride() { throw new Error(\"Override me\") }\n\nvar stepsByID = Object.create(null);\n\n// ::- A step object represents an atomic change. It generally applies\n// only to the document it was created for, since the positions\n// stored in it will only make sense for that document.\n//\n// New steps are defined by creating classes that extend `Step`,\n// overriding the `apply`, `invert`, `map`, `getMap` and `fromJSON`\n// methods, and registering your class with a unique\n// JSON-serialization identifier using\n// [`Step.jsonID`](#transform.Step^jsonID).\nvar Step = function Step () {};\n\nStep.prototype.apply = function apply (_doc) { return mustOverride() };\n\n// :: () → StepMap\n// Get the step map that represents the changes made by this step,\n// and which can be used to transform between positions in the old\n// and the new document.\nStep.prototype.getMap = function getMap () { return StepMap.empty };\n\n// :: (doc: Node) → Step\n// Create an inverted version of this step. Needs the document as it\n// was before the step as argument.\nStep.prototype.invert = function invert (_doc) { return mustOverride() };\n\n// :: (mapping: Mappable) → ?Step\n// Map this step through a mappable thing, returning either a\n// version of that step with its positions adjusted, or `null` if\n// the step was entirely deleted by the mapping.\nStep.prototype.map = function map (_mapping) { return mustOverride() };\n\n// :: (other: Step) → ?Step\n// Try to merge this step with another one, to be applied directly\n// after it. Returns the merged step when possible, null if the\n// steps can't be merged.\nStep.prototype.merge = function merge (_other) { return null };\n\n// :: () → Object\n// Create a JSON-serializeable representation of this step. When\n// defining this for a custom subclass, make sure the result object\n// includes the step type's [JSON id](#transform.Step^jsonID) under\n// the `stepType` property.\nStep.prototype.toJSON = function toJSON () { return mustOverride() };\n\n// :: (Schema, Object) → Step\n// Deserialize a step from its JSON representation. Will call\n// through to the step class' own implementation of this method.\nStep.fromJSON = function fromJSON (schema, json) {\n  if (!json || !json.stepType) { throw new RangeError(\"Invalid input for Step.fromJSON\") }\n  var type = stepsByID[json.stepType];\n  if (!type) { throw new RangeError((\"No step type \" + (json.stepType) + \" defined\")) }\n  return type.fromJSON(schema, json)\n};\n\n// :: (string, constructor<Step>)\n// To be able to serialize steps to JSON, each step needs a string\n// ID to attach to its JSON representation. Use this method to\n// register an ID for your step classes. Try to pick something\n// that's unlikely to clash with steps from other modules.\nStep.jsonID = function jsonID (id, stepClass) {\n  if (id in stepsByID) { throw new RangeError(\"Duplicate use of step JSON ID \" + id) }\n  stepsByID[id] = stepClass;\n  stepClass.prototype.jsonID = id;\n  return stepClass\n};\n\n// ::- The result of [applying](#transform.Step.apply) a step. Contains either a\n// new document or a failure value.\nvar StepResult = function StepResult(doc, failed) {\n  // :: ?Node The transformed document.\n  this.doc = doc;\n  // :: ?string Text providing information about a failed step.\n  this.failed = failed;\n};\n\n// :: (Node) → StepResult\n// Create a successful step result.\nStepResult.ok = function ok (doc) { return new StepResult(doc, null) };\n\n// :: (string) → StepResult\n// Create a failed step result.\nStepResult.fail = function fail (message) { return new StepResult(null, message) };\n\n// :: (Node, number, number, Slice) → StepResult\n// Call [`Node.replace`](#model.Node.replace) with the given\n// arguments. Create a successful result if it succeeds, and a\n// failed one if it throws a `ReplaceError`.\nStepResult.fromReplace = function fromReplace (doc, from, to, slice) {\n  try {\n    return StepResult.ok(doc.replace(from, to, slice))\n  } catch (e) {\n    if (e instanceof ReplaceError) { return StepResult.fail(e.message) }\n    throw e\n  }\n};\n\n// ::- Replace a part of the document with a slice of new content.\nvar ReplaceStep = /*@__PURE__*/(function (Step) {\n  function ReplaceStep(from, to, slice, structure) {\n    Step.call(this);\n    // :: number\n    // The start position of the replaced range.\n    this.from = from;\n    // :: number\n    // The end position of the replaced range.\n    this.to = to;\n    // :: Slice\n    // The slice to insert.\n    this.slice = slice;\n    this.structure = !!structure;\n  }\n\n  if ( Step ) ReplaceStep.__proto__ = Step;\n  ReplaceStep.prototype = Object.create( Step && Step.prototype );\n  ReplaceStep.prototype.constructor = ReplaceStep;\n\n  ReplaceStep.prototype.apply = function apply (doc) {\n    if (this.structure && contentBetween(doc, this.from, this.to))\n      { return StepResult.fail(\"Structure replace would overwrite content\") }\n    return StepResult.fromReplace(doc, this.from, this.to, this.slice)\n  };\n\n  ReplaceStep.prototype.getMap = function getMap () {\n    return new StepMap([this.from, this.to - this.from, this.slice.size])\n  };\n\n  ReplaceStep.prototype.invert = function invert (doc) {\n    return new ReplaceStep(this.from, this.from + this.slice.size, doc.slice(this.from, this.to))\n  };\n\n  ReplaceStep.prototype.map = function map (mapping) {\n    var from = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1);\n    if (from.deleted && to.deleted) { return null }\n    return new ReplaceStep(from.pos, Math.max(from.pos, to.pos), this.slice)\n  };\n\n  ReplaceStep.prototype.merge = function merge (other) {\n    if (!(other instanceof ReplaceStep) || other.structure || this.structure) { return null }\n\n    if (this.from + this.slice.size == other.from && !this.slice.openEnd && !other.slice.openStart) {\n      var slice = this.slice.size + other.slice.size == 0 ? Slice.empty\n          : new Slice(this.slice.content.append(other.slice.content), this.slice.openStart, other.slice.openEnd);\n      return new ReplaceStep(this.from, this.to + (other.to - other.from), slice, this.structure)\n    } else if (other.to == this.from && !this.slice.openStart && !other.slice.openEnd) {\n      var slice$1 = this.slice.size + other.slice.size == 0 ? Slice.empty\n          : new Slice(other.slice.content.append(this.slice.content), other.slice.openStart, this.slice.openEnd);\n      return new ReplaceStep(other.from, this.to, slice$1, this.structure)\n    } else {\n      return null\n    }\n  };\n\n  ReplaceStep.prototype.toJSON = function toJSON () {\n    var json = {stepType: \"replace\", from: this.from, to: this.to};\n    if (this.slice.size) { json.slice = this.slice.toJSON(); }\n    if (this.structure) { json.structure = true; }\n    return json\n  };\n\n  ReplaceStep.fromJSON = function fromJSON (schema, json) {\n    if (typeof json.from != \"number\" || typeof json.to != \"number\")\n      { throw new RangeError(\"Invalid input for ReplaceStep.fromJSON\") }\n    return new ReplaceStep(json.from, json.to, Slice.fromJSON(schema, json.slice), !!json.structure)\n  };\n\n  return ReplaceStep;\n}(Step));\n\nStep.jsonID(\"replace\", ReplaceStep);\n\n// ::- Replace a part of the document with a slice of content, but\n// preserve a range of the replaced content by moving it into the\n// slice.\nvar ReplaceAroundStep = /*@__PURE__*/(function (Step) {\n  function ReplaceAroundStep(from, to, gapFrom, gapTo, slice, insert, structure) {\n    Step.call(this);\n    // :: number\n    // The start position of the replaced range.\n    this.from = from;\n    // :: number\n    // The end position of the replaced range.\n    this.to = to;\n    // :: number\n    // The start of preserved range.\n    this.gapFrom = gapFrom;\n    // :: number\n    // The end of preserved range.\n    this.gapTo = gapTo;\n    // :: Slice\n    // The slice to insert.\n    this.slice = slice;\n    // :: number\n    // The position in the slice where the preserved range should be\n    // inserted.\n    this.insert = insert;\n    this.structure = !!structure;\n  }\n\n  if ( Step ) ReplaceAroundStep.__proto__ = Step;\n  ReplaceAroundStep.prototype = Object.create( Step && Step.prototype );\n  ReplaceAroundStep.prototype.constructor = ReplaceAroundStep;\n\n  ReplaceAroundStep.prototype.apply = function apply (doc) {\n    if (this.structure && (contentBetween(doc, this.from, this.gapFrom) ||\n                           contentBetween(doc, this.gapTo, this.to)))\n      { return StepResult.fail(\"Structure gap-replace would overwrite content\") }\n\n    var gap = doc.slice(this.gapFrom, this.gapTo);\n    if (gap.openStart || gap.openEnd)\n      { return StepResult.fail(\"Gap is not a flat range\") }\n    var inserted = this.slice.insertAt(this.insert, gap.content);\n    if (!inserted) { return StepResult.fail(\"Content does not fit in gap\") }\n    return StepResult.fromReplace(doc, this.from, this.to, inserted)\n  };\n\n  ReplaceAroundStep.prototype.getMap = function getMap () {\n    return new StepMap([this.from, this.gapFrom - this.from, this.insert,\n                        this.gapTo, this.to - this.gapTo, this.slice.size - this.insert])\n  };\n\n  ReplaceAroundStep.prototype.invert = function invert (doc) {\n    var gap = this.gapTo - this.gapFrom;\n    return new ReplaceAroundStep(this.from, this.from + this.slice.size + gap,\n                                 this.from + this.insert, this.from + this.insert + gap,\n                                 doc.slice(this.from, this.to).removeBetween(this.gapFrom - this.from, this.gapTo - this.from),\n                                 this.gapFrom - this.from, this.structure)\n  };\n\n  ReplaceAroundStep.prototype.map = function map (mapping) {\n    var from = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1);\n    var gapFrom = mapping.map(this.gapFrom, -1), gapTo = mapping.map(this.gapTo, 1);\n    if ((from.deleted && to.deleted) || gapFrom < from.pos || gapTo > to.pos) { return null }\n    return new ReplaceAroundStep(from.pos, to.pos, gapFrom, gapTo, this.slice, this.insert, this.structure)\n  };\n\n  ReplaceAroundStep.prototype.toJSON = function toJSON () {\n    var json = {stepType: \"replaceAround\", from: this.from, to: this.to,\n                gapFrom: this.gapFrom, gapTo: this.gapTo, insert: this.insert};\n    if (this.slice.size) { json.slice = this.slice.toJSON(); }\n    if (this.structure) { json.structure = true; }\n    return json\n  };\n\n  ReplaceAroundStep.fromJSON = function fromJSON (schema, json) {\n    if (typeof json.from != \"number\" || typeof json.to != \"number\" ||\n        typeof json.gapFrom != \"number\" || typeof json.gapTo != \"number\" || typeof json.insert != \"number\")\n      { throw new RangeError(\"Invalid input for ReplaceAroundStep.fromJSON\") }\n    return new ReplaceAroundStep(json.from, json.to, json.gapFrom, json.gapTo,\n                                 Slice.fromJSON(schema, json.slice), json.insert, !!json.structure)\n  };\n\n  return ReplaceAroundStep;\n}(Step));\n\nStep.jsonID(\"replaceAround\", ReplaceAroundStep);\n\nfunction contentBetween(doc, from, to) {\n  var $from = doc.resolve(from), dist = to - from, depth = $from.depth;\n  while (dist > 0 && depth > 0 && $from.indexAfter(depth) == $from.node(depth).childCount) {\n    depth--;\n    dist--;\n  }\n  if (dist > 0) {\n    var next = $from.node(depth).maybeChild($from.indexAfter(depth));\n    while (dist > 0) {\n      if (!next || next.isLeaf) { return true }\n      next = next.firstChild;\n      dist--;\n    }\n  }\n  return false\n}\n\nfunction canCut(node, start, end) {\n  return (start == 0 || node.canReplace(start, node.childCount)) &&\n    (end == node.childCount || node.canReplace(0, end))\n}\n\n// :: (NodeRange) → ?number\n// Try to find a target depth to which the content in the given range\n// can be lifted. Will not go across\n// [isolating](#model.NodeSpec.isolating) parent nodes.\nfunction liftTarget(range) {\n  var parent = range.parent;\n  var content = parent.content.cutByIndex(range.startIndex, range.endIndex);\n  for (var depth = range.depth;; --depth) {\n    var node = range.$from.node(depth);\n    var index = range.$from.index(depth), endIndex = range.$to.indexAfter(depth);\n    if (depth < range.depth && node.canReplace(index, endIndex, content))\n      { return depth }\n    if (depth == 0 || node.type.spec.isolating || !canCut(node, index, endIndex)) { break }\n  }\n}\n\n// :: (NodeRange, number) → this\n// Split the content in the given range off from its parent, if there\n// is sibling content before or after it, and move it up the tree to\n// the depth specified by `target`. You'll probably want to use\n// [`liftTarget`](#transform.liftTarget) to compute `target`, to make\n// sure the lift is valid.\nTransform.prototype.lift = function(range, target) {\n  var $from = range.$from;\n  var $to = range.$to;\n  var depth = range.depth;\n\n  var gapStart = $from.before(depth + 1), gapEnd = $to.after(depth + 1);\n  var start = gapStart, end = gapEnd;\n\n  var before = Fragment.empty, openStart = 0;\n  for (var d = depth, splitting = false; d > target; d--)\n    { if (splitting || $from.index(d) > 0) {\n      splitting = true;\n      before = Fragment.from($from.node(d).copy(before));\n      openStart++;\n    } else {\n      start--;\n    } }\n  var after = Fragment.empty, openEnd = 0;\n  for (var d$1 = depth, splitting$1 = false; d$1 > target; d$1--)\n    { if (splitting$1 || $to.after(d$1 + 1) < $to.end(d$1)) {\n      splitting$1 = true;\n      after = Fragment.from($to.node(d$1).copy(after));\n      openEnd++;\n    } else {\n      end++;\n    } }\n\n  return this.step(new ReplaceAroundStep(start, end, gapStart, gapEnd,\n                                         new Slice(before.append(after), openStart, openEnd),\n                                         before.size - openStart, true))\n};\n\n// :: (NodeRange, NodeType, ?Object, ?NodeRange) → ?[{type: NodeType, attrs: ?Object}]\n// Try to find a valid way to wrap the content in the given range in a\n// node of the given type. May introduce extra nodes around and inside\n// the wrapper node, if necessary. Returns null if no valid wrapping\n// could be found. When `innerRange` is given, that range's content is\n// used as the content to fit into the wrapping, instead of the\n// content of `range`.\nfunction findWrapping(range, nodeType, attrs, innerRange) {\n  if ( innerRange === void 0 ) innerRange = range;\n\n  var around = findWrappingOutside(range, nodeType);\n  var inner = around && findWrappingInside(innerRange, nodeType);\n  if (!inner) { return null }\n  return around.map(withAttrs).concat({type: nodeType, attrs: attrs}).concat(inner.map(withAttrs))\n}\n\nfunction withAttrs(type) { return {type: type, attrs: null} }\n\nfunction findWrappingOutside(range, type) {\n  var parent = range.parent;\n  var startIndex = range.startIndex;\n  var endIndex = range.endIndex;\n  var around = parent.contentMatchAt(startIndex).findWrapping(type);\n  if (!around) { return null }\n  var outer = around.length ? around[0] : type;\n  return parent.canReplaceWith(startIndex, endIndex, outer) ? around : null\n}\n\nfunction findWrappingInside(range, type) {\n  var parent = range.parent;\n  var startIndex = range.startIndex;\n  var endIndex = range.endIndex;\n  var inner = parent.child(startIndex);\n  var inside = type.contentMatch.findWrapping(inner.type);\n  if (!inside) { return null }\n  var lastType = inside.length ? inside[inside.length - 1] : type;\n  var innerMatch = lastType.contentMatch;\n  for (var i = startIndex; innerMatch && i < endIndex; i++)\n    { innerMatch = innerMatch.matchType(parent.child(i).type); }\n  if (!innerMatch || !innerMatch.validEnd) { return null }\n  return inside\n}\n\n// :: (NodeRange, [{type: NodeType, attrs: ?Object}]) → this\n// Wrap the given [range](#model.NodeRange) in the given set of wrappers.\n// The wrappers are assumed to be valid in this position, and should\n// probably be computed with [`findWrapping`](#transform.findWrapping).\nTransform.prototype.wrap = function(range, wrappers) {\n  var content = Fragment.empty;\n  for (var i = wrappers.length - 1; i >= 0; i--)\n    { content = Fragment.from(wrappers[i].type.create(wrappers[i].attrs, content)); }\n\n  var start = range.start, end = range.end;\n  return this.step(new ReplaceAroundStep(start, end, start, end, new Slice(content, 0, 0), wrappers.length, true))\n};\n\n// :: (number, ?number, NodeType, ?Object) → this\n// Set the type of all textblocks (partly) between `from` and `to` to\n// the given node type with the given attributes.\nTransform.prototype.setBlockType = function(from, to, type, attrs) {\n  var this$1 = this;\n  if ( to === void 0 ) to = from;\n\n  if (!type.isTextblock) { throw new RangeError(\"Type given to setBlockType should be a textblock\") }\n  var mapFrom = this.steps.length;\n  this.doc.nodesBetween(from, to, function (node, pos) {\n    if (node.isTextblock && !node.hasMarkup(type, attrs) && canChangeType(this$1.doc, this$1.mapping.slice(mapFrom).map(pos), type)) {\n      // Ensure all markup that isn't allowed in the new node type is cleared\n      this$1.clearIncompatible(this$1.mapping.slice(mapFrom).map(pos, 1), type);\n      var mapping = this$1.mapping.slice(mapFrom);\n      var startM = mapping.map(pos, 1), endM = mapping.map(pos + node.nodeSize, 1);\n      this$1.step(new ReplaceAroundStep(startM, endM, startM + 1, endM - 1,\n                                      new Slice(Fragment.from(type.create(attrs, null, node.marks)), 0, 0), 1, true));\n      return false\n    }\n  });\n  return this\n};\n\nfunction canChangeType(doc, pos, type) {\n  var $pos = doc.resolve(pos), index = $pos.index();\n  return $pos.parent.canReplaceWith(index, index + 1, type)\n}\n\n// :: (number, ?NodeType, ?Object, ?[Mark]) → this\n// Change the type, attributes, and/or marks of the node at `pos`.\n// When `type` isn't given, the existing node type is preserved,\nTransform.prototype.setNodeMarkup = function(pos, type, attrs, marks) {\n  var node = this.doc.nodeAt(pos);\n  if (!node) { throw new RangeError(\"No node at given position\") }\n  if (!type) { type = node.type; }\n  var newNode = type.create(attrs, null, marks || node.marks);\n  if (node.isLeaf)\n    { return this.replaceWith(pos, pos + node.nodeSize, newNode) }\n\n  if (!type.validContent(node.content))\n    { throw new RangeError(\"Invalid content for node type \" + type.name) }\n\n  return this.step(new ReplaceAroundStep(pos, pos + node.nodeSize, pos + 1, pos + node.nodeSize - 1,\n                                         new Slice(Fragment.from(newNode), 0, 0), 1, true))\n};\n\n// :: (Node, number, number, ?[?{type: NodeType, attrs: ?Object}]) → bool\n// Check whether splitting at the given position is allowed.\nfunction canSplit(doc, pos, depth, typesAfter) {\n  if ( depth === void 0 ) depth = 1;\n\n  var $pos = doc.resolve(pos), base = $pos.depth - depth;\n  var innerType = (typesAfter && typesAfter[typesAfter.length - 1]) || $pos.parent;\n  if (base < 0 || $pos.parent.type.spec.isolating ||\n      !$pos.parent.canReplace($pos.index(), $pos.parent.childCount) ||\n      !innerType.type.validContent($pos.parent.content.cutByIndex($pos.index(), $pos.parent.childCount)))\n    { return false }\n  for (var d = $pos.depth - 1, i = depth - 2; d > base; d--, i--) {\n    var node = $pos.node(d), index$1 = $pos.index(d);\n    if (node.type.spec.isolating) { return false }\n    var rest = node.content.cutByIndex(index$1, node.childCount);\n    var after = (typesAfter && typesAfter[i]) || node;\n    if (after != node) { rest = rest.replaceChild(0, after.type.create(after.attrs)); }\n    if (!node.canReplace(index$1 + 1, node.childCount) || !after.type.validContent(rest))\n      { return false }\n  }\n  var index = $pos.indexAfter(base);\n  var baseType = typesAfter && typesAfter[0];\n  return $pos.node(base).canReplaceWith(index, index, baseType ? baseType.type : $pos.node(base + 1).type)\n}\n\n// :: (number, ?number, ?[?{type: NodeType, attrs: ?Object}]) → this\n// Split the node at the given position, and optionally, if `depth` is\n// greater than one, any number of nodes above that. By default, the\n// parts split off will inherit the node type of the original node.\n// This can be changed by passing an array of types and attributes to\n// use after the split.\nTransform.prototype.split = function(pos, depth, typesAfter) {\n  if ( depth === void 0 ) depth = 1;\n\n  var $pos = this.doc.resolve(pos), before = Fragment.empty, after = Fragment.empty;\n  for (var d = $pos.depth, e = $pos.depth - depth, i = depth - 1; d > e; d--, i--) {\n    before = Fragment.from($pos.node(d).copy(before));\n    var typeAfter = typesAfter && typesAfter[i];\n    after = Fragment.from(typeAfter ? typeAfter.type.create(typeAfter.attrs, after) : $pos.node(d).copy(after));\n  }\n  return this.step(new ReplaceStep(pos, pos, new Slice(before.append(after), depth, depth), true))\n};\n\n// :: (Node, number) → bool\n// Test whether the blocks before and after a given position can be\n// joined.\nfunction canJoin(doc, pos) {\n  var $pos = doc.resolve(pos), index = $pos.index();\n  return joinable($pos.nodeBefore, $pos.nodeAfter) &&\n    $pos.parent.canReplace(index, index + 1)\n}\n\nfunction joinable(a, b) {\n  return a && b && !a.isLeaf && a.canAppend(b)\n}\n\n// :: (Node, number, ?number) → ?number\n// Find an ancestor of the given position that can be joined to the\n// block before (or after if `dir` is positive). Returns the joinable\n// point, if any.\nfunction joinPoint(doc, pos, dir) {\n  if ( dir === void 0 ) dir = -1;\n\n  var $pos = doc.resolve(pos);\n  for (var d = $pos.depth;; d--) {\n    var before = (void 0), after = (void 0), index = $pos.index(d);\n    if (d == $pos.depth) {\n      before = $pos.nodeBefore;\n      after = $pos.nodeAfter;\n    } else if (dir > 0) {\n      before = $pos.node(d + 1);\n      index++;\n      after = $pos.node(d).maybeChild(index);\n    } else {\n      before = $pos.node(d).maybeChild(index - 1);\n      after = $pos.node(d + 1);\n    }\n    if (before && !before.isTextblock && joinable(before, after) &&\n        $pos.node(d).canReplace(index, index + 1)) { return pos }\n    if (d == 0) { break }\n    pos = dir < 0 ? $pos.before(d) : $pos.after(d);\n  }\n}\n\n// :: (number, ?number) → this\n// Join the blocks around the given position. If depth is 2, their\n// last and first siblings are also joined, and so on.\nTransform.prototype.join = function(pos, depth) {\n  if ( depth === void 0 ) depth = 1;\n\n  var step = new ReplaceStep(pos - depth, pos + depth, Slice.empty, true);\n  return this.step(step)\n};\n\n// :: (Node, number, NodeType) → ?number\n// Try to find a point where a node of the given type can be inserted\n// near `pos`, by searching up the node hierarchy when `pos` itself\n// isn't a valid place but is at the start or end of a node. Return\n// null if no position was found.\nfunction insertPoint(doc, pos, nodeType) {\n  var $pos = doc.resolve(pos);\n  if ($pos.parent.canReplaceWith($pos.index(), $pos.index(), nodeType)) { return pos }\n\n  if ($pos.parentOffset == 0)\n    { for (var d = $pos.depth - 1; d >= 0; d--) {\n      var index = $pos.index(d);\n      if ($pos.node(d).canReplaceWith(index, index, nodeType)) { return $pos.before(d + 1) }\n      if (index > 0) { return null }\n    } }\n  if ($pos.parentOffset == $pos.parent.content.size)\n    { for (var d$1 = $pos.depth - 1; d$1 >= 0; d$1--) {\n      var index$1 = $pos.indexAfter(d$1);\n      if ($pos.node(d$1).canReplaceWith(index$1, index$1, nodeType)) { return $pos.after(d$1 + 1) }\n      if (index$1 < $pos.node(d$1).childCount) { return null }\n    } }\n}\n\n// :: (Node, number, Slice) → ?number\n// Finds a position at or around the given position where the given\n// slice can be inserted. Will look at parent nodes' nearest boundary\n// and try there, even if the original position wasn't directly at the\n// start or end of that node. Returns null when no position was found.\nfunction dropPoint(doc, pos, slice) {\n  var $pos = doc.resolve(pos);\n  if (!slice.content.size) { return pos }\n  var content = slice.content;\n  for (var i = 0; i < slice.openStart; i++) { content = content.firstChild.content; }\n  for (var pass = 1; pass <= (slice.openStart == 0 && slice.size ? 2 : 1); pass++) {\n    for (var d = $pos.depth; d >= 0; d--) {\n      var bias = d == $pos.depth ? 0 : $pos.pos <= ($pos.start(d + 1) + $pos.end(d + 1)) / 2 ? -1 : 1;\n      var insertPos = $pos.index(d) + (bias > 0 ? 1 : 0);\n      var parent = $pos.node(d), fits = false;\n      if (pass == 1) {\n        fits = parent.canReplace(insertPos, insertPos, content);\n      } else {\n        var wrapping = parent.contentMatchAt(insertPos).findWrapping(content.firstChild.type);\n        fits = wrapping && parent.canReplaceWith(insertPos, insertPos, wrapping[0]);\n      }\n      if (fits)\n        { return bias == 0 ? $pos.pos : bias < 0 ? $pos.before(d + 1) : $pos.after(d + 1) }\n    }\n  }\n  return null\n}\n\nfunction mapFragment(fragment, f, parent) {\n  var mapped = [];\n  for (var i = 0; i < fragment.childCount; i++) {\n    var child = fragment.child(i);\n    if (child.content.size) { child = child.copy(mapFragment(child.content, f, child)); }\n    if (child.isInline) { child = f(child, parent, i); }\n    mapped.push(child);\n  }\n  return Fragment.fromArray(mapped)\n}\n\n// ::- Add a mark to all inline content between two positions.\nvar AddMarkStep = /*@__PURE__*/(function (Step) {\n  function AddMarkStep(from, to, mark) {\n    Step.call(this);\n    // :: number\n    // The start of the marked range.\n    this.from = from;\n    // :: number\n    // The end of the marked range.\n    this.to = to;\n    // :: Mark\n    // The mark to add.\n    this.mark = mark;\n  }\n\n  if ( Step ) AddMarkStep.__proto__ = Step;\n  AddMarkStep.prototype = Object.create( Step && Step.prototype );\n  AddMarkStep.prototype.constructor = AddMarkStep;\n\n  AddMarkStep.prototype.apply = function apply (doc) {\n    var this$1 = this;\n\n    var oldSlice = doc.slice(this.from, this.to), $from = doc.resolve(this.from);\n    var parent = $from.node($from.sharedDepth(this.to));\n    var slice = new Slice(mapFragment(oldSlice.content, function (node, parent) {\n      if (!node.isAtom || !parent.type.allowsMarkType(this$1.mark.type)) { return node }\n      return node.mark(this$1.mark.addToSet(node.marks))\n    }, parent), oldSlice.openStart, oldSlice.openEnd);\n    return StepResult.fromReplace(doc, this.from, this.to, slice)\n  };\n\n  AddMarkStep.prototype.invert = function invert () {\n    return new RemoveMarkStep(this.from, this.to, this.mark)\n  };\n\n  AddMarkStep.prototype.map = function map (mapping) {\n    var from = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1);\n    if (from.deleted && to.deleted || from.pos >= to.pos) { return null }\n    return new AddMarkStep(from.pos, to.pos, this.mark)\n  };\n\n  AddMarkStep.prototype.merge = function merge (other) {\n    if (other instanceof AddMarkStep &&\n        other.mark.eq(this.mark) &&\n        this.from <= other.to && this.to >= other.from)\n      { return new AddMarkStep(Math.min(this.from, other.from),\n                             Math.max(this.to, other.to), this.mark) }\n  };\n\n  AddMarkStep.prototype.toJSON = function toJSON () {\n    return {stepType: \"addMark\", mark: this.mark.toJSON(),\n            from: this.from, to: this.to}\n  };\n\n  AddMarkStep.fromJSON = function fromJSON (schema, json) {\n    if (typeof json.from != \"number\" || typeof json.to != \"number\")\n      { throw new RangeError(\"Invalid input for AddMarkStep.fromJSON\") }\n    return new AddMarkStep(json.from, json.to, schema.markFromJSON(json.mark))\n  };\n\n  return AddMarkStep;\n}(Step));\n\nStep.jsonID(\"addMark\", AddMarkStep);\n\n// ::- Remove a mark from all inline content between two positions.\nvar RemoveMarkStep = /*@__PURE__*/(function (Step) {\n  function RemoveMarkStep(from, to, mark) {\n    Step.call(this);\n    // :: number\n    // The start of the unmarked range.\n    this.from = from;\n    // :: number\n    // The end of the unmarked range.\n    this.to = to;\n    // :: Mark\n    // The mark to remove.\n    this.mark = mark;\n  }\n\n  if ( Step ) RemoveMarkStep.__proto__ = Step;\n  RemoveMarkStep.prototype = Object.create( Step && Step.prototype );\n  RemoveMarkStep.prototype.constructor = RemoveMarkStep;\n\n  RemoveMarkStep.prototype.apply = function apply (doc) {\n    var this$1 = this;\n\n    var oldSlice = doc.slice(this.from, this.to);\n    var slice = new Slice(mapFragment(oldSlice.content, function (node) {\n      return node.mark(this$1.mark.removeFromSet(node.marks))\n    }), oldSlice.openStart, oldSlice.openEnd);\n    return StepResult.fromReplace(doc, this.from, this.to, slice)\n  };\n\n  RemoveMarkStep.prototype.invert = function invert () {\n    return new AddMarkStep(this.from, this.to, this.mark)\n  };\n\n  RemoveMarkStep.prototype.map = function map (mapping) {\n    var from = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1);\n    if (from.deleted && to.deleted || from.pos >= to.pos) { return null }\n    return new RemoveMarkStep(from.pos, to.pos, this.mark)\n  };\n\n  RemoveMarkStep.prototype.merge = function merge (other) {\n    if (other instanceof RemoveMarkStep &&\n        other.mark.eq(this.mark) &&\n        this.from <= other.to && this.to >= other.from)\n      { return new RemoveMarkStep(Math.min(this.from, other.from),\n                                Math.max(this.to, other.to), this.mark) }\n  };\n\n  RemoveMarkStep.prototype.toJSON = function toJSON () {\n    return {stepType: \"removeMark\", mark: this.mark.toJSON(),\n            from: this.from, to: this.to}\n  };\n\n  RemoveMarkStep.fromJSON = function fromJSON (schema, json) {\n    if (typeof json.from != \"number\" || typeof json.to != \"number\")\n      { throw new RangeError(\"Invalid input for RemoveMarkStep.fromJSON\") }\n    return new RemoveMarkStep(json.from, json.to, schema.markFromJSON(json.mark))\n  };\n\n  return RemoveMarkStep;\n}(Step));\n\nStep.jsonID(\"removeMark\", RemoveMarkStep);\n\n// :: (number, number, Mark) → this\n// Add the given mark to the inline content between `from` and `to`.\nTransform.prototype.addMark = function(from, to, mark) {\n  var this$1 = this;\n\n  var removed = [], added = [], removing = null, adding = null;\n  this.doc.nodesBetween(from, to, function (node, pos, parent) {\n    if (!node.isInline) { return }\n    var marks = node.marks;\n    if (!mark.isInSet(marks) && parent.type.allowsMarkType(mark.type)) {\n      var start = Math.max(pos, from), end = Math.min(pos + node.nodeSize, to);\n      var newSet = mark.addToSet(marks);\n\n      for (var i = 0; i < marks.length; i++) {\n        if (!marks[i].isInSet(newSet)) {\n          if (removing && removing.to == start && removing.mark.eq(marks[i]))\n            { removing.to = end; }\n          else\n            { removed.push(removing = new RemoveMarkStep(start, end, marks[i])); }\n        }\n      }\n\n      if (adding && adding.to == start)\n        { adding.to = end; }\n      else\n        { added.push(adding = new AddMarkStep(start, end, mark)); }\n    }\n  });\n\n  removed.forEach(function (s) { return this$1.step(s); });\n  added.forEach(function (s) { return this$1.step(s); });\n  return this\n};\n\n// :: (number, number, ?union<Mark, MarkType>) → this\n// Remove marks from inline nodes between `from` and `to`. When `mark`\n// is a single mark, remove precisely that mark. When it is a mark type,\n// remove all marks of that type. When it is null, remove all marks of\n// any type.\nTransform.prototype.removeMark = function(from, to, mark) {\n  var this$1 = this;\n  if ( mark === void 0 ) mark = null;\n\n  var matched = [], step = 0;\n  this.doc.nodesBetween(from, to, function (node, pos) {\n    if (!node.isInline) { return }\n    step++;\n    var toRemove = null;\n    if (mark instanceof MarkType) {\n      var set = node.marks, found;\n      while (found = mark.isInSet(set)) {\n(toRemove || (toRemove = [])).push(found);\n        set = found.removeFromSet(set);\n      }\n    } else if (mark) {\n      if (mark.isInSet(node.marks)) { toRemove = [mark]; }\n    } else {\n      toRemove = node.marks;\n    }\n    if (toRemove && toRemove.length) {\n      var end = Math.min(pos + node.nodeSize, to);\n      for (var i = 0; i < toRemove.length; i++) {\n        var style = toRemove[i], found$1 = (void 0);\n        for (var j = 0; j < matched.length; j++) {\n          var m = matched[j];\n          if (m.step == step - 1 && style.eq(matched[j].style)) { found$1 = m; }\n        }\n        if (found$1) {\n          found$1.to = end;\n          found$1.step = step;\n        } else {\n          matched.push({style: style, from: Math.max(pos, from), to: end, step: step});\n        }\n      }\n    }\n  });\n  matched.forEach(function (m) { return this$1.step(new RemoveMarkStep(m.from, m.to, m.style)); });\n  return this\n};\n\n// :: (number, NodeType, ?ContentMatch) → this\n// Removes all marks and nodes from the content of the node at `pos`\n// that don't match the given new parent node type. Accepts an\n// optional starting [content match](#model.ContentMatch) as third\n// argument.\nTransform.prototype.clearIncompatible = function(pos, parentType, match) {\n  if ( match === void 0 ) match = parentType.contentMatch;\n\n  var node = this.doc.nodeAt(pos);\n  var delSteps = [], cur = pos + 1;\n  for (var i = 0; i < node.childCount; i++) {\n    var child = node.child(i), end = cur + child.nodeSize;\n    var allowed = match.matchType(child.type, child.attrs);\n    if (!allowed) {\n      delSteps.push(new ReplaceStep(cur, end, Slice.empty));\n    } else {\n      match = allowed;\n      for (var j = 0; j < child.marks.length; j++) { if (!parentType.allowsMarkType(child.marks[j].type))\n        { this.step(new RemoveMarkStep(cur, end, child.marks[j])); } }\n    }\n    cur = end;\n  }\n  if (!match.validEnd) {\n    var fill = match.fillBefore(Fragment.empty, true);\n    this.replace(cur, cur, new Slice(fill, 0, 0));\n  }\n  for (var i$1 = delSteps.length - 1; i$1 >= 0; i$1--) { this.step(delSteps[i$1]); }\n  return this\n};\n\n// :: (Node, number, ?number, ?Slice) → ?Step\n// ‘Fit’ a slice into a given position in the document, producing a\n// [step](#transform.Step) that inserts it. Will return null if\n// there's no meaningful way to insert the slice here, or inserting it\n// would be a no-op (an empty slice over an empty range).\nfunction replaceStep(doc, from, to, slice) {\n  if ( to === void 0 ) to = from;\n  if ( slice === void 0 ) slice = Slice.empty;\n\n  if (from == to && !slice.size) { return null }\n\n  var $from = doc.resolve(from), $to = doc.resolve(to);\n  // Optimization -- avoid work if it's obvious that it's not needed.\n  if (fitsTrivially($from, $to, slice)) { return new ReplaceStep(from, to, slice) }\n  return new Fitter($from, $to, slice).fit()\n}\n\n// :: (number, ?number, ?Slice) → this\n// Replace the part of the document between `from` and `to` with the\n// given `slice`.\nTransform.prototype.replace = function(from, to, slice) {\n  if ( to === void 0 ) to = from;\n  if ( slice === void 0 ) slice = Slice.empty;\n\n  var step = replaceStep(this.doc, from, to, slice);\n  if (step) { this.step(step); }\n  return this\n};\n\n// :: (number, number, union<Fragment, Node, [Node]>) → this\n// Replace the given range with the given content, which may be a\n// fragment, node, or array of nodes.\nTransform.prototype.replaceWith = function(from, to, content) {\n  return this.replace(from, to, new Slice(Fragment.from(content), 0, 0))\n};\n\n// :: (number, number) → this\n// Delete the content between the given positions.\nTransform.prototype.delete = function(from, to) {\n  return this.replace(from, to, Slice.empty)\n};\n\n// :: (number, union<Fragment, Node, [Node]>) → this\n// Insert the given content at the given position.\nTransform.prototype.insert = function(pos, content) {\n  return this.replaceWith(pos, pos, content)\n};\n\nfunction fitsTrivially($from, $to, slice) {\n  return !slice.openStart && !slice.openEnd && $from.start() == $to.start() &&\n    $from.parent.canReplace($from.index(), $to.index(), slice.content)\n}\n\n// Algorithm for 'placing' the elements of a slice into a gap:\n//\n// We consider the content of each node that is open to the left to be\n// independently placeable. I.e. in <p(\"foo\"), p(\"bar\")>, when the\n// paragraph on the left is open, \"foo\" can be placed (somewhere on\n// the left side of the replacement gap) independently from p(\"bar\").\n//\n// This class tracks the state of the placement progress in the\n// following properties:\n//\n//  - `frontier` holds a stack of `{type, match}` objects that\n//    represent the open side of the replacement. It starts at\n//    `$from`, then moves forward as content is placed, and is finally\n//    reconciled with `$to`.\n//\n//  - `unplaced` is a slice that represents the content that hasn't\n//    been placed yet.\n//\n//  - `placed` is a fragment of placed content. Its open-start value\n//    is implicit in `$from`, and its open-end value in `frontier`.\nvar Fitter = function Fitter($from, $to, slice) {\n  this.$to = $to;\n  this.$from = $from;\n  this.unplaced = slice;\n\n  this.frontier = [];\n  for (var i = 0; i <= $from.depth; i++) {\n    var node = $from.node(i);\n    this.frontier.push({\n      type: node.type,\n      match: node.contentMatchAt($from.indexAfter(i))\n    });\n  }\n\n  this.placed = Fragment.empty;\n  for (var i$1 = $from.depth; i$1 > 0; i$1--)\n    { this.placed = Fragment.from($from.node(i$1).copy(this.placed)); }\n};\n\nvar prototypeAccessors$1 = { depth: { configurable: true } };\n\nprototypeAccessors$1.depth.get = function () { return this.frontier.length - 1 };\n\nFitter.prototype.fit = function fit () {\n  // As long as there's unplaced content, try to place some of it.\n  // If that fails, either increase the open score of the unplaced\n  // slice, or drop nodes from it, and then try again.\n  while (this.unplaced.size) {\n    var fit = this.findFittable();\n    if (fit) { this.placeNodes(fit); }\n    else { this.openMore() || this.dropNode(); }\n  }\n  // When there's inline content directly after the frontier _and_\n  // directly after `this.$to`, we must generate a `ReplaceAround`\n  // step that pulls that content into the node after the frontier.\n  // That means the fitting must be done to the end of the textblock\n  // node after `this.$to`, not `this.$to` itself.\n  var moveInline = this.mustMoveInline(), placedSize = this.placed.size - this.depth - this.$from.depth;\n  var $from = this.$from, $to = this.close(moveInline < 0 ? this.$to : $from.doc.resolve(moveInline));\n  if (!$to) { return null }\n\n  // If closing to `$to` succeeded, create a step\n  var content = this.placed, openStart = $from.depth, openEnd = $to.depth;\n  while (openStart && openEnd && content.childCount == 1) { // Normalize by dropping open parent nodes\n    content = content.firstChild.content;\n    openStart--; openEnd--;\n  }\n  var slice = new Slice(content, openStart, openEnd);\n  if (moveInline > -1)\n    { return new ReplaceAroundStep($from.pos, moveInline, this.$to.pos, this.$to.end(), slice, placedSize) }\n  if (slice.size || $from.pos != this.$to.pos) // Don't generate no-op steps\n    { return new ReplaceStep($from.pos, $to.pos, slice) }\n};\n\n// Find a position on the start spine of `this.unplaced` that has\n// content that can be moved somewhere on the frontier. Returns two\n// depths, one for the slice and one for the frontier.\nFitter.prototype.findFittable = function findFittable () {\n  // Only try wrapping nodes (pass 2) after finding a place without\n  // wrapping failed.\n  for (var pass = 1; pass <= 2; pass++) {\n    for (var sliceDepth = this.unplaced.openStart; sliceDepth >= 0; sliceDepth--) {\n      var fragment = (void 0), parent = (void 0);\n      if (sliceDepth) {\n        parent = contentAt(this.unplaced.content, sliceDepth - 1).firstChild;\n        fragment = parent.content;\n      } else {\n        fragment = this.unplaced.content;\n      }\n      var first = fragment.firstChild;\n      for (var frontierDepth = this.depth; frontierDepth >= 0; frontierDepth--) {\n        var ref = this.frontier[frontierDepth];\n          var type = ref.type;\n          var match = ref.match;\n          var wrap = (void 0), inject = (void 0);\n        // In pass 1, if the next node matches, or there is no next\n        // node but the parents look compatible, we've found a\n        // place.\n        if (pass == 1 && (first ? match.matchType(first.type) || (inject = match.fillBefore(Fragment.from(first), false))\n                          : type.compatibleContent(parent.type)))\n          { return {sliceDepth: sliceDepth, frontierDepth: frontierDepth, parent: parent, inject: inject} }\n        // In pass 2, look for a set of wrapping nodes that make\n        // `first` fit here.\n        else if (pass == 2 && first && (wrap = match.findWrapping(first.type)))\n          { return {sliceDepth: sliceDepth, frontierDepth: frontierDepth, parent: parent, wrap: wrap} }\n        // Don't continue looking further up if the parent node\n        // would fit here.\n        if (parent && match.matchType(parent.type)) { break }\n      }\n    }\n  }\n};\n\nFitter.prototype.openMore = function openMore () {\n  var ref = this.unplaced;\n    var content = ref.content;\n    var openStart = ref.openStart;\n    var openEnd = ref.openEnd;\n  var inner = contentAt(content, openStart);\n  if (!inner.childCount || inner.firstChild.isLeaf) { return false }\n  this.unplaced = new Slice(content, openStart + 1,\n                            Math.max(openEnd, inner.size + openStart >= content.size - openEnd ? openStart + 1 : 0));\n  return true\n};\n\nFitter.prototype.dropNode = function dropNode () {\n  var ref = this.unplaced;\n    var content = ref.content;\n    var openStart = ref.openStart;\n    var openEnd = ref.openEnd;\n  var inner = contentAt(content, openStart);\n  if (inner.childCount <= 1 && openStart > 0) {\n    var openAtEnd = content.size - openStart <= openStart + inner.size;\n    this.unplaced = new Slice(dropFromFragment(content, openStart - 1, 1), openStart - 1,\n                              openAtEnd ? openStart - 1 : openEnd);\n  } else {\n    this.unplaced = new Slice(dropFromFragment(content, openStart, 1), openStart, openEnd);\n  }\n};\n\n// : ({sliceDepth: number, frontierDepth: number, parent: ?Node, wrap: ?[NodeType], inject: ?Fragment})\n// Move content from the unplaced slice at `sliceDepth` to the\n// frontier node at `frontierDepth`. Close that frontier node when\n// applicable.\nFitter.prototype.placeNodes = function placeNodes (ref) {\n    var sliceDepth = ref.sliceDepth;\n    var frontierDepth = ref.frontierDepth;\n    var parent = ref.parent;\n    var inject = ref.inject;\n    var wrap = ref.wrap;\n\n  while (this.depth > frontierDepth) { this.closeFrontierNode(); }\n  if (wrap) { for (var i = 0; i < wrap.length; i++) { this.openFrontierNode(wrap[i]); } }\n\n  var slice = this.unplaced, fragment = parent ? parent.content : slice.content;\n  var openStart = slice.openStart - sliceDepth;\n  var taken = 0, add = [];\n  var ref$1 = this.frontier[frontierDepth];\n    var match = ref$1.match;\n    var type = ref$1.type;\n  if (inject) {\n    for (var i$1 = 0; i$1 < inject.childCount; i$1++) { add.push(inject.child(i$1)); }\n    match = match.matchFragment(inject);\n  }\n  // Computes the amount of (end) open nodes at the end of the\n  // fragment. When 0, the parent is open, but no more. When\n  // negative, nothing is open.\n  var openEndCount = (fragment.size + sliceDepth) - (slice.content.size - slice.openEnd);\n  // Scan over the fragment, fitting as many child nodes as\n  // possible.\n  while (taken < fragment.childCount) {\n    var next = fragment.child(taken), matches = match.matchType(next.type);\n    if (!matches) { break }\n    taken++;\n    if (taken > 1 || openStart == 0 || next.content.size) { // Drop empty open nodes\n      match = matches;\n      add.push(closeNodeStart(next.mark(type.allowedMarks(next.marks)), taken == 1 ? openStart : 0,\n                              taken == fragment.childCount ? openEndCount : -1));\n    }\n  }\n  var toEnd = taken == fragment.childCount;\n  if (!toEnd) { openEndCount = -1; }\n\n  this.placed = addToFragment(this.placed, frontierDepth, Fragment.from(add));\n  this.frontier[frontierDepth].match = match;\n\n  // If the parent types match, and the entire node was moved, and\n  // it's not open, close this frontier node right away.\n  if (toEnd && openEndCount < 0 && parent && parent.type == this.frontier[this.depth].type && this.frontier.length > 1)\n    { this.closeFrontierNode(); }\n\n  // Add new frontier nodes for any open nodes at the end.\n  for (var i$2 = 0, cur = fragment; i$2 < openEndCount; i$2++) {\n    var node = cur.lastChild;\n    this.frontier.push({type: node.type, match: node.contentMatchAt(node.childCount)});\n    cur = node.content;\n  }\n\n  // Update `this.unplaced`. Drop the entire node from which we\n  // placed it we got to its end, otherwise just drop the placed\n  // nodes.\n  this.unplaced = !toEnd ? new Slice(dropFromFragment(slice.content, sliceDepth, taken), slice.openStart, slice.openEnd)\n    : sliceDepth == 0 ? Slice.empty\n    : new Slice(dropFromFragment(slice.content, sliceDepth - 1, 1),\n                sliceDepth - 1, openEndCount < 0 ? slice.openEnd : sliceDepth - 1);\n};\n\nFitter.prototype.mustMoveInline = function mustMoveInline () {\n  if (!this.$to.parent.isTextblock || this.$to.end() == this.$to.pos) { return -1 }\n  var top = this.frontier[this.depth], level;\n  if (!top.type.isTextblock || !contentAfterFits(this.$to, this.$to.depth, top.type, top.match, false) ||\n      (this.$to.depth == this.depth && (level = this.findCloseLevel(this.$to)) && level.depth == this.depth)) { return -1 }\n\n  var ref = this.$to;\n    var depth = ref.depth;\n    var after = this.$to.after(depth);\n  while (depth > 1 && after == this.$to.end(--depth)) { ++after; }\n  return after\n};\n\nFitter.prototype.findCloseLevel = function findCloseLevel ($to) {\n  scan: for (var i = Math.min(this.depth, $to.depth); i >= 0; i--) {\n    var ref = this.frontier[i];\n      var match = ref.match;\n      var type = ref.type;\n    var dropInner = i < $to.depth && $to.end(i + 1) == $to.pos + ($to.depth - (i + 1));\n    var fit = contentAfterFits($to, i, type, match, dropInner);\n    if (!fit) { continue }\n    for (var d = i - 1; d >= 0; d--) {\n      var ref$1 = this.frontier[d];\n        var match$1 = ref$1.match;\n        var type$1 = ref$1.type;\n      var matches = contentAfterFits($to, d, type$1, match$1, true);\n      if (!matches || matches.childCount) { continue scan }\n    }\n    return {depth: i, fit: fit, move: dropInner ? $to.doc.resolve($to.after(i + 1)) : $to}\n  }\n};\n\nFitter.prototype.close = function close ($to) {\n  var close = this.findCloseLevel($to);\n  if (!close) { return null }\n\n  while (this.depth > close.depth) { this.closeFrontierNode(); }\n  if (close.fit.childCount) { this.placed = addToFragment(this.placed, close.depth, close.fit); }\n  $to = close.move;\n  for (var d = close.depth + 1; d <= $to.depth; d++) {\n    var node = $to.node(d), add = node.type.contentMatch.fillBefore(node.content, true, $to.index(d));\n    this.openFrontierNode(node.type, node.attrs, add);\n  }\n  return $to\n};\n\nFitter.prototype.openFrontierNode = function openFrontierNode (type, attrs, content) {\n  var top = this.frontier[this.depth];\n  top.match = top.match.matchType(type);\n  this.placed = addToFragment(this.placed, this.depth, Fragment.from(type.create(attrs, content)));\n  this.frontier.push({type: type, match: type.contentMatch});\n};\n\nFitter.prototype.closeFrontierNode = function closeFrontierNode () {\n  var open = this.frontier.pop();\n  var add = open.match.fillBefore(Fragment.empty, true);\n  if (add.childCount) { this.placed = addToFragment(this.placed, this.frontier.length, add); }\n};\n\nObject.defineProperties( Fitter.prototype, prototypeAccessors$1 );\n\nfunction dropFromFragment(fragment, depth, count) {\n  if (depth == 0) { return fragment.cutByIndex(count) }\n  return fragment.replaceChild(0, fragment.firstChild.copy(dropFromFragment(fragment.firstChild.content, depth - 1, count)))\n}\n\nfunction addToFragment(fragment, depth, content) {\n  if (depth == 0) { return fragment.append(content) }\n  return fragment.replaceChild(fragment.childCount - 1,\n                               fragment.lastChild.copy(addToFragment(fragment.lastChild.content, depth - 1, content)))\n}\n\nfunction contentAt(fragment, depth) {\n  for (var i = 0; i < depth; i++) { fragment = fragment.firstChild.content; }\n  return fragment\n}\n\nfunction closeNodeStart(node, openStart, openEnd) {\n  if (openStart <= 0) { return node }\n  var frag = node.content;\n  if (openStart > 1)\n    { frag = frag.replaceChild(0, closeNodeStart(frag.firstChild, openStart - 1, frag.childCount == 1 ? openEnd - 1 : 0)); }\n  if (openStart > 0) {\n    frag = node.type.contentMatch.fillBefore(frag).append(frag);\n    if (openEnd <= 0) { frag = frag.append(node.type.contentMatch.matchFragment(frag).fillBefore(Fragment.empty, true)); }\n  }\n  return node.copy(frag)\n}\n\nfunction contentAfterFits($to, depth, type, match, open) {\n  var node = $to.node(depth), index = open ? $to.indexAfter(depth) : $to.index(depth);\n  if (index == node.childCount && !type.compatibleContent(node.type)) { return null }\n  var fit = match.fillBefore(node.content, true, index);\n  return fit && !invalidMarks(type, node.content, index) ? fit : null\n}\n\nfunction invalidMarks(type, fragment, start) {\n  for (var i = start; i < fragment.childCount; i++)\n    { if (!type.allowsMarks(fragment.child(i).marks)) { return true } }\n  return false\n}\n\n// :: (number, number, Slice) → this\n// Replace a range of the document with a given slice, using `from`,\n// `to`, and the slice's [`openStart`](#model.Slice.openStart) property\n// as hints, rather than fixed start and end points. This method may\n// grow the replaced area or close open nodes in the slice in order to\n// get a fit that is more in line with WYSIWYG expectations, by\n// dropping fully covered parent nodes of the replaced region when\n// they are marked [non-defining](#model.NodeSpec.defining), or\n// including an open parent node from the slice that _is_ marked as\n// [defining](#model.NodeSpec.defining).\n//\n// This is the method, for example, to handle paste. The similar\n// [`replace`](#transform.Transform.replace) method is a more\n// primitive tool which will _not_ move the start and end of its given\n// range, and is useful in situations where you need more precise\n// control over what happens.\nTransform.prototype.replaceRange = function(from, to, slice) {\n  if (!slice.size) { return this.deleteRange(from, to) }\n\n  var $from = this.doc.resolve(from), $to = this.doc.resolve(to);\n  if (fitsTrivially($from, $to, slice))\n    { return this.step(new ReplaceStep(from, to, slice)) }\n\n  var targetDepths = coveredDepths($from, this.doc.resolve(to));\n  // Can't replace the whole document, so remove 0 if it's present\n  if (targetDepths[targetDepths.length - 1] == 0) { targetDepths.pop(); }\n  // Negative numbers represent not expansion over the whole node at\n  // that depth, but replacing from $from.before(-D) to $to.pos.\n  var preferredTarget = -($from.depth + 1);\n  targetDepths.unshift(preferredTarget);\n  // This loop picks a preferred target depth, if one of the covering\n  // depths is not outside of a defining node, and adds negative\n  // depths for any depth that has $from at its start and does not\n  // cross a defining node.\n  for (var d = $from.depth, pos = $from.pos - 1; d > 0; d--, pos--) {\n    var spec = $from.node(d).type.spec;\n    if (spec.defining || spec.isolating) { break }\n    if (targetDepths.indexOf(d) > -1) { preferredTarget = d; }\n    else if ($from.before(d) == pos) { targetDepths.splice(1, 0, -d); }\n  }\n  // Try to fit each possible depth of the slice into each possible\n  // target depth, starting with the preferred depths.\n  var preferredTargetIndex = targetDepths.indexOf(preferredTarget);\n\n  var leftNodes = [], preferredDepth = slice.openStart;\n  for (var content = slice.content, i = 0;; i++) {\n    var node = content.firstChild;\n    leftNodes.push(node);\n    if (i == slice.openStart) { break }\n    content = node.content;\n  }\n  // Back up if the node directly above openStart, or the node above\n  // that separated only by a non-defining textblock node, is defining.\n  if (preferredDepth > 0 && leftNodes[preferredDepth - 1].type.spec.defining &&\n      $from.node(preferredTargetIndex).type != leftNodes[preferredDepth - 1].type)\n    { preferredDepth -= 1; }\n  else if (preferredDepth >= 2 && leftNodes[preferredDepth - 1].isTextblock && leftNodes[preferredDepth - 2].type.spec.defining &&\n           $from.node(preferredTargetIndex).type != leftNodes[preferredDepth - 2].type)\n    { preferredDepth -= 2; }\n\n  for (var j = slice.openStart; j >= 0; j--) {\n    var openDepth = (j + preferredDepth + 1) % (slice.openStart + 1);\n    var insert = leftNodes[openDepth];\n    if (!insert) { continue }\n    for (var i$1 = 0; i$1 < targetDepths.length; i$1++) {\n      // Loop over possible expansion levels, starting with the\n      // preferred one\n      var targetDepth = targetDepths[(i$1 + preferredTargetIndex) % targetDepths.length], expand = true;\n      if (targetDepth < 0) { expand = false; targetDepth = -targetDepth; }\n      var parent = $from.node(targetDepth - 1), index = $from.index(targetDepth - 1);\n      if (parent.canReplaceWith(index, index, insert.type, insert.marks))\n        { return this.replace($from.before(targetDepth), expand ? $to.after(targetDepth) : to,\n                            new Slice(closeFragment(slice.content, 0, slice.openStart, openDepth),\n                                      openDepth, slice.openEnd)) }\n    }\n  }\n\n  var startSteps = this.steps.length;\n  for (var i$2 = targetDepths.length - 1; i$2 >= 0; i$2--) {\n    this.replace(from, to, slice);\n    if (this.steps.length > startSteps) { break }\n    var depth = targetDepths[i$2];\n    if (depth < 0) { continue }\n    from = $from.before(depth); to = $to.after(depth);\n  }\n  return this\n};\n\nfunction closeFragment(fragment, depth, oldOpen, newOpen, parent) {\n  if (depth < oldOpen) {\n    var first = fragment.firstChild;\n    fragment = fragment.replaceChild(0, first.copy(closeFragment(first.content, depth + 1, oldOpen, newOpen, first)));\n  }\n  if (depth > newOpen) {\n    var match = parent.contentMatchAt(0);\n    var start = match.fillBefore(fragment).append(fragment);\n    fragment = start.append(match.matchFragment(start).fillBefore(Fragment.empty, true));\n  }\n  return fragment\n}\n\n// :: (number, number, Node) → this\n// Replace the given range with a node, but use `from` and `to` as\n// hints, rather than precise positions. When from and to are the same\n// and are at the start or end of a parent node in which the given\n// node doesn't fit, this method may _move_ them out towards a parent\n// that does allow the given node to be placed. When the given range\n// completely covers a parent node, this method may completely replace\n// that parent node.\nTransform.prototype.replaceRangeWith = function(from, to, node) {\n  if (!node.isInline && from == to && this.doc.resolve(from).parent.content.size) {\n    var point = insertPoint(this.doc, from, node.type);\n    if (point != null) { from = to = point; }\n  }\n  return this.replaceRange(from, to, new Slice(Fragment.from(node), 0, 0))\n};\n\n// :: (number, number) → this\n// Delete the given range, expanding it to cover fully covered\n// parent nodes until a valid replace is found.\nTransform.prototype.deleteRange = function(from, to) {\n  var $from = this.doc.resolve(from), $to = this.doc.resolve(to);\n  var covered = coveredDepths($from, $to);\n  for (var i = 0; i < covered.length; i++) {\n    var depth = covered[i], last = i == covered.length - 1;\n    if ((last && depth == 0) || $from.node(depth).type.contentMatch.validEnd)\n      { return this.delete($from.start(depth), $to.end(depth)) }\n    if (depth > 0 && (last || $from.node(depth - 1).canReplace($from.index(depth - 1), $to.indexAfter(depth - 1))))\n      { return this.delete($from.before(depth), $to.after(depth)) }\n  }\n  for (var d = 1; d <= $from.depth && d <= $to.depth; d++) {\n    if (from - $from.start(d) == $from.depth - d && to > $from.end(d) && $to.end(d) - to != $to.depth - d)\n      { return this.delete($from.before(d), to) }\n  }\n  return this.delete(from, to)\n};\n\n// : (ResolvedPos, ResolvedPos) → [number]\n// Returns an array of all depths for which $from - $to spans the\n// whole content of the nodes at that depth.\nfunction coveredDepths($from, $to) {\n  var result = [], minDepth = Math.min($from.depth, $to.depth);\n  for (var d = minDepth; d >= 0; d--) {\n    var start = $from.start(d);\n    if (start < $from.pos - ($from.depth - d) ||\n        $to.end(d) > $to.pos + ($to.depth - d) ||\n        $from.node(d).type.spec.isolating ||\n        $to.node(d).type.spec.isolating) { break }\n    if (start == $to.start(d)) { result.push(d); }\n  }\n  return result\n}\n\nexport { AddMarkStep, MapResult, Mapping, RemoveMarkStep, ReplaceAroundStep, ReplaceStep, Step, StepMap, StepResult, Transform, TransformError, canJoin, canSplit, dropPoint, findWrapping, insertPoint, joinPoint, liftTarget, replaceStep };\n//# sourceMappingURL=index.es.js.map\n","/**\n * @since 2021-03-26 16:27\n * @author vivaxy\n */\nimport { StepMap } from 'prosemirror-transform';\n\n// 0 1 2 3 4  0 1 2 3 4\n//  A B C D => A X B D\nconst stepMap = new StepMap([1, 0, 1, 2, 1, 0]);\nconsole.log('new StepMap([1, 0, 1, 2, 1, 0])', stepMap);\n\nstepMap.forEach(function (oldStart, oldEnd, newStart, newEnd) {\n  console.log('forEach', oldStart, oldEnd, newStart, newEnd);\n});\n\nconsole.log('stepMap.invert()', stepMap.invert());\nconsole.log('StepMap.offset(1)', StepMap.offset(1));\n"],"names":["OrderedMap","content","this","prototype","constructor","find","key","i","length","get","found","undefined","update","value","newKey","self","remove","slice","push","splice","addToStart","concat","addToEnd","addBefore","place","without","forEach","f","prepend","map","from","size","subtract","append","result","prop","findDiffStart","a","b","pos","childCount","childA","child","childB","sameMarkup","isText","text","j","inner","nodeSize","findDiffEnd","posA","posB","iA","iB","same","minSize","Math","min","Fragment","prototypeAccessors","firstChild","configurable","lastChild","nodesBetween","to","nodeStart","parent","end","start","max","descendants","textBetween","blockSeparator","leafText","separated","node","isLeaf","isBlock","other","last","first","withText","cut","cutByIndex","empty","replaceChild","index","current","copy","eq","RangeError","maybeChild","p","otherPos","findIndex","round","retIndex","curPos","toString","toStringInner","join","toJSON","n","fromJSON","schema","Array","isArray","nodeFromJSON","fromArray","array","joined","nodes","attrs","Object","defineProperties","offset","compareDeep","p$1","Mark","type","ReplaceError","message","err","Error","call","__proto__","addToSet","set","placed","excludes","rank","removeFromSet","isInSet","obj","name","_","json","marks","create","sameSet","setFrom","none","sort","Slice","openStart","openEnd","prototypeAccessors$1","removeRange","ref","ref$1","indexTo","offsetTo","insertInto","dist","insert","canReplace","replace","$from","$to","depth","replaceOuter","$along","extra","resolveNoCache","prepareSliceForReplace","replaceThreeWay","parentOffset","replaceTwoWay","checkJoin","main","sub","compatibleContent","joinable","$before","$after","addNode","target","addRange","$start","$end","startIndex","endIndex","textOffset","nodeAfter","nodeBefore","validContent","insertAt","fragment","removeBetween","maxOpen","openIsolating","spec","isolating","n$1","ResolvedPos","path","prototypeAccessors$2","doc","resolveDepth","val","indexAfter","before","after","dOff","posAtIndex","tmp","inclusive","marksAcross","isInline","next","sharedDepth","blockRange","pred","d","inlineContent","NodeRange","sameParent","str","resolve","rem","resolveCached","resolveCache","cached","resolveCachePos","resolveCacheSize","prototypeAccessors$1$1","emptyAttrs","Node","prototypeAccessors$3","textContent","isTextblock","isAtom","startPos","hasMarkup","defaultAttrs","mark","includeParents","nodeAt","childAfter","childBefore","rangeHasMark","toDebugString","wrapMarks","contentMatchAt","match","contentMatch","matchFragment","replacement","one","two","validEnd","allowsMarks","canReplaceWith","matchType","canAppend","check","m","markFromJSON","nodeType","TextNode","JSON","stringify","base","ContentMatch","wrapCache","prototypeAccessors$4","defaultType","edgeCount","parse","string","nodeTypes","stream","TokenStream","expr","parseExpr","nfa","labeled","connect","compile","exprs","reduce","out","loop","edge","loop$1","cur","i$1","next$1","i$2","next$2","term","edges","explore","states","known","indexOf","nullFrom","state","states$1","cmp","work","dead","hasRequiredAttrs","checkForDeadEnds","frag","compatible","fillBefore","toEnd","seen","search","types","finished","tp","createAndFill","findWrapping","computed","computeWrapping","active","via","shift","reverse","scan","inline","tokens","split","pop","prototypeAccessors$1$2","parseExprSeq","eat","parseExprSubscript","test","typeName","type$1","groups","resolveName","parseExprAtom","parseExprRange","parseNum","Number","defaults","attrName","attr","hasDefault","default","computeAttrs","built","given","initAttrs","Attribute","tok","SyntaxError","NodeType","group","markSet","prototypeAccessors$5","atom","isRequired","createChecked","allowsMarkType","markType","allowedMarks","topType","topNode","options","hasOwnProperty","prototypeAccessors$1$3","MarkType","excluded","instance","Schema","contentExprCache","prop$1","contentExpr","markExpr","gatherMarks","prop$2","excl","bind","topNodeType","wrappings","ok","mark$1","text$1","DOMParser","rules","this$1","tags","styles","rule","tag","style","normalizeLists","some","r","dom","context","ParseContext","addAll","finish","parseSlice","matchTag","matches","namespace","namespaceURI","matchesContext","getAttrs","matchStyle","charCodeAt","schemaRules","priority","rules$1","parseDOM","name$1","fromSchema","domParser","blockTags","address","article","aside","blockquote","canvas","dd","div","dl","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","header","hgroup","hr","li","noscript","ol","output","pre","section","table","tfoot","ul","ignoreTags","head","object","script","title","listTags","wsOptionsFor","preserveWhitespace","NodeContext","pendingMarks","solid","activeMarks","stashMarks","fill","wrap","exec","popFromStashMark","applyPending","nextType","pending","markMayApply","inlineContext","parentNode","nodeName","toLowerCase","parser","open","isOpen","topContext","topOptions","topMatch","findPositions","needsBlock","prototypeAccessors$6","top","currentPos","selector","msMatchesSelector","webkitMatchesSelector","mozMatchesSelector","v","returned","addDOM","addTextNode","getAttribute","readStyles","re","trim","parseStyles","addPendingMark","addElement","removePendingMark","nodeValue","domNodeBefore","previousSibling","insertNode","findInText","findInside","matchAfter","ruleID","prevItem","nextSibling","appendChild","normalizeList","ruleFromNode","ignore","ignoreFallback","skip","closeParent","sync","oldNeedsBlock","leafFallback","addElementByRule","consuming","ownerDocument","createTextNode","findPlace","continueAfter","enter","startIn","getContent","contentDOM","contentElement","querySelector","findAround","childNodes","findAtPoint","route","cx","enterInner","block","textblockFromContext","closeExtra","preserveWS","topOpen","contains","compareDocumentPosition","textNode","parts","option","useRoot","minDepth","part","$context","deflt","findSameMarkInSet","upto","level","lastIndexOf","stashMark","DOMSerializer","gatherToDOM","toDOM","document","window","serializeFragment","createDocumentFragment","keep","rendered","spanning","add","markDOM","serializeMark","serializeNodeInner","renderSpec","onContent","serializeNode","structure","xmlNS","tagName","space","createElementNS","createElement","space$1","setAttributeNS","setAttribute","innerContent","domSerializer","nodesFromSchema","marksFromSchema","factor16","pow","recoverIndex","MapResult","deleted","recover","StepMap","ranges","inverted","diff","recoverOffset","mapResult","assoc","_map","simple","oldIndex","newIndex","oldSize","newSize","touches","oldStart","newStart","invert","Mapping","maps","mirror","TransformError","appendMap","mirrors","setMirror","appendMapping","mapping","startSize","mirr","getMirror","appendMappingInverted","totalSize","inverse","corr","Transform","steps","docs","docChanged","mustOverride","step","maybeStep","failed","apply","addStep","getMap","stepsByID","Step","_doc","_mapping","merge","_other","stepType","jsonID","id","stepClass","StepResult","fail","fromReplace","e","ReplaceStep","contentBetween","slice$1","ReplaceAroundStep","gapFrom","gapTo","gap","inserted","mapFragment","mapped","lift","range","gapStart","gapEnd","splitting","d$1","splitting$1","wrappers","setBlockType","mapFrom","$pos","canChangeType","clearIncompatible","startM","endM","setNodeMarkup","newNode","replaceWith","typesAfter","typeAfter","AddMarkStep","oldSlice","RemoveMarkStep","fitsTrivially","addMark","removed","added","removing","adding","newSet","s","removeMark","matched","toRemove","found$1","parentType","delSteps","allowed","Fitter","fit","replaceStep","delete","unplaced","frontier","dropFromFragment","count","addToFragment","contentAt","closeNodeStart","contentAfterFits","invalidMarks","closeFragment","oldOpen","newOpen","coveredDepths","findFittable","placeNodes","openMore","dropNode","moveInline","mustMoveInline","placedSize","close","pass","sliceDepth","frontierDepth","inject","openAtEnd","closeFrontierNode","openFrontierNode","taken","openEndCount","findCloseLevel","dropInner","match$1","move","replaceRange","deleteRange","targetDepths","preferredTarget","unshift","defining","preferredTargetIndex","leftNodes","preferredDepth","openDepth","targetDepth","expand","startSteps","replaceRangeWith","point","index$1","insertPoint","covered","stepMap","console","log","oldEnd","newEnd"],"sourceRoot":""}